[
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17267",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17267/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17267/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17267/events",
    "html_url": "https://github.com/facebook/react/pull/17267",
    "id": 517344370,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzM2NDMxNTky",
    "number": 17267,
    "title": "Bailout without entering work loop for roots without work WIP",
    "user": {
      "login": "bvaughn",
      "id": 29597,
      "node_id": "MDQ6VXNlcjI5NTk3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bvaughn",
      "html_url": "https://github.com/bvaughn",
      "followers_url": "https://api.github.com/users/bvaughn/followers",
      "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
      "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
      "organizations_url": "https://api.github.com/users/bvaughn/orgs",
      "repos_url": "https://api.github.com/users/bvaughn/repos",
      "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bvaughn/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2019-11-04T19:09:03Z",
    "updated_at": "2020-01-23T18:43:29Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/17267",
      "html_url": "https://github.com/facebook/react/pull/17267",
      "diff_url": "https://github.com/facebook/react/pull/17267.diff",
      "patch_url": "https://github.com/facebook/react/pull/17267.patch"
    },
    "body": "Wraps up #16980\r\n\r\nThis addresses some edge cases where React currently does a no-op render and an empty/unnecessary commit.\r\n\r\n- [x] Bailout without entering work loop for roots without work (see #16980).\r\n- [x] Fix failing refs-test by wrapping updates with `act()`.\r\n- [x] See if any other tests trigger this early bailout behavior to better understand the causes.\r\n\r\nThe tests listed below trigger this new early bailout code. Everyone is in `performSyncWorkOnRoot` (none trigger the new code in `performConcurrentWorkOnRoot`). I spot checked a couple of them to see why the new code is being hit, to see if it looked problematic. Below is my findings:\r\n\r\n* `ReactES6Class-test` \"_renders only once when setting state in componentWillMount_\"\r\nThis one calls `performSyncWorkOnRoot()` twice. The first time is the callback passed from `legacyRenderSubtreeIntoContainer` to `unbatchedUpdates`. The second one (the one that bails out) is when `unbatchedUpdates` calls `flushSyncCallbackQueue`. This flush can be bailed out on.\r\n\r\n* `RaectDOMInput-test` \"_should control a value in reentrant events_\"\r\nThis one hits the new codepath when it dispatch a discrete \"input\" event. It looks like when our test calls `node.dispatchEvent()` for the \"input\" event, something is actually dispatching a series of events (input, input, blur, focus) which causes more updates to be scheduled with React than necessary. Now we bail out after the first.\r\n\r\n* `ReactCompositeComponent` \"_should warn about `setState` in render_\"\r\nThis one calls `setState` in render. Without this call, the bailout codepath doesn't get hit. Looks like the `setState` call leaves two things in the queue, so when the subsequent call to `flushSyncCallbackQueue` flushes them both, the second one is a no-op. The first thing gets added to the queue when the `setState` call is made. The second one by `commitRootImpl()` when it calls `ensureRootIsScheduled()` because `getNextRootExpirationTimeToWorkOn` returns a value that indicates there's more work.\r\n\r\n---\r\n\r\n* `ReactTestUtils.act()` > legacy mode › sync › flushes effects on every call\r\n* `ReactTestUtils.act()` > blocking mode › sync › flushes effects on every call\r\n* `ReactDOMInput` > should control a value in reentrant events\r\n* `ReactDOMInput` > should control values in reentrant events with different targets\r\n* `ReactDOMInput` > switching text inputs between numeric and string numbers › changes the number 2 to \"2.0\" using a change handler\r\n* `ReactDOMInput` > should control radio buttons if the tree updates during render\r\n* `ReactDOMInput` > assigning the value attribute on controlled inputs › always sets the attribute when values change on text inputs\r\n* `ReactDOMInput` > assigning the value attribute on controlled inputs › does not set the value attribute on number inputs if focused\r\n* `ReactDOMInput` > assigning the value attribute on controlled inputs › sets the value attribute on number inputs on blur\r\n* `ReactDOMInput` > setting a controlled input to undefined › reverts the value attribute to the initial value\r\n* `ReactDOMInput` > setting a controlled input to undefined › preserves the value property\r\n* `ReactDOMInput` > setting a controlled input to null › reverts the value attribute to the initial value\r\n* `ReactDOMInput` > setting a controlled input to null › preserves the value property\r\n* `ReactUpdates` > should queue updates from during mount\r\n* `ReactUpdates` > uses correct base state for setState inside render phase\r\n* `ReactFresh` > can preserve state for forwardRef\r\n* `ReactFresh` > should not consider two forwardRefs around the same type to be equivalent\r\n* `ReactFresh` > can update forwardRef render function with its wrapper\r\n* `ReactFresh` > can update forwardRef render function in isolation\r\n* `ReactFresh` > can preserve state for simple memo\r\n* `ReactFresh` > can preserve state for memo with custom comparison\r\n* `ReactFresh` > can update simple memo function in isolation\r\n* `ReactFresh` > can preserve state for memo(forwardRef)\r\n* `ReactFresh` > can preserve state for lazy after resolution\r\n* `ReactFresh` > can patch lazy before resolution\r\n* `ReactFresh` > can patch lazy(forwardRef) before resolution\r\n* `ReactFresh` > can patch lazy(memo) before resolution\r\n* `ReactFresh` > can patch lazy(memo(forwardRef)) before resolution\r\n* `ReactFresh` > can patch both trees while suspense is displaying the fallback\r\n* `ReactFresh` > does not re-render ancestor components unnecessarily during a hot update\r\n* `ReactFresh` > does not leak state between components\r\n* `ReactFresh` > can force remount by changing signature\r\n* `ReactFresh` > can remount on signature change within a <root> wrapper\r\n* `ReactFresh` > can remount on signature change within a simple memo wrapper\r\n* `ReactFresh` > can remount on signature change within a lazy simple memo wrapper\r\n* `ReactFresh` > can remount on signature change within forwardRef\r\n* `ReactFresh` > can remount on signature change within forwardRef render function\r\n* `ReactFresh` > can remount on signature change within nested memo\r\n* `ReactFresh` > can remount on signature change within a memo wrapper and custom comparison\r\n* `ReactFresh` > can remount on signature change within a class\r\n* `ReactFresh` > can remount on signature change within a context provider\r\n* `ReactFresh` > can remount on signature change within a context consumer\r\n* `ReactFresh` > can remount on signature change within a suspense node\r\n* `ReactFresh` > can remount on signature change within a mode node\r\n* `ReactFresh` > can remount on signature change within a fragment node\r\n* `ReactFresh` > can remount on signature change within multiple siblings\r\n* `ReactFresh` > can remount on signature change within a profiler node\r\n* `ReactFresh` > resets hooks with dependencies on hot reload\r\n* `ReactFresh` > can hot reload offscreen components\r\n* `ReactFresh` > remounts classes on every edit\r\n* `ReactFresh` > remounts on conversion from class to function and back\r\n* `ReactFresh` > can update multiple roots independently\r\n* `ReactCompositeComponent` > should warn about `setState` in render\r\n* `ReactCompositeComponent` > should warn about `setState` in getChildContext\r\n* `ReactCompositeComponent` > this.state should be updated on setState callback inside componentWillMount\r\n* `ReactDOMServerIntegration` > legacy context › renders with a call to componentWillMount before getChildContext with clean client render\r\n* `ReactDOMServerIntegration` > legacy context › renders with a call to componentWillMount before getChildContext with client render on top of good server markup\r\n* `ReactDOMServerIntegration` > legacy context › renders with a call to componentWillMount before getChildContext with client render on top of bad server markup\r\n* `SimpleEventPlugin` > interactive events, in concurrent mode › flushes pending interactive work before extracting event handler\r\n* `SimpleEventPlugin` > interactive events, in concurrent mode › flushes discrete updates in order\r\n* `ReactDOMServerIntegrationUserInteraction` > user interaction with controlled inputs › renders a controlled text input with clean client render\r\n* `ReactDOMServerIntegrationUserInteraction` > user interaction with controlled inputs › renders a controlled text input with client render on top of good server markup\r\n* `ReactDOMServerIntegrationUserInteraction` > user interaction with controlled inputs › renders a controlled textarea with clean client render\r\n* `ReactDOMServerIntegrationUserInteraction` > user interaction with controlled inputs › renders a controlled textarea with client render on top of good server markup\r\n* `ReactDOMServerIntegrationUserInteraction` > user interaction with controlled inputs › renders a controlled checkbox with clean client render\r\n* `ReactDOMServerIntegrationUserInteraction` > user interaction with controlled inputs › renders a controlled checkbox with client render on top of good server markup\r\n* `ReactBrowserEventEmitter` > should not invoke newly inserted handlers while bubbling\r\n* `ReactDOMServerSelectiveHydration` > hydrates at higher pri if sync did not work first time\r\n* `ReactDOMServerSelectiveHydration` > hydrates at higher pri for secondary discrete events\r\n* `ReactES6Class` > renders only once when setting state in componentWillMount\r\n* `mixing responders with the heritage event system` > should properly flush sync when the event systems are mixed with unstable_flushDiscreteUpdates\r\n* `mixing responders with the heritage event system` > mixing the Input and Press repsonders › is async for non-input events\r\n* `ReactTypeScriptClass` > renders only once when setting state in componentWillMount\r\n* `ReactCoffeeScriptClass` > renders only once when setting state in componentWillMount\r\n* `ReactDOMHooks` > should not bail out when an update is scheduled from within an event handler in Concurrent Mode\r\n* `ReactIncrementalScheduling` > can opt-out of batching using unbatchedUpdates\r\n* `ReactCompositeComponent-state` > should support setting state\r\n* `ReactCompositeComponent-state` > should treat assigning to this.state inside cWM as a replaceState, with a warning\r\n* `ReactDOMComponentTree` > finds a controlled instance from node and gets its current fiber props",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17258",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17258/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17258/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17258/events",
    "html_url": "https://github.com/facebook/react/issues/17258",
    "id": 517073779,
    "node_id": "MDU6SXNzdWU1MTcwNzM3Nzk=",
    "number": 17258,
    "title": "Bug - react onClick() doesn't work well on WKWebview - iOS 13",
    "user": {
      "login": "Aarbel",
      "id": 25119847,
      "node_id": "MDQ6VXNlcjI1MTE5ODQ3",
      "avatar_url": "https://avatars2.githubusercontent.com/u/25119847?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Aarbel",
      "html_url": "https://github.com/Aarbel",
      "followers_url": "https://api.github.com/users/Aarbel/followers",
      "following_url": "https://api.github.com/users/Aarbel/following{/other_user}",
      "gists_url": "https://api.github.com/users/Aarbel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Aarbel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Aarbel/subscriptions",
      "organizations_url": "https://api.github.com/users/Aarbel/orgs",
      "repos_url": "https://api.github.com/users/Aarbel/repos",
      "events_url": "https://api.github.com/users/Aarbel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Aarbel/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 69105358,
        "node_id": "MDU6TGFiZWw2OTEwNTM1OA==",
        "url": "https://api.github.com/repos/facebook/react/labels/Browser:%20Safari",
        "name": "Browser: Safari",
        "color": "c7def8",
        "default": false,
        "description": null
      },
      {
        "id": 127893911,
        "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
        "name": "Component: DOM",
        "color": "fef2c0",
        "default": false,
        "description": null
      },
      {
        "id": 710722093,
        "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
        "name": "Type: Needs Investigation",
        "color": "fbca04",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 26,
    "created_at": "2019-11-04T10:50:47Z",
    "updated_at": "2020-10-27T01:38:44Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "# Context\r\nApple just realeased new version of WKWebview with iOS 13.\r\nOn my mobile app i don't use react native but pure React / HTML inside a Native Webview.\r\n\r\n# Problem \r\nTouch events don't work well on onClick() since the update. \r\nThe user has to touch very fast to trigger the onClick(). If the use touches more than 200 / 300 ms it doesn't trigger the onClick()\r\n\r\nDo you know a way to fix it ?\r\n\r\nThanks a lot for your help !\r\n\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17256",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17256/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17256/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17256/events",
    "html_url": "https://github.com/facebook/react/issues/17256",
    "id": 516904161,
    "node_id": "MDU6SXNzdWU1MTY5MDQxNjE=",
    "number": 17256,
    "title": "\"NotFoundError: Failed to execute 'removeChild' on 'Node'\" when using React.Fragment <></> with Chrome extension which does not modify the DOM tree below the root div of the React app",
    "user": {
      "login": "tonix-tuft",
      "id": 10134421,
      "node_id": "MDQ6VXNlcjEwMTM0NDIx",
      "avatar_url": "https://avatars2.githubusercontent.com/u/10134421?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tonix-tuft",
      "html_url": "https://github.com/tonix-tuft",
      "followers_url": "https://api.github.com/users/tonix-tuft/followers",
      "following_url": "https://api.github.com/users/tonix-tuft/following{/other_user}",
      "gists_url": "https://api.github.com/users/tonix-tuft/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tonix-tuft/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tonix-tuft/subscriptions",
      "organizations_url": "https://api.github.com/users/tonix-tuft/orgs",
      "repos_url": "https://api.github.com/users/tonix-tuft/repos",
      "events_url": "https://api.github.com/users/tonix-tuft/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tonix-tuft/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710722093,
        "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
        "name": "Type: Needs Investigation",
        "color": "fbca04",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2019-11-03T23:06:16Z",
    "updated_at": "2020-09-16T11:51:37Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "This has already been discussed before (#14740), but there wasn't a reproducing example for this kind of issue and I think that my use case is also a bit different.\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nI believe this can be considered a bug.\r\n\r\n**What is the current behavior?**\r\nIn order to reproduce this issue using Chrome, you will need to install the following Chrome extension called TransOver:\r\n\r\n![Screen Shot 2019-11-03 at 22 51 33](https://user-images.githubusercontent.com/10134421/68092541-86165d80-fe8c-11e9-9f39-e566f770fcb2.png)\r\n\r\nhttps://chrome.google.com/webstore/detail/transover/aggiiclaiamajehmlfpkjmlbadmkledi?hl=en\r\n\r\nI use it to translate text on hover.\r\nThe only thing that this extension does is appending a tooltip with the translated text to the `body` HTML element when you hover an element with text (it doesn't seem it appends stuff below the React's root `div` element).\r\n\r\nI have created two code sandboxes to show you better and explain the problem.\r\nIt is a minimal example of a movie app like the one Dan showed at JSConf 2018 in Iceland, though not as beautiful as his and without all that cool Suspense stuff, but at least it uses hooks :) .\r\n\r\n- https://codesandbox.io/s/heuristic-lake-exxvu\r\n\r\n- https://codesandbox.io/s/magical-grass-016kc\r\n\r\nThe two code sandboxes are essentially identical, the only difference is that the first one (`heuristic-lake-exxvu`) uses a `div` element for `MovieApp`, whereas the second (`magical-grass-016kc`) uses a `React.Fragment` (`<></>`) component:\r\n\r\n`heuristic-lake-exxvu`'s `MovieApp`:\r\n\r\n```\r\nconst MovieApp = () => {\r\n  const [currentMovie, setCurrentMovie] = useState(initialCurrentMovieState);\r\n  const { isLoading, id: currentMovieId, movieDetails } = currentMovie;\r\n  ...\r\n  return (\r\n    <div> // <======================= Uses a `div`\r\n      {isLoading ? (\r\n        \"Loading...\"\r\n      ) : (\r\n      ...\r\n```\r\n\r\n`magical-grass-016kc`'s `MovieApp`:\r\n\r\n```\r\nconst MovieApp = () => {\r\n  const [currentMovie, setCurrentMovie] = useState(initialCurrentMovieState);\r\n  const { isLoading, id: currentMovieId, movieDetails } = currentMovie;\r\n  ...\r\n  return (\r\n    <> // <======================= Uses a fragment\r\n      {isLoading ? (\r\n        \"Loading...\"\r\n      ) : (\r\n      ...\r\n```\r\n\r\nNow, if you open `heuristic-lake-exxvu` and click on the `Show movie info` button of any movie in the list, you will see the `Loading...` text before the promise with the data of the movie resolves, and the `Movie` component is rendered.\r\n\r\nBefore the promise resolves, try hovering on the `Loading...` text with the `TransOver` extension enabled, you should see:\r\n\r\n![Screen Shot 2019-11-03 at 23 26 48](https://user-images.githubusercontent.com/10134421/68093013-764d4800-fe91-11e9-8b64-2dbdade0a500.png)\r\n\r\nThe world makes sense here, no errors, no warnings, everything works.\r\n\r\nNow try to do the same thing on `magical-grass-016kc`, as soon as you hover `Loading...`, you will see the `NotFoundError: Failed to execute 'removeChild' on 'Node'` error logged in the browser's console:\r\n\r\n![Screen Shot 2019-11-03 at 23 40 00](https://user-images.githubusercontent.com/10134421/68093177-49019980-fe93-11e9-9f9b-13f91a12e996.png)\r\n\r\n![Screen Shot 2019-11-03 at 23 40 52](https://user-images.githubusercontent.com/10134421/68093194-6df60c80-fe93-11e9-910f-ae748bc9fb91.png)\r\n\r\nHere is a streamable video showing this same error:\r\n\r\nhttps://streamable.com/4gxua\r\n\r\n**What is the expected behavior?**\r\nIn `heuristic-lake-exxvu` (uses a `div` instead of React fragment), everything worked.\r\nThe TransOver extension appends to `body` and does not modify the React's root `div` neither does it append stuff below it, so I would expect the code in the React fragment example (`magical-grass-016kc`) to behave the same and work as in `heuristic-lake-exxvu`.\r\n\r\nChrome is plenty of useful extensions like this one and they should not really interfere with React, I think that users using React applications may also install other extensions which modify the DOM which they find useful.\r\nIf an extension appends to body like TransOver does, I wouldn't expect React to have problems with it and cause undesirable effects and application errors like this one.\r\n\r\nThis is my opinion, I would be very glad to hear what you think about it, and if you think I have spotted a bug of React fragments (I think it's a bug because, again, it works when using a `div` in `heuristic-lake-exxvu`).\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nBrowser: Chrome\r\nReact v16.11.0\r\nReact DOM v16.11.0\r\n\r\n\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17254",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17254/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17254/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17254/events",
    "html_url": "https://github.com/facebook/react/issues/17254",
    "id": 516563176,
    "node_id": "MDU6SXNzdWU1MTY1NjMxNzY=",
    "number": 17254,
    "title": "React DevTools w/ Electron: Profiler \"Reload and start profiling\" doesn't work due to XMLHttpRequest 'null' origin",
    "user": {
      "login": "tomsseisums",
      "id": 1030080,
      "node_id": "MDQ6VXNlcjEwMzAwODA=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1030080?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tomsseisums",
      "html_url": "https://github.com/tomsseisums",
      "followers_url": "https://api.github.com/users/tomsseisums/followers",
      "following_url": "https://api.github.com/users/tomsseisums/following{/other_user}",
      "gists_url": "https://api.github.com/users/tomsseisums/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tomsseisums/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tomsseisums/subscriptions",
      "organizations_url": "https://api.github.com/users/tomsseisums/orgs",
      "repos_url": "https://api.github.com/users/tomsseisums/repos",
      "events_url": "https://api.github.com/users/tomsseisums/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tomsseisums/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710573595,
        "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
        "name": "Component: Developer Tools",
        "color": "fbca04",
        "default": false,
        "description": null
      },
      {
        "id": 710375792,
        "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2019-11-02T10:44:08Z",
    "updated_at": "2019-11-02T15:45:02Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nAn error gets thrown when using DevTools Profiler on **Electron** with the \"**Reload and start profiling**\" feature that leaves Profiler in an unexpected state - the profiling session does not end.\r\n\r\nI initially opened [the issue over at Electron](https://github.com/electron/electron/issues/20915), but [got asked to get your opinion first](https://github.com/electron/electron/issues/20915#issuecomment-548996868).\r\n\r\n**What is the current behavior?**\r\n\r\n- Open React DevTools Profiler in **Electron**\r\n- Click \"Reload and start profiling\"\r\n- Await reload\r\n- Do actions\r\n- Click \"Stop profiling\" - does not work\r\n- Because there are errors in console (actually thrown immediately after reload, don't have to do any extra actions):\r\n  ```\r\n  Access to XMLHttpRequest at 'chrome-extension://react-developer-tools/build/renderer.js' from origin 'null' has been blocked by CORS policy: Cross origin requests are only supported for protocol schemes: http, data, chrome, https.\r\n  ```\r\n  ```\r\n  Uncaught DOMException: Failed to execute 'send' on 'XMLHttpRequest': Failed to load 'chrome-extension://react-developer-tools/build/renderer.js'.\r\n  ```\r\n\r\n![Errors after triggering profiler](https://user-images.githubusercontent.com/1030080/68028419-81e81580-fcbd-11e9-85ae-58b8437df6d8.png)\r\n\r\n![The respective code in React DevTools](https://user-images.githubusercontent.com/1030080/68028680-1ce0ef80-fcbe-11e9-9b63-4fa0494af0dd.png)\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nYou'll have to use [Electron Fiddle](https://github.com/electron/fiddle) for this one with this gist: https://gist.github.com/joltmode/82574cab4970def210dac0c68d4c34b8\r\n\r\n**What is the expected behavior?**\r\n\r\n- Open React DevTools Profiler\r\n- Click \"Reload and start profiling\"\r\n- Await reload\r\n- Do actions\r\n- Click \"Stop profiling\"\r\n- See profiler results\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n- React 16.11.0\r\n- Latest version of DevTools\r\n- Electron 6.1.2",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17239",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17239/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17239/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17239/events",
    "html_url": "https://github.com/facebook/react/issues/17239",
    "id": 515529503,
    "node_id": "MDU6SXNzdWU1MTU1Mjk1MDM=",
    "number": 17239,
    "title": "Blink with useTransition",
    "user": {
      "login": "gregberge",
      "id": 266302,
      "node_id": "MDQ6VXNlcjI2NjMwMg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/266302?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gregberge",
      "html_url": "https://github.com/gregberge",
      "followers_url": "https://api.github.com/users/gregberge/followers",
      "following_url": "https://api.github.com/users/gregberge/following{/other_user}",
      "gists_url": "https://api.github.com/users/gregberge/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gregberge/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gregberge/subscriptions",
      "organizations_url": "https://api.github.com/users/gregberge/orgs",
      "repos_url": "https://api.github.com/users/gregberge/repos",
      "events_url": "https://api.github.com/users/gregberge/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gregberge/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1205087127,
        "node_id": "MDU6TGFiZWwxMjA1MDg3MTI3",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Concurrent%20Mode",
        "name": "Component: Concurrent Mode",
        "color": "ffccd3",
        "default": false,
        "description": ""
      },
      {
        "id": 40929151,
        "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
        "name": "Type: Bug",
        "color": "b60205",
        "default": false,
        "description": null
      },
      {
        "id": 710722093,
        "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
        "name": "Type: Needs Investigation",
        "color": "fbca04",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2019-10-31T15:33:52Z",
    "updated_at": "2020-07-21T21:40:08Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Bug**\r\n\r\n**What is the current behavior?**\r\n\r\nAs discussed with @gaearon in this thread: https://twitter.com/dan_abramov/status/1189923059031068672\r\n\r\nWhen the `useTransition` is fast, it results to a small blink for the user. You can reproduce it in this example :\r\n\r\n- Choose \"Concurrent Mode\"\r\n- Click \"Next\" in \"fretch-mode: legacy-mode\" \r\n\r\nhttps://codesandbox.io/s/fretch-example-r6t8g\r\n\r\nA simpler example can be provided but I don't have time right now, I just want to track the issue.\r\n\r\n**What is the expected behavior?**\r\n\r\nThe expected behaviour would be to avoid the blink if it is less than \"100ms\" (or another arbitrary delay).\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nThe experimental version, see the example.\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17217",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17217/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17217/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17217/events",
    "html_url": "https://github.com/facebook/react/pull/17217",
    "id": 514358633,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzMzOTkwNzg4",
    "number": 17217,
    "title": "Move resetAfterCommit until after we updated the root's current tree",
    "user": {
      "login": "sebmarkbage",
      "id": 63648,
      "node_id": "MDQ6VXNlcjYzNjQ4",
      "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sebmarkbage",
      "html_url": "https://github.com/sebmarkbage",
      "followers_url": "https://api.github.com/users/sebmarkbage/followers",
      "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
      "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
      "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
      "repos_url": "https://api.github.com/users/sebmarkbage/repos",
      "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2019-10-30T02:44:02Z",
    "updated_at": "2020-04-01T19:50:35Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/17217",
      "html_url": "https://github.com/facebook/react/pull/17217",
      "diff_url": "https://github.com/facebook/react/pull/17217.diff",
      "patch_url": "https://github.com/facebook/react/pull/17217.patch"
    },
    "body": "Currently we disable all user space events in resetAfterCommit so, if you just use React events, it doesn't really matter where we call this.\r\n\r\nHowever, setting focus and selection can be observable e.g. using native browser events. If you setState or something in those events, they should probably behave as if you're already on the new tree.\r\n\r\nSimilarly if we do end up triggering blur/focus events simulated, then those should see the updated tree.\r\n\r\nInterestingly, this would fire before life-cycles which is confusing. Although that also happens if you set focus manually on the DOM in a life-cycle too. Triggering a blur after life-cycles could work but needs to take into account that focus can change possibly several times in the life-cycles too.\r\n\r\nRelated to https://github.com/facebook/react/pull/17214",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17208",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17208/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17208/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17208/events",
    "html_url": "https://github.com/facebook/react/issues/17208",
    "id": 513948819,
    "node_id": "MDU6SXNzdWU1MTM5NDg4MTk=",
    "number": 17208,
    "title": "Devtools tabs should not appear in chrome-extension pages when using react-devtools as an entry point",
    "user": {
      "login": "nickmccurdy",
      "id": 927220,
      "node_id": "MDQ6VXNlcjkyNzIyMA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/927220?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nickmccurdy",
      "html_url": "https://github.com/nickmccurdy",
      "followers_url": "https://api.github.com/users/nickmccurdy/followers",
      "following_url": "https://api.github.com/users/nickmccurdy/following{/other_user}",
      "gists_url": "https://api.github.com/users/nickmccurdy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nickmccurdy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nickmccurdy/subscriptions",
      "organizations_url": "https://api.github.com/users/nickmccurdy/orgs",
      "repos_url": "https://api.github.com/users/nickmccurdy/repos",
      "events_url": "https://api.github.com/users/nickmccurdy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nickmccurdy/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710573595,
        "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
        "name": "Component: Developer Tools",
        "color": "fbca04",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 13,
    "created_at": "2019-10-29T14:13:36Z",
    "updated_at": "2020-08-01T20:20:29Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nThe React devtools tabs in Chrome devtools can be displayed in extension pages, even though modifying extensions in other extensions is not supported by Chrome, and React devtools are therefore broken.\r\n\r\n![image](https://user-images.githubusercontent.com/927220/67774646-21927300-fa34-11e9-99b5-ea3c62a99e0d.png)\r\n\r\n![image](https://user-images.githubusercontent.com/927220/67774697-38d16080-fa34-11e9-8ea6-fddb21c7bb14.png)\r\n\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n1. Install Chrome and React devtools\r\n2. Open devtools in a chrome-extension page implemented with React\r\n\r\nExample: [prettier-chrome-extension](https://github.com/prettier/prettier-chrome-extension/tree/options) (install from source and open extension options)\r\n\r\n**What is the expected behavior?**\r\n\r\nReact devtools should not appear when it's not supported, just like when devtools are opened on a page that doesn't use React.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n- React 16.11.0\r\n- React Developer Tools 4.2.0 (10/3/2019)\r\n- Chrome 78.0.3904.70\r\n- macOS 10.15",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17203",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17203/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17203/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17203/events",
    "html_url": "https://github.com/facebook/react/issues/17203",
    "id": 513228074,
    "node_id": "MDU6SXNzdWU1MTMyMjgwNzQ=",
    "number": 17203,
    "title": "Empty object as SuspenseConfig acts like infinite timeout",
    "user": {
      "login": "Eddie-CooRo",
      "id": 20463083,
      "node_id": "MDQ6VXNlcjIwNDYzMDgz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/20463083?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Eddie-CooRo",
      "html_url": "https://github.com/Eddie-CooRo",
      "followers_url": "https://api.github.com/users/Eddie-CooRo/followers",
      "following_url": "https://api.github.com/users/Eddie-CooRo/following{/other_user}",
      "gists_url": "https://api.github.com/users/Eddie-CooRo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Eddie-CooRo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Eddie-CooRo/subscriptions",
      "organizations_url": "https://api.github.com/users/Eddie-CooRo/orgs",
      "repos_url": "https://api.github.com/users/Eddie-CooRo/repos",
      "events_url": "https://api.github.com/users/Eddie-CooRo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Eddie-CooRo/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1109407645,
        "node_id": "MDU6TGFiZWwxMTA5NDA3NjQ1",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Suspense",
        "name": "Component: Suspense",
        "color": "8ffcd6",
        "default": false,
        "description": ""
      },
      {
        "id": 710722093,
        "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
        "name": "Type: Needs Investigation",
        "color": "fbca04",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2019-10-28T10:46:54Z",
    "updated_at": "2020-04-01T21:27:04Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nProbable Bug\r\n\r\n**What is the current behavior?**\r\nWhen an empty object is passed as SuspenseConfig, React waits infinitely on the previous tree for new Suspended components to get resolved.\r\n\r\n**A minimal demo of the problem:**\r\nHere is a demonstration, using the same example used throughout the concurrent docs:\r\nhttps://codesandbox.io/s/empty-suspense-config-example-88ghb \r\n\r\n**What is the expected behavior?**\r\nI don't know if it's a bug, or it's intentional. But if it's the expected behavior, I think it's better to add this to the documentation. \r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact and ReactDOM's experimental build",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17190",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17190/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17190/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17190/events",
    "html_url": "https://github.com/facebook/react/issues/17190",
    "id": 512813254,
    "node_id": "MDU6SXNzdWU1MTI4MTMyNTQ=",
    "number": 17190,
    "title": "useTransition hook name already exits in the ecosystem",
    "user": {
      "login": "just-boris",
      "id": 812240,
      "node_id": "MDQ6VXNlcjgxMjI0MA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/812240?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/just-boris",
      "html_url": "https://github.com/just-boris",
      "followers_url": "https://api.github.com/users/just-boris/followers",
      "following_url": "https://api.github.com/users/just-boris/following{/other_user}",
      "gists_url": "https://api.github.com/users/just-boris/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/just-boris/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/just-boris/subscriptions",
      "organizations_url": "https://api.github.com/users/just-boris/orgs",
      "repos_url": "https://api.github.com/users/just-boris/repos",
      "events_url": "https://api.github.com/users/just-boris/events{/privacy}",
      "received_events_url": "https://api.github.com/users/just-boris/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1205087127,
        "node_id": "MDU6TGFiZWwxMjA1MDg3MTI3",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Concurrent%20Mode",
        "name": "Component: Concurrent Mode",
        "color": "ffccd3",
        "default": false,
        "description": ""
      },
      {
        "id": 710375792,
        "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 10,
    "created_at": "2019-10-26T09:22:05Z",
    "updated_at": "2019-11-05T07:00:19Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "The new concurrent mode provides a new hook - [`useTransition`](https://reactjs.org/docs/concurrent-mode-reference.html#usetransition). However the name of it is confusing. The word “transition” in web development already refers to animations and css [transition](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions) property. There also exist [useTransition hook](https://www.react-spring.io/docs/hooks/use-transition) provided by react-spring library. So people who will use both concurrent mode and react-spring in their projects will be confused by clashing names.\r\n\r\nDid you consider different names for concurrent transitions? For example, `useTransaction` is not present in the ecosystems and can be used to describe concurrent updates.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17185",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17185/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17185/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17185/events",
    "html_url": "https://github.com/facebook/react/issues/17185",
    "id": 512751716,
    "node_id": "MDU6SXNzdWU1MTI3NTE3MTY=",
    "number": 17185,
    "title": "useDeferredValue does not abort running reconcile work for stale value",
    "user": {
      "login": "Bnaya",
      "id": 1304862,
      "node_id": "MDQ6VXNlcjEzMDQ4NjI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1304862?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Bnaya",
      "html_url": "https://github.com/Bnaya",
      "followers_url": "https://api.github.com/users/Bnaya/followers",
      "following_url": "https://api.github.com/users/Bnaya/following{/other_user}",
      "gists_url": "https://api.github.com/users/Bnaya/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Bnaya/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Bnaya/subscriptions",
      "organizations_url": "https://api.github.com/users/Bnaya/orgs",
      "repos_url": "https://api.github.com/users/Bnaya/repos",
      "events_url": "https://api.github.com/users/Bnaya/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Bnaya/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1205087127,
        "node_id": "MDU6TGFiZWwxMjA1MDg3MTI3",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Concurrent%20Mode",
        "name": "Component: Concurrent Mode",
        "color": "ffccd3",
        "default": false,
        "description": ""
      },
      {
        "id": 40929151,
        "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
        "name": "Type: Bug",
        "color": "b60205",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 14,
    "created_at": "2019-10-25T22:59:18Z",
    "updated_at": "2020-07-25T11:10:52Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n**bug**\r\n\r\n**What is the current behavior?**\r\nWhen useDeferredValue value is updated while the previous reconcile work is still running,\r\nThe previous reconcile work is not aborted, and the new work is queued after it.\r\n\r\n**repro:**\r\nBased on useDeferredValue example,\r\nhttps://codesandbox.io/s/infallible-dewdney-9fkv9\r\n\r\nFor better reproducibility i've made it to run longer using\r\n using `timeoutMs: 30000` + `while (performance.now() - now < 100) {` )\r\nand i've added an indicator value: `Time since last key stroke`\r\nhttps://codesandbox.io/s/intelligent-mestorf-u0p2b\r\n\r\n* Start timeline record\r\n* Type A B C with 1-3 sec interval between key strokes.\r\n* See timeline, there's work of 24 secs 8 + 8 + 8, for each key stroke \r\n* See the values of `Result #X` changes to the old stale value.\r\n\r\nThis is not optimal for 2 reasons:\r\n* We show stale data when we have something newer.\r\n* The cpu is locked processing the old value reconcile, and the new value needs to wait.\r\n\r\n**What is the expected behavior?**\r\nThe prev reconcile work should be cancelled/aborted,\r\nAnd the new value reconcile should start immediately \r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nreact/react-dom `0.0.0-experimental-5faf377df`",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17180",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17180/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17180/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17180/events",
    "html_url": "https://github.com/facebook/react/issues/17180",
    "id": 512359091,
    "node_id": "MDU6SXNzdWU1MTIzNTkwOTE=",
    "number": 17180,
    "title": "Suggestion: Block unsafe javascript: URLs in Concurrent and Blocking Modes",
    "user": {
      "login": "radex",
      "id": 183747,
      "node_id": "MDQ6VXNlcjE4Mzc0Nw==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/183747?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/radex",
      "html_url": "https://github.com/radex",
      "followers_url": "https://api.github.com/users/radex/followers",
      "following_url": "https://api.github.com/users/radex/following{/other_user}",
      "gists_url": "https://api.github.com/users/radex/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/radex/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/radex/subscriptions",
      "organizations_url": "https://api.github.com/users/radex/orgs",
      "repos_url": "https://api.github.com/users/radex/repos",
      "events_url": "https://api.github.com/users/radex/events{/privacy}",
      "received_events_url": "https://api.github.com/users/radex/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710375792,
        "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-10-25T07:48:03Z",
    "updated_at": "2019-10-31T14:03:24Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "In 16.9.0, a warning was added about `javascript:` URLs. This check is very, very important, as it's incredibly easy to forget about just once place where potential user data is passed onto DOM way. And of course, allowing a javascript: URL to be injected into DOM is a very serious XSS issue.\r\n\r\nI griped before that this is too important to be just a warning, and suggested that a semver-compatible solution is to provide an exported function that allows a runtime opt-in to the new safe behavior. This suggestion was dismissed, since if I want this, I can just make my own build of react with the flag enabled. (Of course, almost no one will do this, because it's just too much of a pain to make your own dependency builds with every release)\r\n\r\nI'd like to make a similar suggestion again. Since Concurrent and Blocking modes are coming soon(ish), and make many breaking changes anyway, why not take this opportunity to also block unsafe javascript: URLs when the mode is enabled? I know that URLs have nothing to do with concurrent mode (unlike unsafe lifecycle methods, etc.), but since many people will want to jump onto this new feature anyway and are willing to deal with some migration required anyway, why not add this vital security precaution as well?\r\n\r\nWaiting until React 17 to protect… well, probably countless React apps that don't properly sanitize URLs, just doesn't seem reasonable, when the feature is already implemented, only disabled under a feature flag.\r\n\r\ncc @gaearon @sebmarkbage ",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17168",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17168/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17168/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17168/events",
    "html_url": "https://github.com/facebook/react/issues/17168",
    "id": 511024159,
    "node_id": "MDU6SXNzdWU1MTEwMjQxNTk=",
    "number": 17168,
    "title": "Script tags are rendered inconsistently between client and server (html-encoded on server)",
    "user": {
      "login": "accidentaldeveloper",
      "id": 5819232,
      "node_id": "MDQ6VXNlcjU4MTkyMzI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/5819232?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/accidentaldeveloper",
      "html_url": "https://github.com/accidentaldeveloper",
      "followers_url": "https://api.github.com/users/accidentaldeveloper/followers",
      "following_url": "https://api.github.com/users/accidentaldeveloper/following{/other_user}",
      "gists_url": "https://api.github.com/users/accidentaldeveloper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/accidentaldeveloper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/accidentaldeveloper/subscriptions",
      "organizations_url": "https://api.github.com/users/accidentaldeveloper/orgs",
      "repos_url": "https://api.github.com/users/accidentaldeveloper/repos",
      "events_url": "https://api.github.com/users/accidentaldeveloper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/accidentaldeveloper/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2019-10-23T01:58:52Z",
    "updated_at": "2020-08-23T01:26:30Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nReport a bug\r\n\r\n**What is the current behavior?**\r\nServer-rendered script tags are html-encoded. Client-rendered script tags are not.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n1. Render a script tag with quotes on the server.\r\n2. Render a script tag with quotes on the client.\r\n3. Compare the output. \r\n\r\nNote that the quotes are html-encoded to `&quot` when rendered on the server.\r\n\r\nThis CodeSandbox is a little rough but very simple: https://codesandbox.io/s/affectionate-star-xe8ym\r\n\r\n**What is the expected behavior?**\r\nThe script tag content is not html-encoded on either the server or the client.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n16.8.6\r\nI'm not sure when this was introduced.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17153",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17153/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17153/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17153/events",
    "html_url": "https://github.com/facebook/react/issues/17153",
    "id": 509657172,
    "node_id": "MDU6SXNzdWU1MDk2NTcxNzI=",
    "number": 17153,
    "title": "Infinite loop of errors when host config is missing `getRootHostContext`",
    "user": {
      "login": "sophiebits",
      "id": 6820,
      "node_id": "MDQ6VXNlcjY4MjA=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/6820?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sophiebits",
      "html_url": "https://github.com/sophiebits",
      "followers_url": "https://api.github.com/users/sophiebits/followers",
      "following_url": "https://api.github.com/users/sophiebits/following{/other_user}",
      "gists_url": "https://api.github.com/users/sophiebits/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sophiebits/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sophiebits/subscriptions",
      "organizations_url": "https://api.github.com/users/sophiebits/orgs",
      "repos_url": "https://api.github.com/users/sophiebits/repos",
      "events_url": "https://api.github.com/users/sophiebits/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sophiebits/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 739761016,
        "node_id": "MDU6TGFiZWw3Mzk3NjEwMTY=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler",
        "name": "Component: Reconciler",
        "color": "f9a798",
        "default": false,
        "description": null
      },
      {
        "id": 1776420141,
        "node_id": "MDU6TGFiZWwxNzc2NDIwMTQx",
        "url": "https://api.github.com/repos/facebook/react/labels/Partner",
        "name": "Partner",
        "color": "e4bef7",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-10-20T21:43:45Z",
    "updated_at": "2020-01-08T23:42:29Z",
    "closed_at": null,
    "author_association": "COLLABORATOR",
    "active_lock_reason": null,
    "body": "**Do you want to request a *feature* or report a *bug*?** bug\r\n\r\n**What is the current behavior?** If you start writing a shitty reconciler:\r\n\r\n```\r\nimport React from 'react';\r\nimport ReactReconciler from 'react-reconciler';\r\nlet reconciler = ReactReconciler({\r\n  /* empty host config */\r\n});\r\nlet container = reconciler.createContainer(null, false, false);\r\nreconciler.updateContainer(<div />, container, null, null);\r\n```\r\n\r\nthen you get this error in an infinite loop:\r\n\r\n```\r\nUncaught TypeError: getRootHostContext is not a function\r\n    at pushHostContainer (react-reconciler.development.js:5526)\r\n    at pushHostRootContext (react-reconciler.development.js:8152)\r\n    at beginWork$1 (react-reconciler.development.js:9599)\r\n    at HTMLUnknownElement.callCallback (react-reconciler.development.js:11399)\r\n    at Object.invokeGuardedCallbackDev (react-reconciler.development.js:11448)\r\n    at invokeGuardedCallback (react-reconciler.development.js:11499)\r\n    at beginWork$$1 (react-reconciler.development.js:15639)\r\n    at performUnitOfWork (react-reconciler.development.js:14544)\r\n    at workLoopSync (react-reconciler.development.js:14520)\r\n    at performSyncWorkOnRoot (react-reconciler.development.js:14072)\r\n    at react-reconciler.development.js:1966\r\n    at unstable_runWithPriority (scheduler.development.js:818)\r\n    at runWithPriority (react-reconciler.development.js:1912)\r\n    at flushSyncCallbackQueueImpl (react-reconciler.development.js:1961)\r\n    at flushSyncCallbackQueue (react-reconciler.development.js:1949)\r\n    at scheduleUpdateOnFiber (react-reconciler.development.js:13490)\r\n    at scheduleRootUpdate (react-reconciler.development.js:16860)\r\n    at updateContainerAtExpirationTime (react-reconciler.development.js:16886)\r\n    at Object.updateContainer (react-reconciler.development.js:16986)\r\n ```\r\n\r\nPresumably this also happens if getRootHostContext is buggy and itself throws.\r\n\r\n**What is the expected behavior?** I'd expect it to crash once or twice and then stop. (This seems specific to `getRootHostContext`; no other missing method had the same result.) My recollection is we do intend to catch errors in host configs; if I'm misremembering feel free to wontfix.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?** react-reconciler 0.22.2 (from the 16.10.2 release)\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17140",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17140/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17140/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17140/events",
    "html_url": "https://github.com/facebook/react/issues/17140",
    "id": 509307804,
    "node_id": "MDU6SXNzdWU1MDkzMDc4MDQ=",
    "number": 17140,
    "title": "SuspenseList in DevTools could cycle through the Suspense states",
    "user": {
      "login": "sebmarkbage",
      "id": 63648,
      "node_id": "MDQ6VXNlcjYzNjQ4",
      "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sebmarkbage",
      "html_url": "https://github.com/sebmarkbage",
      "followers_url": "https://api.github.com/users/sebmarkbage/followers",
      "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
      "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
      "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
      "repos_url": "https://api.github.com/users/sebmarkbage/repos",
      "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710573595,
        "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
        "name": "Component: Developer Tools",
        "color": "fbca04",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2019-10-18T20:59:21Z",
    "updated_at": "2020-01-08T19:08:53Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "We currently have a way to force a fallback on a Suspense boundary in DevTools.\r\n\r\nIt might be cool to have a \"play\" button or something on SuspenseList that cycles through the states.\r\n\r\nE.g. if it's \"together\" mode it shows all the fallbacks and then switches to showing all the content and then back again in a loop.\r\n\r\nIf it's \"forwards\" it shows all the fallbacks then one at a time and then back to all fallbacks. If it's tail \"hidden\" or \"collapsed\" it hides all the ones that are not yet inserted and then inserts one at a time.\r\n\r\nCould be a nice way to demo/test the loading sequence experience.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17064",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17064/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17064/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17064/events",
    "html_url": "https://github.com/facebook/react/issues/17064",
    "id": 505686267,
    "node_id": "MDU6SXNzdWU1MDU2ODYyNjc=",
    "number": 17064,
    "title": "mouseEnter behaves like mouseOver when using ReactDOM.render() to mount a child element",
    "user": {
      "login": "sen14251",
      "id": 27114212,
      "node_id": "MDQ6VXNlcjI3MTE0MjEy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/27114212?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sen14251",
      "html_url": "https://github.com/sen14251",
      "followers_url": "https://api.github.com/users/sen14251/followers",
      "following_url": "https://api.github.com/users/sen14251/following{/other_user}",
      "gists_url": "https://api.github.com/users/sen14251/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sen14251/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sen14251/subscriptions",
      "organizations_url": "https://api.github.com/users/sen14251/orgs",
      "repos_url": "https://api.github.com/users/sen14251/repos",
      "events_url": "https://api.github.com/users/sen14251/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sen14251/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 127893911,
        "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
        "name": "Component: DOM",
        "color": "fef2c0",
        "default": false,
        "description": null
      },
      {
        "id": 710722093,
        "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
        "name": "Type: Needs Investigation",
        "color": "fbca04",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2019-10-11T07:28:30Z",
    "updated_at": "2020-04-01T22:07:46Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nWhen using `ReactDOM.render()` to mount a child element, `mouseEnter` behaves like `mouseOver` (`mouseLeave` behaves like `mouseOut`).  you can see the demo, and when my cursor moves between the red and blue blocks, it will repeatedly trigger mouseEnter and mouseLeave.\r\nhttps://codepen.io/sen-dream/pen/VwwvGbm\r\n\r\n**What is the expected behavior?**\r\nhttps://codepen.io/sen-dream/pen/WNNQgoy\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nTestes with React 16.8 on Chrome/macOS. It didn't work in previous versions.\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17003",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17003/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17003/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17003/events",
    "html_url": "https://github.com/facebook/react/issues/17003",
    "id": 502167180,
    "node_id": "MDU6SXNzdWU1MDIxNjcxODA=",
    "number": 17003,
    "title": "DevTools not properly shutting down between reloads in some cases",
    "user": {
      "login": "bvaughn",
      "id": 29597,
      "node_id": "MDQ6VXNlcjI5NTk3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bvaughn",
      "html_url": "https://github.com/bvaughn",
      "followers_url": "https://api.github.com/users/bvaughn/followers",
      "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
      "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
      "organizations_url": "https://api.github.com/users/bvaughn/orgs",
      "repos_url": "https://api.github.com/users/bvaughn/repos",
      "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bvaughn/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710573595,
        "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
        "name": "Component: Developer Tools",
        "color": "fbca04",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "bvaughn",
      "id": 29597,
      "node_id": "MDQ6VXNlcjI5NTk3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bvaughn",
      "html_url": "https://github.com/bvaughn",
      "followers_url": "https://api.github.com/users/bvaughn/followers",
      "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
      "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
      "organizations_url": "https://api.github.com/users/bvaughn/orgs",
      "repos_url": "https://api.github.com/users/bvaughn/repos",
      "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bvaughn/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "bvaughn",
        "id": 29597,
        "node_id": "MDQ6VXNlcjI5NTk3",
        "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bvaughn",
        "html_url": "https://github.com/bvaughn",
        "followers_url": "https://api.github.com/users/bvaughn/followers",
        "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
        "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
        "organizations_url": "https://api.github.com/users/bvaughn/orgs",
        "repos_url": "https://api.github.com/users/bvaughn/repos",
        "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bvaughn/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-10-03T16:24:08Z",
    "updated_at": "2020-01-08T19:09:21Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "Noticed this while testing the recently added \"highlight updates\" feature. It seems like relying on the content script's \"disconnect\" to shutdown things is too late, and we seem to be leaving at least an `Agent` (possibly more) connected.\r\n\r\nI think we may want to add some cleanup code to our initialization path (of the backend) to handle the case where a previous backend instance didn't get to finish shutting down.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/16993",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/16993/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/16993/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/16993/events",
    "html_url": "https://github.com/facebook/react/issues/16993",
    "id": 501749413,
    "node_id": "MDU6SXNzdWU1MDE3NDk0MTM=",
    "number": 16993,
    "title": "Add DevTools visualization for SSR hydration",
    "user": {
      "login": "bvaughn",
      "id": 29597,
      "node_id": "MDQ6VXNlcjI5NTk3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bvaughn",
      "html_url": "https://github.com/bvaughn",
      "followers_url": "https://api.github.com/users/bvaughn/followers",
      "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
      "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
      "organizations_url": "https://api.github.com/users/bvaughn/orgs",
      "repos_url": "https://api.github.com/users/bvaughn/repos",
      "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bvaughn/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710573595,
        "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
        "name": "Component: Developer Tools",
        "color": "fbca04",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "bvaughn",
      "id": 29597,
      "node_id": "MDQ6VXNlcjI5NTk3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bvaughn",
      "html_url": "https://github.com/bvaughn",
      "followers_url": "https://api.github.com/users/bvaughn/followers",
      "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
      "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
      "organizations_url": "https://api.github.com/users/bvaughn/orgs",
      "repos_url": "https://api.github.com/users/bvaughn/repos",
      "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bvaughn/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "bvaughn",
        "id": 29597,
        "node_id": "MDQ6VXNlcjI5NTk3",
        "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bvaughn",
        "html_url": "https://github.com/bvaughn",
        "followers_url": "https://api.github.com/users/bvaughn/followers",
        "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
        "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
        "organizations_url": "https://api.github.com/users/bvaughn/orgs",
        "repos_url": "https://api.github.com/users/bvaughn/repos",
        "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bvaughn/received_events",
        "type": "User",
        "site_admin": false
      },
      {
        "login": "sebmarkbage",
        "id": 63648,
        "node_id": "MDQ6VXNlcjYzNjQ4",
        "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sebmarkbage",
        "html_url": "https://github.com/sebmarkbage",
        "followers_url": "https://api.github.com/users/sebmarkbage/followers",
        "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
        "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
        "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
        "repos_url": "https://api.github.com/users/sebmarkbage/repos",
        "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
        "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2019-10-02T22:01:29Z",
    "updated_at": "2020-01-08T19:09:21Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "This feature relates to several new React APIs: concurrent mode, suspense, and server rendering / hydration\r\n\r\n# Background info\r\nWhen hydrating server-rendered content, React starts working on the outermost Suspense boundary and works its way in. During hydration, the server rendered HTML isn't interactive. React records events to replay them once content becomes interactive- (but that doesn't actually happen until React finishes work on the nearest boundary and commits it). React may also reprioritize the order in which boundaries are processed (so that boundaries with pending events get processed sooner).\r\n\r\nThis general process can be hard to reason about and debug, because much of it is not observable visually (beyond some interactions potentially feeling more laggy than expected).\r\n\r\nDevTools already provides some visual overlays (e.g. which elements were rendered by the currently selected Component, [\"highlight updates\"](https://github.com/facebook/react/pull/16989)). Perhaps DevTools could help here too by visualizing which boundaries in the tree have been hydrated.\r\n\r\n# Visualizing hydration progress\r\n1. When React begins hydrating a new root<sup>1</sup> DevTools will show a visual overlay<sup>2</sup> that covers the entire DOM element container.\r\n1. As React hydrates and commits each new level of Suspense boundaries, DevTools will draw the overlay to only cover the not-yet-hydrated boundaries.\r\n1. Once hydration is completed, all overlays will be cleared<sup>3</sup>.\r\n\r\nThis feature would be opt-in via a new DevTools setting.\r\n\r\n<sup>1</sup> This suggests a new React-to-DevTools hook to inform DevTools when hydration starts.\r\n\r\n<sup>2</sup> This overlay would nee to be designed. Perhaps some combination of semi-transparent with stripes or bars so that it is high contrast enough to be seen.\r\n\r\n<sup>3</sup> Because the data required to draw these overlays is essentially just a timestamp and a set of rects, some form of replay might be a nice addition.\r\n\r\n# Special cases\r\nIt could be helpful to highlight a couple of special cases by temporarily showing a different style overlay:\r\n\r\n* **Client rendered content inside of a server rendered fallback.** ([This case.](https://github.com/facebook/react/blob/bb680a09052b5af6543daf28bfcc3283bbc35cf9/packages/react-reconciler/src/ReactFiberBeginWork.js#L2030-L2039)) In some cases, the server rendered content may be a forced fallback that gets filled in with client rendered content.\r\n* **React can't complete hydration fast enough to process a client-side update.** ([This case.](https://github.com/facebook/react/blob/bb680a09052b5af6543daf28bfcc3283bbc35cf9/packages/react-reconciler/src/ReactFiberBeginWork.js#L2064-L2074)) In this case, React ends up deleting the server-rendered content and replacing it with client rendered content. For example, a layout effect may set state on an ancestor that updates context. This update is synchronous (because it comes from within a layout effect) so it immediately expires.\r\n\r\nI don't know if the above cases can be reliably detected by DevTools at present. They may require additional information (or an additional React-to-DevTools hook).\r\n\r\nThe following case does **not** need to be highlighted because it is not a deopt:\r\n* **Server rendered content removed before hydration.** In some cases, server rendered content is thrown away before hydration completes because of a user interaction. For example, if the user navigates to a new page before the initial page has finished hydrating.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/16980",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/16980/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/16980/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/16980/events",
    "html_url": "https://github.com/facebook/react/issues/16980",
    "id": 501223648,
    "node_id": "MDU6SXNzdWU1MDEyMjM2NDg=",
    "number": 16980,
    "title": "React DevTools recording commit without any component re-render",
    "user": {
      "login": "kentcdodds",
      "id": 1500684,
      "node_id": "MDQ6VXNlcjE1MDA2ODQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1500684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kentcdodds",
      "html_url": "https://github.com/kentcdodds",
      "followers_url": "https://api.github.com/users/kentcdodds/followers",
      "following_url": "https://api.github.com/users/kentcdodds/following{/other_user}",
      "gists_url": "https://api.github.com/users/kentcdodds/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kentcdodds/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kentcdodds/subscriptions",
      "organizations_url": "https://api.github.com/users/kentcdodds/orgs",
      "repos_url": "https://api.github.com/users/kentcdodds/repos",
      "events_url": "https://api.github.com/users/kentcdodds/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kentcdodds/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710573595,
        "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
        "name": "Component: Developer Tools",
        "color": "fbca04",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 27,
    "created_at": "2019-10-02T01:20:38Z",
    "updated_at": "2020-08-31T15:24:24Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "I'm struggling to make an isolated example of this, but the app where I found this is pretty simple so hopefully it's not too challenging to track down.\r\n\r\nSo I was profiling https://the-react-bookshelf.netlify.com (locally) and got this when I clicked on the \"login\" button:\r\n\r\n![image](https://user-images.githubusercontent.com/1500684/66011343-fe4dc580-e47f-11e9-9220-50ba884640f3.png)\r\n\r\n![image](https://user-images.githubusercontent.com/1500684/66011358-0dcd0e80-e480-11e9-80fb-86c0f2196ef9.png)\r\n\r\nThe fact that there was no profile data for a commit is interesting. Each commit should be associated to a state update somewhere in the tree, and wherever that happened should trigger at least one component to re-render, but that didn't appear to happen here.\r\n\r\nI also verified that I don't have any components filtered out:\r\n\r\n![image](https://user-images.githubusercontent.com/1500684/66011428-57b5f480-e480-11e9-9e66-7cf86f8ba48f.png)\r\n\r\nAnd I didn't filter any commits either:\r\n\r\n![image](https://user-images.githubusercontent.com/1500684/66011433-5ab0e500-e480-11e9-97a8-be202351870d.png)\r\n\r\nHere's the exported profile data:\r\n\r\nhttps://gist.github.com/kentcdodds/dbff66043653333cd22cb9261a08550b\r\n\r\nAnd here's the repo where you can pull it down and reproduce yourself: https://github.com/kentcdodds/bookshelf. The component we're looking at is here: https://github.com/kentcdodds/bookshelf/blob/master/src/unauthenticated-app.js\r\n\r\nSorry I can't give a more direct reproduction.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/16965",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/16965/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/16965/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/16965/events",
    "html_url": "https://github.com/facebook/react/issues/16965",
    "id": 500570869,
    "node_id": "MDU6SXNzdWU1MDA1NzA4Njk=",
    "number": 16965,
    "title": "Devtools Inspect Button Doesn't Work with Repeat Selections",
    "user": {
      "login": "lunaruan",
      "id": 2735514,
      "node_id": "MDQ6VXNlcjI3MzU1MTQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/2735514?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lunaruan",
      "html_url": "https://github.com/lunaruan",
      "followers_url": "https://api.github.com/users/lunaruan/followers",
      "following_url": "https://api.github.com/users/lunaruan/following{/other_user}",
      "gists_url": "https://api.github.com/users/lunaruan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lunaruan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lunaruan/subscriptions",
      "organizations_url": "https://api.github.com/users/lunaruan/orgs",
      "repos_url": "https://api.github.com/users/lunaruan/repos",
      "events_url": "https://api.github.com/users/lunaruan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lunaruan/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710573595,
        "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
        "name": "Component: Developer Tools",
        "color": "fbca04",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "bvaughn",
      "id": 29597,
      "node_id": "MDQ6VXNlcjI5NTk3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bvaughn",
      "html_url": "https://github.com/bvaughn",
      "followers_url": "https://api.github.com/users/bvaughn/followers",
      "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
      "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
      "organizations_url": "https://api.github.com/users/bvaughn/orgs",
      "repos_url": "https://api.github.com/users/bvaughn/repos",
      "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bvaughn/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "bvaughn",
        "id": 29597,
        "node_id": "MDQ6VXNlcjI5NTk3",
        "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bvaughn",
        "html_url": "https://github.com/bvaughn",
        "followers_url": "https://api.github.com/users/bvaughn/followers",
        "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
        "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
        "organizations_url": "https://api.github.com/users/bvaughn/orgs",
        "repos_url": "https://api.github.com/users/bvaughn/repos",
        "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bvaughn/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-09-30T23:07:10Z",
    "updated_at": "2020-01-08T19:09:20Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "Maybe we can detect this case by checking $0 and if not we can temporarily select null before reselecting. (?)",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/16956",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/16956/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/16956/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/16956/events",
    "html_url": "https://github.com/facebook/react/issues/16956",
    "id": 500206671,
    "node_id": "MDU6SXNzdWU1MDAyMDY2NzE=",
    "number": 16956,
    "title": "Design decision: why do we need the stale closure problem in the first place?",
    "user": {
      "login": "slorber",
      "id": 749374,
      "node_id": "MDQ6VXNlcjc0OTM3NA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/749374?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/slorber",
      "html_url": "https://github.com/slorber",
      "followers_url": "https://api.github.com/users/slorber/followers",
      "following_url": "https://api.github.com/users/slorber/following{/other_user}",
      "gists_url": "https://api.github.com/users/slorber/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/slorber/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/slorber/subscriptions",
      "organizations_url": "https://api.github.com/users/slorber/orgs",
      "repos_url": "https://api.github.com/users/slorber/repos",
      "events_url": "https://api.github.com/users/slorber/events{/privacy}",
      "received_events_url": "https://api.github.com/users/slorber/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710375792,
        "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 22,
    "created_at": "2019-09-30T11:07:44Z",
    "updated_at": "2020-06-01T15:31:13Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "Hi,\r\n\r\nI initially asked this on Twitter and @gaearon suggested me to open an issue instead.\r\nThe original thread is here: https://twitter.com/sebastienlorber/status/1178328607376232449?s=19\r\nMore easy to read here: https://threadreaderapp.com/thread/1178328607376232449.html\r\nBut will try to make this issue more clear and structured about my args and questions.\r\n\r\nDon't get me wrong, I really like hooks, but wonder if we can't have smarter abstractions and official patterns that make dealing with them more easy for authors and consumers.\r\n\r\n--------------------------------------\r\n\r\n## Workaround for the stale closure\r\n\r\nAfter using hooks for a while, and being familiar with the stale closure problem, I don't really understand why we need to handle closure dependencies, instead of just doing something like the following code, which always executes latest provided closure (capturing fresh variables)\r\n\r\n![image](https://user-images.githubusercontent.com/749374/65869094-f7d52600-e379-11e9-9634-1ab06b41e3ca.png)\r\n\r\nCoupling the dependencies of the closure and the conditions to trigger effect re-execution does not make much sense to me. For me it's perfectly valid to want to capture some variables in the closure, yet when those variables change we don't necessarily want to re-execute.\r\n\r\nThere are many cases where people are using refs to \"stabilize\" some value that should not trigger re-execution, or to access fresh values in closures.\r\n\r\nExamples in major libs includes:\r\n- Formik (code is pretty similar to my \"useSafeEffect\" above): https://github.com/jaredpalmer/formik/blob/master/src/Formik.tsx#L975\r\n- React-redux, which uses refs to access fresh props: https://github.com/reduxjs/react-redux/blob/b6b47995acfb8c1ff5d04a31c14aa75f112a47ab/src/components/connectAdvanced.js#L286\r\n\r\nAlso @Andarist (who maintains a few important React libs for a while): \r\n\r\n![image](https://user-images.githubusercontent.com/749374/65872332-9d8b9380-e380-11e9-90b3-bf294991bb82.png)\r\n\r\n\r\nWe often find in such codebase the \"useIsomorphicLayoutEffect\" hook which permits to ensure that the ref is set the earliest, and try to avoid the useLayoutEffect warning (see https://gist.github.com/gaearon/e7d97cdf38a2907924ea12e4ebdf3c85). What we are doing here seems unrelated to layout and makes me a bit uncomfortable btw.\r\n\r\n\r\n\r\n## Do we need an ESLint rule?\r\n\r\nThe ESLint rule looks to me only useful to avoid the stale closure problem. Without the stale closure problem (which the trick above solves), you can just focus on crafting the array/conditions for effect re-execution and don't need ESLint for that.\r\n\r\nAlso this would make it easier to wrap useEffect in userland without the fear to exposing users to stale closure problem, because eslint plugin won't notice missing dependencies for custom hooks.\r\n\r\nHere's some code for react-navigation (alpha/v5). To me this is weird to have to ask the user to \"useCallback\" just to stabilize the closure of useFocusEffect, just to ensure the effect only runs on messageId change.\r\n\r\n![image](https://user-images.githubusercontent.com/749374/65869719-3d462300-e37b-11e9-94d2-5200481588bc.png)\r\n\r\nNot sure to understand why we can't simply use the following instead. For which I don't see the point of using any ESLint rule. I just want the effect to run on messageId change, this is explicit enough for me and there's no \"trap\"\r\n\r\n![image](https://user-images.githubusercontent.com/749374/65869777-564ed400-e37b-11e9-8570-12534e5f2a53.png)\r\n\r\nI've heard that the [React team recommends rather the later](https://twitter.com/satya164/status/1178571088172896256), asking the user to useCallback, instead of building custom hooks taking a dependency array, why exactly? Also heard that the ESLint plugin now was able to detect missing deps in a custom hook, if you add the [hook name to ESLint conf](https://twitter.com/n1rual/status/1178568248062877701). Not, sure what to think we are supposed to do in the end.\r\n\r\n## Are we safe using workarounds?\r\n\r\nIt's still a bit hard for me to be sure which kind of code is \"safe\" regarding React's upcoming features, particularly Concurrent Mode. \r\n\r\nIf I use the `useEffectSafe` above or something equivalent relying on refs, I am safe and future proof?\r\n\r\nIf this is safe, and makes my life easier, why do I have to build this abstraction myself? \r\n\r\nWouldn't it make sense to make this kind of pattern more \"official\" / documented?\r\n\r\nI keep adding this kind of code to every project I work with:\r\n\r\n```tsx \r\nconst useGetter = <S>(value: S): (() => S) => {\r\n  const ref = useRef(value);\r\n  useIsomorphicLayoutEffect(() => {\r\n    ref.current = value;\r\n  });\r\n  return useCallback(() => ref.current, [ref]);\r\n};\r\n```\r\n(including important community projects like [react-navigation-hooks](https://github.com/react-navigation/hooks/blob/master/src/Hooks.ts#L46))\r\n\r\n## Is it a strategy to teach users?\r\n\r\nIs it a choice of the React team to not ship safer abstractions officially and make sure the users hit the closure problem early and get familiar with it? \r\n\r\nBecause anyway, even when using getters, we still can't prevent the user to capture some value. This has been documented by @sebmarkbage [here](https://gist.github.com/sebmarkbage/a5ef436427437a98408672108df01919) with async code, even with a getter, we can't prevent the user to do things like:\r\n\r\n```tsx\r\nonMount(async () => {\r\n  let isEligible = getIsEligible();\r\n  let data = await fetch(...);\r\n  // at this point, isEligible might has changed: we should rather use `getIsEligible()` again instead of storing a boolean in the closure (might depend on the usecase though, but maybe we can imagine isEligible => isMounted)\r\n  if (isEligible) {\r\n    doStuff(data);\r\n  }\r\n});\r\n```  \r\nAs far as I understand, this might be the case:\r\n\r\n> So you can easily get into the same situation even with a mutable source value. React just makes you always deal with it so that you don't get too far down the road before you have to refactor you code to deal with these cases anyway. I'm really glad how well the React community has dealt with this since the release of hooks because it really sets us up to predictably deal with more complex scenario and for doing more things in the future.\r\n\r\n\r\n## A concrete problem\r\n\r\nA react-navigation-hooks user reported that his effect run too much, using the following code:\r\n\r\n![image](https://user-images.githubusercontent.com/749374/65870979-bf374b80-e37d-11e9-8a6c-1f7df8503c18.png)\r\n\r\nIn practice, this is because react-navigation core does not provide stable `navigate` function, and thus the hooks too. The core does not necessarily want to \"stabilize\" the navigate function and guarantee that contract in its API.\r\n\r\nIt's not clear to me what should I do, between officially stabilizing the `navigate` function in the hooks project (relying on core, so core can still return distinct navigate functions), or if I should ask the user to stabilize the function himself in userland, leading to pain and boilerplate for many users trying to use the API.\r\n\r\nI don't understand why you can't simply dissociate the closure dependencies to the effect's triggering, and simply omitting the `navigate` function here:\r\n\r\n![image](https://user-images.githubusercontent.com/749374/65871264-51d7ea80-e37e-11e9-837d-291775853b2e.png)\r\n\r\n\r\nWhat bothers me is that somehow as hooks lib authors we now have to think about whether what we return to the user is stable or not, ie safe to use in an effect dependency array without unwanted effect re-executions.\r\n\r\nReturning a stable value in v1 and unstable in v2 is a breaking change that might break users apps in nasty ways, and we have to document this too in our api doc, or ask the user to not trust us, and do the memoization work themselves, which is quite error prone and verbose. Now as lib authors we have to think not only about the inputs/outputs, but also about preserving identities or not (it's probably not a new problem, because we already need to in userland for optimisations anyway).\r\n\r\nAsking users to do this memoization themselves is error prone and verbose. And intuitively some people will maybe want to `useMemo` (just because of the naming) which actually can tricks them by not offering the same guarantees than `useCallback`.\r\n\r\n\r\n## A tradeoff between different usecases in the name of a consistent API?\r\n\r\n@satya164 also mentionned that there are also usecases where the [ESLint plugin saved him](https://twitter.com/satya164/status/1178395620236759043) more than once because he forgot some dependency, and for him, it's more easy to fix an effect re-executing too much than to find out about some cached value not updating. \r\n\r\nI see how the ESLint plugin is really handy for usecases such as building a stable object to optimize renders or provide a stable context value. \r\n\r\nBut for useEffect, when capturing functions, sometimes executing 2 functions with distinct identities actually lead to the same result. Having to add those functions to dependencies is quite annoying in such case. \r\n\r\nBut I totally understand we want to guarantee some kind of consistency across all hooks API.\r\n\r\n## Conclusion\r\n\r\nI try to understand some of the tradeoffs being made in the API. Not sure to understand yet the whole picture, and I'm probably not alone. \r\n\r\n@gaearon said to open an issue with a comment: `It's more nuanced`. I'm here to discuss all the nuances if possible :)\r\n\r\nWhat particularly bothers me currently is not necessarily the existing API. It's rather:\r\n- the dogmatism of absolutely wanting to conform the ESLint rules (for which I don't agree with for all usecases). Currently I think users are really afraid to not follow the rules.\r\n- the lack of official patterns on how we are supposed to handle some specific hooks cases. And I think the \"getter\" pattern should be a thing that every hooks users know about and learn very early. Eventually adding such pattern in core would make it even more visible. Currently it's more lib authors and tech leads that all find out about this pattern in userland with small implementation variations.\r\n\r\nThose are the solutions that I think of. As I said I may miss something important and may change my opinions according to the answers.\r\n\r\nAs an author of a few React libs, I feel a bit frustrated to not be 100% sure what kind of API contract I should offer to my lib's users. I'm also not sure about the hooks patterns I can recommend or not. I plan to open-source something soon but don't even know if that's a good idea, and if it goes in the direction the React team want to go with hooks.\r\n\r\nThanks\r\n\r\n\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/16904",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/16904/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/16904/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/16904/events",
    "html_url": "https://github.com/facebook/react/issues/16904",
    "id": 498916121,
    "node_id": "MDU6SXNzdWU0OTg5MTYxMjE=",
    "number": 16904,
    "title": "More time between releasing @next and @latest",
    "user": {
      "login": "ghengeveld",
      "id": 321738,
      "node_id": "MDQ6VXNlcjMyMTczOA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/321738?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghengeveld",
      "html_url": "https://github.com/ghengeveld",
      "followers_url": "https://api.github.com/users/ghengeveld/followers",
      "following_url": "https://api.github.com/users/ghengeveld/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghengeveld/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghengeveld/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghengeveld/subscriptions",
      "organizations_url": "https://api.github.com/users/ghengeveld/orgs",
      "repos_url": "https://api.github.com/users/ghengeveld/repos",
      "events_url": "https://api.github.com/users/ghengeveld/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghengeveld/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710375792,
        "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2019-09-26T14:18:06Z",
    "updated_at": "2019-09-27T06:31:53Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "As a library author, I test against both the `@next` and `@latest` versions of `react` and `react-dom` (as well as 16.3, the oldest version we support). The rationale for that is to know up front if the upcoming version of React is going to break our library. I think this is good practice for everyone involved.\r\n\r\nUnfortunately, when 16.9 was released, there was only 1 week between promoting the RC to `@next`, and promoting that to `@latest`. Because the last RC broke the way `act` works, I had only 1 week to fix our unit test suite, which was all the sudden mostly failing. In fact we had to wait for `react-testing-library` to be updated to deal with this change.\r\n\r\nLuckily I was able to scramble and find time to fix this before the final release, but this won't always be the case. I imagine other library authors may struggle with this too. As such I would like to see at least a 2 week window between `next` and `latest`. I hope that's feasible.\r\n\r\nPlease advise if there's a better way to test for future compatibility.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/16873",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/16873/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/16873/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/16873/events",
    "html_url": "https://github.com/facebook/react/issues/16873",
    "id": 497635505,
    "node_id": "MDU6SXNzdWU0OTc2MzU1MDU=",
    "number": 16873,
    "title": "[eslint-plugin-react-hooks] allow configuring custom hooks as \"static\"",
    "user": {
      "login": "grncdr",
      "id": 82634,
      "node_id": "MDQ6VXNlcjgyNjM0",
      "avatar_url": "https://avatars3.githubusercontent.com/u/82634?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grncdr",
      "html_url": "https://github.com/grncdr",
      "followers_url": "https://api.github.com/users/grncdr/followers",
      "following_url": "https://api.github.com/users/grncdr/following{/other_user}",
      "gists_url": "https://api.github.com/users/grncdr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grncdr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grncdr/subscriptions",
      "organizations_url": "https://api.github.com/users/grncdr/orgs",
      "repos_url": "https://api.github.com/users/grncdr/repos",
      "events_url": "https://api.github.com/users/grncdr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grncdr/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 30,
    "created_at": "2019-09-24T11:45:13Z",
    "updated_at": "2020-08-31T17:58:32Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature/enhancement\r\n\r\n**What is the current behavior?**\r\n\r\nCurrently the eslint plugin is unable to understand when the **return value** of a custom hook is static.\r\n\r\nExample:\r\n\r\n```jsx\r\nimport React from 'react'\r\n\r\nfunction useToggle(init = false) {\r\n  const [state, setState] = React.useState(init)\r\n  const toggleState = React.useCallback(() => { setState(v => !v) }, [])\r\n  return [state, toggleState]\r\n}\r\n\r\nfunction MyComponent({someProp}) {\r\n  const [enabled, toggleEnabled] = useToggle()\r\n\r\n  const handler = React.useCallback(() => {\r\n    toggleEnabled()\r\n    doSomethingWithTheProp(someProp)\r\n  }, [someProp]) // exhaustive-deps warning for toggleEnabled\r\n\r\n  return <button onClick={handler}>Do something</button>\r\n}\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nI would like to configure `eslint-plugin-react-hooks` to tell it that `toggleEnabled` is static and doesn't need to be included in a dependency array. This isn't a huge deal but more of an ergonomic papercut that discourages writing/using custom hooks.\r\n\r\nAs for how/where to configure it, I would be happy to add something like this to my .eslintrc:\r\n\r\n```js\r\n{\r\n  \"staticHooks\": {\r\n    \"useToggle\": [false, true],  // first return value is not stable, second is\r\n    \"useForm\": true,             // entire return value is stable \r\n  }\r\n}\r\n```\r\n\r\nThen the plugin could have an additional check [after these 2 checks](https://github.com/facebook/react/blob/8b580a89d6dbbde8a3ed69475899addef1751116/packages/eslint-plugin-react-hooks/src/ExhaustiveDeps.js#L228-L231) that tests for custom names.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nAll versions of eslint-plugin-react-hooks have the same deficiency.\r\n\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/16848",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/16848/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/16848/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/16848/events",
    "html_url": "https://github.com/facebook/react/issues/16848",
    "id": 496648692,
    "node_id": "MDU6SXNzdWU0OTY2NDg2OTI=",
    "number": 16848,
    "title": "React DOM SSR crashes since React-Dom 16.6.2",
    "user": {
      "login": "ernestognw",
      "id": 33379285,
      "node_id": "MDQ6VXNlcjMzMzc5Mjg1",
      "avatar_url": "https://avatars0.githubusercontent.com/u/33379285?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ernestognw",
      "html_url": "https://github.com/ernestognw",
      "followers_url": "https://api.github.com/users/ernestognw/followers",
      "following_url": "https://api.github.com/users/ernestognw/following{/other_user}",
      "gists_url": "https://api.github.com/users/ernestognw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ernestognw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ernestognw/subscriptions",
      "organizations_url": "https://api.github.com/users/ernestognw/orgs",
      "repos_url": "https://api.github.com/users/ernestognw/repos",
      "events_url": "https://api.github.com/users/ernestognw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ernestognw/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 178761159,
        "node_id": "MDU6TGFiZWwxNzg3NjExNTk=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Regression",
        "name": "Type: Regression",
        "color": "e11d21",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2019-09-21T12:03:22Z",
    "updated_at": "2020-01-09T22:05:32Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nI've setup an SSR configuration using ReactDOM.renderToString() method with react-apollo, and it throws an Invariant violation as the following, with no more information about:\r\n\r\n<img width=\"297\" alt=\"Captura de pantalla 2019-09-21 a la(s) 6 29 37\" src=\"https://user-images.githubusercontent.com/33379285/65372722-36136c80-dc39-11e9-8342-90369c2055e5.png\">\r\n\r\nEverything returns to normal when downgrading to react-dom@16.6.1\r\n\r\n*My SSR App component*\r\n\r\n<img width=\"600\" alt=\"Captura de pantalla 2019-09-21 a la(s) 6 33 24\" src=\"https://user-images.githubusercontent.com/33379285/65372762-b9cd5900-dc39-11e9-9045-143146e0baf9.png\">\r\n\r\n*Things I've tried*\r\n\r\n- I have changed the react-dom package to serve the development version (./cjs/react-dom-server.node.development.js), just for debugging, and when importing that version, everything works fine, but when I return to the production version (./cjs/react-dom-server.node.production.min.js) the same error appears.\r\n\r\n- I removed one by one, every component wrapping my `<App/>`, and the one that seems to be causing the error is the `<AuthProvider>`, which is a context implementation of mine. By removing some things on that component, i figured out that is a problem within a HOC provided by react-apollo, but I don't know exactly what it is because it doesn't show me any information.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nI actually do not have any way to reproduce it quickly.\r\n\r\n**What is the expected behavior?**\r\nRender correctly the website.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact - 16.9.0\r\nReact-DOM - 16.9.0\r\nBrowsers - Safari and Chrome (tested)\r\n\r\nWorking if downgrading to React-DOM 16.6.1\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/16632",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/16632/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/16632/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/16632/events",
    "html_url": "https://github.com/facebook/react/pull/16632",
    "id": 488034367,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzEzMTQwNjgw",
    "number": 16632,
    "title": "Add failing test to demonstrate interleaving issue with Suspense",
    "user": {
      "login": "Jessidhia",
      "id": 73085,
      "node_id": "MDQ6VXNlcjczMDg1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/73085?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Jessidhia",
      "html_url": "https://github.com/Jessidhia",
      "followers_url": "https://api.github.com/users/Jessidhia/followers",
      "following_url": "https://api.github.com/users/Jessidhia/following{/other_user}",
      "gists_url": "https://api.github.com/users/Jessidhia/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Jessidhia/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Jessidhia/subscriptions",
      "organizations_url": "https://api.github.com/users/Jessidhia/orgs",
      "repos_url": "https://api.github.com/users/Jessidhia/repos",
      "events_url": "https://api.github.com/users/Jessidhia/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Jessidhia/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      },
      {
        "id": 710722093,
        "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
        "name": "Type: Needs Investigation",
        "color": "fbca04",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2019-09-02T07:10:56Z",
    "updated_at": "2020-04-01T22:27:40Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/16632",
      "html_url": "https://github.com/facebook/react/pull/16632",
      "diff_url": "https://github.com/facebook/react/pull/16632.diff",
      "patch_url": "https://github.com/facebook/react/pull/16632.patch"
    },
    "body": "cc/ @acdlite, as suggested on this twitter thread https://twitter.com/acdlite/status/1167531547508953088\r\n\r\nThere's a race condition that can happen on both Concurrent and Batched Modes Suspense where it's possible for all pending thenables to settle between the `commitRoot` continuation being yielded and it actually getting invoked, as `shouldYieldToHost` might return `true` if it ran out of frame time budget during the last `performUnitOfWork` iteration. This causes all of the `retryTimedOutBoundary` -> `scheduleCallbackForRoot` invocations to find a pre-existing `Immediate` callback already queued, and so no notifications are scheduled at all.\r\n\r\nThis is not really something that can be simulated on the mock scheduler (or I didn't find out how to), so it was brute-forced by inserting an intermediate continuation between `workLoop` and `commitRoot`.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/16606",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/16606/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/16606/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/16606/events",
    "html_url": "https://github.com/facebook/react/issues/16606",
    "id": 486744596,
    "node_id": "MDU6SXNzdWU0ODY3NDQ1OTY=",
    "number": 16606,
    "title": "TypeError: \"'requestAnimationFrame' called on an object that does not implement interface Window.\"",
    "user": {
      "login": "Jack-Works",
      "id": 5390719,
      "node_id": "MDQ6VXNlcjUzOTA3MTk=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/5390719?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Jack-Works",
      "html_url": "https://github.com/Jack-Works",
      "followers_url": "https://api.github.com/users/Jack-Works/followers",
      "following_url": "https://api.github.com/users/Jack-Works/following{/other_user}",
      "gists_url": "https://api.github.com/users/Jack-Works/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Jack-Works/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Jack-Works/subscriptions",
      "organizations_url": "https://api.github.com/users/Jack-Works/orgs",
      "repos_url": "https://api.github.com/users/Jack-Works/repos",
      "events_url": "https://api.github.com/users/Jack-Works/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Jack-Works/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1155972012,
        "node_id": "MDU6TGFiZWwxMTU1OTcyMDEy",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Scheduler",
        "name": "Component: Scheduler",
        "color": "9de8f9",
        "default": false,
        "description": ""
      },
      {
        "id": 40929151,
        "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
        "name": "Type: Bug",
        "color": "b60205",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2019-08-29T05:25:38Z",
    "updated_at": "2019-08-31T01:25:21Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?** **Bug**\r\n\r\n**What is the current behavior?**\r\nTypeError: \"'requestAnimationFrame' called on an object that does not implement interface Window.\"\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://github.com/facebook/react/blob/0f6e3cd61cf4a5a1491bb3c92780936aebc2a146/packages/scheduler/src/forks/SchedulerHostConfig.default.js#L88\r\n\r\nIn the WebExtension content script, globalThis !== window.\r\nSo when `const requestAnimationFrame = window.requestAnimationFrame`, the `this` binding of `rAF` is lost.\r\n\r\nIn the after calling, `rAF` rebinds to the globalThis, but globalThis doesn't implements Window interface.\r\n\r\nPoC: Install this extension in the Firefox and you will see the error reported.\r\n```index.js\r\ntry {\r\n    const raf = window.requestAnimationFrame\r\n    raf(() => console.log('Okay.'))\r\n} catch (e) {\r\n    console.warn(e)\r\n}\r\n```\r\n\r\n```manifest.json\r\n{\r\n    \"name\": \"rAF in content script test\",\r\n    \"version\": \"0.0.1\",\r\n    \"manifest_version\": 2,\r\n    \"content_scripts\": [{ \"js\": [\"/index.js\"], \"matches\": [\"<all_urls>\"] }]\r\n}\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nFirefox, in WebExtension. \r\n\r\nRelated to https://github.com/facebook/react/issues/16605",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/16599",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/16599/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/16599/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/16599/events",
    "html_url": "https://github.com/facebook/react/issues/16599",
    "id": 486431379,
    "node_id": "MDU6SXNzdWU0ODY0MzEzNzk=",
    "number": 16599,
    "title": "New plugin not working after change any props in debugger tools",
    "user": {
      "login": "sagar-k",
      "id": 7201068,
      "node_id": "MDQ6VXNlcjcyMDEwNjg=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/7201068?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sagar-k",
      "html_url": "https://github.com/sagar-k",
      "followers_url": "https://api.github.com/users/sagar-k/followers",
      "following_url": "https://api.github.com/users/sagar-k/following{/other_user}",
      "gists_url": "https://api.github.com/users/sagar-k/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sagar-k/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sagar-k/subscriptions",
      "organizations_url": "https://api.github.com/users/sagar-k/orgs",
      "repos_url": "https://api.github.com/users/sagar-k/repos",
      "events_url": "https://api.github.com/users/sagar-k/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sagar-k/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710573595,
        "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
        "name": "Component: Developer Tools",
        "color": "fbca04",
        "default": false,
        "description": null
      },
      {
        "id": 40929151,
        "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
        "name": "Type: Bug",
        "color": "b60205",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2019-08-28T14:49:53Z",
    "updated_at": "2019-09-12T15:48:47Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nHaving an issue\r\n\r\n**What is the current behavior?**\r\nnot able to see any rendering after changing any props in debugging tool. and also getting below issue \r\n![image](https://user-images.githubusercontent.com/7201068/63866449-d7a7f500-c9d0-11e9-80dd-a19d0456711c.png)\r\n\r\nUncaught TypeError: Cannot read property '_reactInternalInstance' of undefined\r\n    at Object.get (react-dom.min.js:formatted:4200)\r\n    at a (react-dom.min.js:formatted:4937)\r\n    at Object.enqueueForceUpdate (react-dom.min.js:formatted:4965)\r\n    at s (backend.js:9)\r\n    at Object.setInProps (backend.js:9)\r\n    at t.<anonymous> (backend.js:1)\r\n    at t.l.emit (backend.js:1)\r\n    at backend.js:9\r\n    at t (backend.js:1)\r\n\r\n\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nReproduce bug.\r\ntry to change any dynamic pros in the debugger tools section and you will not able to see any DOM changes\r\n\r\n**What is the expected behavior?**\r\n\r\nWhenever change any props in debugger tools. react component should be rendered as per it.\r\nIt was working fine with previous react developer tools chrome plugin \r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nI am using the below version.\r\n\"react\": \"15.6.2\",\r\n   \"react-dom\": \"15.6.2\",\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/16589",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/16589/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/16589/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/16589/events",
    "html_url": "https://github.com/facebook/react/issues/16589",
    "id": 486023593,
    "node_id": "MDU6SXNzdWU0ODYwMjM1OTM=",
    "number": 16589,
    "title": "Confusing error when passing non-function to useMemo",
    "user": {
      "login": "aweary",
      "id": 6886061,
      "node_id": "MDQ6VXNlcjY4ODYwNjE=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/6886061?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aweary",
      "html_url": "https://github.com/aweary",
      "followers_url": "https://api.github.com/users/aweary/followers",
      "following_url": "https://api.github.com/users/aweary/following{/other_user}",
      "gists_url": "https://api.github.com/users/aweary/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aweary/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aweary/subscriptions",
      "organizations_url": "https://api.github.com/users/aweary/orgs",
      "repos_url": "https://api.github.com/users/aweary/repos",
      "events_url": "https://api.github.com/users/aweary/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aweary/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1109410193,
        "node_id": "MDU6TGFiZWwxMTA5NDEwMTkz",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Hooks",
        "name": "Component: Hooks",
        "color": "c2f27b",
        "default": false,
        "description": ""
      },
      {
        "id": 1776420141,
        "node_id": "MDU6TGFiZWwxNzc2NDIwMTQx",
        "url": "https://api.github.com/repos/facebook/react/labels/Partner",
        "name": "Partner",
        "color": "e4bef7",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2019-08-27T20:41:37Z",
    "updated_at": "2020-07-23T18:27:23Z",
    "closed_at": null,
    "author_association": "COLLABORATOR",
    "active_lock_reason": null,
    "body": "\r\n\r\n[Example](https://codesandbox.io/s/boring-albattani-grhhp).\r\n\r\nWhen passing something like an object to `useMemo` the error isn't very helpful.\r\n\r\n```\r\nTypeError: nextCreate is not a function\r\n    at mountMemo (https://grhhp.csb.app/node_modules/react-dom/cjs/react-dom.development.js:13459:19)\r\n    ...\r\n```\r\n\r\nMost developers wont know what `nextCreate` is, and passing an object to `useMemo` doesn't seem _obviously_ wrong at first. We could add a `typeof` check that throws a better error, but maybe that's too much overhead? At the very least we could add a DEV warning with more helpful guidance.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/16566",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/16566/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/16566/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/16566/events",
    "html_url": "https://github.com/facebook/react/issues/16566",
    "id": 484952225,
    "node_id": "MDU6SXNzdWU0ODQ5NTIyMjU=",
    "number": 16566,
    "title": "onMouseEnter event missing when component hides on top of another (i.e. contextual menu)",
    "user": {
      "login": "ivalduan",
      "id": 2285554,
      "node_id": "MDQ6VXNlcjIyODU1NTQ=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2285554?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ivalduan",
      "html_url": "https://github.com/ivalduan",
      "followers_url": "https://api.github.com/users/ivalduan/followers",
      "following_url": "https://api.github.com/users/ivalduan/following{/other_user}",
      "gists_url": "https://api.github.com/users/ivalduan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ivalduan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ivalduan/subscriptions",
      "organizations_url": "https://api.github.com/users/ivalduan/orgs",
      "repos_url": "https://api.github.com/users/ivalduan/repos",
      "events_url": "https://api.github.com/users/ivalduan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ivalduan/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 127893911,
        "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
        "name": "Component: DOM",
        "color": "fef2c0",
        "default": false,
        "description": null
      },
      {
        "id": 710722093,
        "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
        "name": "Type: Needs Investigation",
        "color": "fbca04",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2019-08-25T16:56:06Z",
    "updated_at": "2020-04-01T22:31:07Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "I provide a codepen example showcasing the issue here,\r\nhttps://codepen.io/ivalduan/pen/VwZpmMQ\r\n\r\n1. The component on the screen tracks correctly a hover state of the mouse pointer\r\n2. With the right button you create a contextual menu without covering the text and the hover state is correct when the mouse is over the menu\r\n3. When you select and option of the contextual menu on top of the background component the second does not receive an onMouseEnter event and the hover state remains false when it should be true",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/16555",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/16555/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/16555/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/16555/events",
    "html_url": "https://github.com/facebook/react/pull/16555",
    "id": 484546823,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzEwNDAwMzUz",
    "number": 16555,
    "title": "Add trusted types to react on server side",
    "user": {
      "login": "Siegrift",
      "id": 22679154,
      "node_id": "MDQ6VXNlcjIyNjc5MTU0",
      "avatar_url": "https://avatars0.githubusercontent.com/u/22679154?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Siegrift",
      "html_url": "https://github.com/Siegrift",
      "followers_url": "https://api.github.com/users/Siegrift/followers",
      "following_url": "https://api.github.com/users/Siegrift/following{/other_user}",
      "gists_url": "https://api.github.com/users/Siegrift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Siegrift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Siegrift/subscriptions",
      "organizations_url": "https://api.github.com/users/Siegrift/orgs",
      "repos_url": "https://api.github.com/users/Siegrift/repos",
      "events_url": "https://api.github.com/users/Siegrift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Siegrift/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      },
      {
        "id": 1775955521,
        "node_id": "MDU6TGFiZWwxNzc1OTU1NTIx",
        "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Backlog",
        "name": "Resolution: Backlog",
        "color": "9dd1e8",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2019-08-23T14:01:19Z",
    "updated_at": "2020-01-09T23:12:50Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/16555",
      "html_url": "https://github.com/facebook/react/pull/16555",
      "diff_url": "https://github.com/facebook/react/pull/16555.diff",
      "patch_url": "https://github.com/facebook/react/pull/16555.patch"
    },
    "body": "## Trusted Types\r\n[Trusted Types](https://github.com/WICG/trusted-types) ([spec](https://wicg.github.io/trusted-types/dist/spec/), [introductory article](https://developers.google.com/web/updates/2019/02/trusted-types)) is a new experimental DOM API implemented within the WICG , with a working [Chrome implementation](https://www.chromestatus.com/feature/5650088592408576).\r\n\r\nThe API creates a few new objects available on the global object in the browser, like most other web APIs ([impl in TS](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/trusted-types/index.d.ts) and in [Closure compiler](https://github.com/WICG/trusted-types/blob/master/externs/externs.js)).\r\n\r\nUnder certain conditions, controlled by a HTTP header (analogous to Content-Security-Policy behavior), the API can enable the enforcement - then it changes the signature of several DOM API functions and property setters, such that they accept specific object types, and reject strings. Colloquially, DOM API becomes strongly typed.\r\n\r\nFor example, with Trusted Types Element.innerHTML property setter accepts a TrustedHTML object.\r\n\r\nTrusted Type objects stringify to their inner value. This API shape is a deliberate choice that enables existing web applications and libraries to gradually migrate from strings to Trusted Types without breaking functionality. In our example, it makes it possible to write the following:\r\n\r\n```javascript\r\nconst policy = TrustedTypes.createPolicy('foo', { \r\n  createHTML: (s) => { /* some validation*/; return s} \r\n});\r\n\r\nconst trustedHTML = policy.createHTML('bar');\r\nanElement.innerHTML = trustedHTML\r\n\r\nanElement.innerHTML === 'bar'\r\n```\r\n\r\nThe above code works regardless if the Trusted Types enforcement is enabled or not.\r\n\r\nReading from the DOM is unaffected, so Element.innerHTML getter returns a string. That's for practical reasons -- web applications read from DOM more often than they write to it, and only writing exposes the application to DOM XSS risks. Typing only the setters allows us to secure web applications with minimal code changes.\r\n\r\n## Adding Trusted Types to React for server side\r\nUnfortunately, there are no Trusted Types (TT) on server side. However, it’s really easy to introduce a reflected xss attack via server side rendering. Markup rendered on server side is rendered to string (without any DOM emulation) and returned as a response from the server and there is no way TT can prevent this attack. This creates inconsistency when rendering on client and server side (client side would fail with TT violation), which shouldn’t happen. Also, if application uses hot reloading, you will get a TT error after each reload (because React templates are re-rendered to DOM, this time on client).\r\n\r\nThis PR enables applications to use Trusted Types on server side. Functions inside [ReactDOMNodeStreamRenderer.js](https://github.com/facebook/react/blob/fc807720780962729df2ad1b0f53258603c020c7/packages/react-dom/src/server/ReactDOMStringRenderer.js) and [ReactDOMStringRenderer.js](https://github.com/facebook/react/blob/fc807720780962729df2ad1b0f53258603c020c7/packages/react-dom/src/server/ReactDOMNodeStreamRenderer.js) in react-dom/server package now accept optional third parameter with [trusted types polyfill implementation](https://github.com/WICG/trusted-types). If TT are provided, they are enforced, **otherwise no behavioral change is made**. If TT are enforced, we check whether the values are trusted before creating the markup from them and throw an error otherwise.   \r\n\r\n## Reference\r\n* [Add trusted types to react on client side](https://github.com/facebook/react/pull/16157)\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/16550",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/16550/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/16550/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/16550/events",
    "html_url": "https://github.com/facebook/react/issues/16550",
    "id": 484304478,
    "node_id": "MDU6SXNzdWU0ODQzMDQ0Nzg=",
    "number": 16550,
    "title": "Devtools scrollbar hides flamegraph",
    "user": {
      "login": "Curzy",
      "id": 3931792,
      "node_id": "MDQ6VXNlcjM5MzE3OTI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/3931792?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Curzy",
      "html_url": "https://github.com/Curzy",
      "followers_url": "https://api.github.com/users/Curzy/followers",
      "following_url": "https://api.github.com/users/Curzy/following{/other_user}",
      "gists_url": "https://api.github.com/users/Curzy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Curzy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Curzy/subscriptions",
      "organizations_url": "https://api.github.com/users/Curzy/orgs",
      "repos_url": "https://api.github.com/users/Curzy/repos",
      "events_url": "https://api.github.com/users/Curzy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Curzy/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710573595,
        "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
        "name": "Component: Developer Tools",
        "color": "fbca04",
        "default": false,
        "description": null
      },
      {
        "id": 40929151,
        "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
        "name": "Type: Bug",
        "color": "b60205",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2019-08-23T02:55:42Z",
    "updated_at": "2019-11-27T15:29:14Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n**What is the current behavior?**\r\nscrollbar is covering flamegraph\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\ncurrent\r\n![current](https://user-images.githubusercontent.com/3931792/63563638-b09a8f00-c59c-11e9-95fc-627dcea023b6.png)\r\n\r\nwithout scrollbar, there is more graphs hidden by scrollbar\r\n![without scrollbar](https://user-images.githubusercontent.com/3931792/63563645-b8f2ca00-c59c-11e9-917e-8c63be90cb2d.png)\r\n\r\n**What is the expected behavior?**\r\nscrollbar does not cover flame graph or if flamegraph's height is long enough to use scrollbar, flamegraph container's width should shrink about scrollbars width \r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n16.9 / chrome 78.0.3887.7 / macOS 10.14.6 /  \r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/16547",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/16547/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/16547/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/16547/events",
    "html_url": "https://github.com/facebook/react/issues/16547",
    "id": 484101954,
    "node_id": "MDU6SXNzdWU0ODQxMDE5NTQ=",
    "number": 16547,
    "title": "Devtools v4 does not work with Firefox's private window",
    "user": {
      "login": "tetsuharuohzeki",
      "id": 180104,
      "node_id": "MDQ6VXNlcjE4MDEwNA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/180104?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tetsuharuohzeki",
      "html_url": "https://github.com/tetsuharuohzeki",
      "followers_url": "https://api.github.com/users/tetsuharuohzeki/followers",
      "following_url": "https://api.github.com/users/tetsuharuohzeki/following{/other_user}",
      "gists_url": "https://api.github.com/users/tetsuharuohzeki/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tetsuharuohzeki/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tetsuharuohzeki/subscriptions",
      "organizations_url": "https://api.github.com/users/tetsuharuohzeki/orgs",
      "repos_url": "https://api.github.com/users/tetsuharuohzeki/repos",
      "events_url": "https://api.github.com/users/tetsuharuohzeki/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tetsuharuohzeki/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710573595,
        "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
        "name": "Component: Developer Tools",
        "color": "fbca04",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 13,
    "created_at": "2019-08-22T16:42:22Z",
    "updated_at": "2020-10-12T20:22:08Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\n* bug\r\n* This issue has been reported in https://github.com/facebook/react-devtools/issues/1383\r\n\r\n**What is the current behavior?**\r\n\r\n\r\nSteps to Reproduce is here:\r\n\r\n1. Environments are:\r\n2. Open the page which uses react with a private window.\r\n3. Open Firefox's devtools.\r\n\r\nActual Result is:\r\n\r\n* react devtools' _component_ pane show `Unable to find React on the page.`\r\n* From about:debugging, we can see the below messsage:\r\n\r\n```\r\nSecurityError: Permission denied to access property \"container\" on cross-origin object main.js:51:305877\r\n    Kl moz-extension://56db142d-3d36-b04e-91ca-a7504c7708a5/build/main.js:51\r\n    apply self-hosted:4417\r\n    applySafeWithoutClone resource://gre/modules/ExtensionCommon.jsm:588\r\n    asyncWithoutClone resource://gre/modules/ExtensionCommon.jsm:2400\r\n```\r\n\r\n\r\n\r\n**What is the expected behavior?**\r\n\r\nreact devtools work\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n* Firefox 68\r\n* react devtools v4.0.5\r\n* react v16.9",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/16505",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/16505/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/16505/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/16505/events",
    "html_url": "https://github.com/facebook/react/issues/16505",
    "id": 482702938,
    "node_id": "MDU6SXNzdWU0ODI3MDI5Mzg=",
    "number": 16505,
    "title": "Chrome's Custom Formatters",
    "user": {
      "login": "roman01la",
      "id": 1355501,
      "node_id": "MDQ6VXNlcjEzNTU1MDE=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1355501?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/roman01la",
      "html_url": "https://github.com/roman01la",
      "followers_url": "https://api.github.com/users/roman01la/followers",
      "following_url": "https://api.github.com/users/roman01la/following{/other_user}",
      "gists_url": "https://api.github.com/users/roman01la/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/roman01la/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/roman01la/subscriptions",
      "organizations_url": "https://api.github.com/users/roman01la/orgs",
      "repos_url": "https://api.github.com/users/roman01la/repos",
      "events_url": "https://api.github.com/users/roman01la/events{/privacy}",
      "received_events_url": "https://api.github.com/users/roman01la/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710573595,
        "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
        "name": "Component: Developer Tools",
        "color": "fbca04",
        "default": false,
        "description": null
      },
      {
        "id": 710375792,
        "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2019-08-20T07:56:30Z",
    "updated_at": "2020-01-19T17:36:04Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\nFeature\r\n\r\n_Transferring feature request from the old repo https://github.com/facebook/react-devtools/issues/989_\r\n\r\nHi! Is there any plans on supporting [Chrome's custom formatters](https://docs.google.com/document/d/1FTascZXT9cxfetuPRT2eXPQKXui4nWFivUnS_335T3U/preview) to display custom data structures in readable format in React dev tools?\r\n\r\nFor example when debugging ClojureScript's immutable data structures we have a custom formatter that outputs data into the console in readable and inspectable format.\r\n\r\nHere how it looks like\r\n![screen shot 2018-02-19 at 3 02 32 pm](https://user-images.githubusercontent.com/1355501/36379156-39e8a882-1586-11e8-8973-7e6d3772cb4e.png)\r\n\r\nAnd here's how data looks like in React Dev Tools inspector (basically underlying implementation of a data structure as seen in plain JS)\r\n![screen shot 2018-02-19 at 2 59 04 pm](https://user-images.githubusercontent.com/1355501/36379177-4b280d90-1586-11e8-808d-ea7f2cebb274.png)\r\n\r\nI think this can be done for React Dev Tools since once Custom Formatters are defined they are applied everywhere in Chrome's Dev Tools where it's possible to inspect data.\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/16501",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/16501/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/16501/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/16501/events",
    "html_url": "https://github.com/facebook/react/issues/16501",
    "id": 482614630,
    "node_id": "MDU6SXNzdWU0ODI2MTQ2MzA=",
    "number": 16501,
    "title": "Getting maximum call stack exceeded on backend.js when rendering many elements.",
    "user": {
      "login": "ryan-rushton",
      "id": 7344652,
      "node_id": "MDQ6VXNlcjczNDQ2NTI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/7344652?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryan-rushton",
      "html_url": "https://github.com/ryan-rushton",
      "followers_url": "https://api.github.com/users/ryan-rushton/followers",
      "following_url": "https://api.github.com/users/ryan-rushton/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryan-rushton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryan-rushton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryan-rushton/subscriptions",
      "organizations_url": "https://api.github.com/users/ryan-rushton/orgs",
      "repos_url": "https://api.github.com/users/ryan-rushton/repos",
      "events_url": "https://api.github.com/users/ryan-rushton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryan-rushton/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710573595,
        "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
        "name": "Component: Developer Tools",
        "color": "fbca04",
        "default": false,
        "description": null
      },
      {
        "id": 40929151,
        "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
        "name": "Type: Bug",
        "color": "b60205",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "bvaughn",
      "id": 29597,
      "node_id": "MDQ6VXNlcjI5NTk3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bvaughn",
      "html_url": "https://github.com/bvaughn",
      "followers_url": "https://api.github.com/users/bvaughn/followers",
      "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
      "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
      "organizations_url": "https://api.github.com/users/bvaughn/orgs",
      "repos_url": "https://api.github.com/users/bvaughn/repos",
      "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bvaughn/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "bvaughn",
        "id": 29597,
        "node_id": "MDQ6VXNlcjI5NTk3",
        "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bvaughn",
        "html_url": "https://github.com/bvaughn",
        "followers_url": "https://api.github.com/users/bvaughn/followers",
        "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
        "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
        "organizations_url": "https://api.github.com/users/bvaughn/orgs",
        "repos_url": "https://api.github.com/users/bvaughn/repos",
        "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bvaughn/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": null,
    "comments": 8,
    "created_at": "2019-08-20T02:40:23Z",
    "updated_at": "2020-05-17T21:10:44Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "## Details\r\nUsing version 4.0.2 (8/15/2019) I am getting a maximum call stack size exceeded when my app starts up. While my app using this is a little different I have replicated the issue using a fresh create-react-app. I will include the App.js code below.\r\n\r\n## Steps to reproduce\r\n1. Create a new app using version 3.0.1 of create-react-app\r\n2. Replace the code in App.js with the code listed below\r\n3. Inspect the console, there should be a stack trace from a maximum call stack exceeded error\r\n\r\n## App.js\r\n```\r\nimport React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nconst createDivs = num => {\r\n    const rtn = [];\r\n    for(let i = 0; i < num; i++) {\r\n        const key = `div-${i}`;\r\n        rtn.push(<div className={key} key={key} />)\r\n    }\r\n    return rtn;\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n      </header>\r\n      <div>\r\n        {createDivs(15000)}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n```\r\n\r\n## Call Stack\r\n<details>\r\n\r\n<summary>backend.js:formatted:2097 Uncaught RangeError: Maximum call stack size exceeded\r\n</summary>\r\n\r\n```\r\n    at ge (backend.js:formatted:2097)\r\n    at Ge (backend.js:formatted:2435)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\n    at Ge (backend.js:formatted:2478)\r\nge @ backend.js:formatted:2097\r\nGe @ backend.js:formatted:2435\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\nGe @ backend.js:formatted:2478\r\npostMessage (async)\r\nr @ contentScript.js:1\r\n88 @ contentScript.js:1\r\nn @ contentScript.js:1\r\n(anonymous) @ contentScript.js:1\r\n(anonymous) @ contentScript.js:1\r\nShow 170 more frames\r\n```\r\n\r\n</details>\r\n\r\nThis was not an issue in the previous version of react-devtools.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/16496",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/16496/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/16496/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/16496/events",
    "html_url": "https://github.com/facebook/react/issues/16496",
    "id": 482557603,
    "node_id": "MDU6SXNzdWU0ODI1NTc2MDM=",
    "number": 16496,
    "title": "DevTools: Write tests for preserving selection",
    "user": {
      "login": "bvaughn",
      "id": 29597,
      "node_id": "MDQ6VXNlcjI5NTk3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bvaughn",
      "html_url": "https://github.com/bvaughn",
      "followers_url": "https://api.github.com/users/bvaughn/followers",
      "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
      "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
      "organizations_url": "https://api.github.com/users/bvaughn/orgs",
      "repos_url": "https://api.github.com/users/bvaughn/repos",
      "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bvaughn/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710573595,
        "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
        "name": "Component: Developer Tools",
        "color": "fbca04",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-08-19T22:27:51Z",
    "updated_at": "2020-01-08T19:10:09Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "See https://github.com/bvaughn/react-devtools-experimental/pull/215. It would be nice to have test coverage for it.\r\n\r\n---\r\nI got stuck here:\r\n\r\n```js\r\n    const Component = () => <div>Hi</div>;\r\n\r\n    act(() =>\r\n      ReactDOM.render(<Component />, document.createElement('div'))\r\n    );\r\n    const id = store.getElementIDAtIndex(0);\r\n    const rendererID = store.getRendererIDForElement(id);\r\n\r\n    act(() => {\r\n      global.bridge.send('selectElement', { id, rendererID });\r\n    })\r\n```\r\n\r\nThis test fails on master because bridge object is shared between agent and store. Separating it and emulating having two bridges didn't work because of some regression in the Suspense test. I haven't dug into why because the stack trace display is obscured and points to the wrong line in the test. The stack trace display points to the wrong line likely because of regenerator code. The regenerator code is likely coming from `babel-preset-env` thinking we need to polyfill async/await. I don't know why `babel-preset-env` doesn't realize my Node already has async/await. At that point I punted on this.\r\n\r\n---\r\nOriginally reported by @gaearon via https://github.com/bvaughn/react-devtools-experimental/issues/219",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/16495",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/16495/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/16495/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/16495/events",
    "html_url": "https://github.com/facebook/react/issues/16495",
    "id": 482557409,
    "node_id": "MDU6SXNzdWU0ODI1NTc0MDk=",
    "number": 16495,
    "title": "DevTools: Components tree is sometimes unexpectedly empty after navigation",
    "user": {
      "login": "bvaughn",
      "id": 29597,
      "node_id": "MDQ6VXNlcjI5NTk3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bvaughn",
      "html_url": "https://github.com/bvaughn",
      "followers_url": "https://api.github.com/users/bvaughn/followers",
      "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
      "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
      "organizations_url": "https://api.github.com/users/bvaughn/orgs",
      "repos_url": "https://api.github.com/users/bvaughn/repos",
      "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bvaughn/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710573595,
        "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
        "name": "Component: Developer Tools",
        "color": "fbca04",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      },
      {
        "id": 40929151,
        "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
        "name": "Type: Bug",
        "color": "b60205",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2019-08-19T22:27:13Z",
    "updated_at": "2020-01-08T19:10:09Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "1. Open FB page\r\n2. Open Components tab\r\n3. Change address bar to `https://reactjs.org` and press Enter\r\n\r\nExpected: Components tab gets populated.\r\nActual:\r\n\r\n<img width=\"783\" alt=\"Screen Shot 2019-04-23 at 7 27 37 PM\" src=\"https://user-images.githubusercontent.com/810438/56606380-00247a80-65fe-11e9-988c-2ad3e69eb579.png\">\r\n\r\n~~If I **inspect background page**, I see this:~~ (fixed by #229)\r\n\r\n<img width=\"652\" alt=\"Screen Shot 2019-04-23 at 7 27 12 PM\" src=\"https://user-images.githubusercontent.com/810438/56606408-0b77a600-65fe-11e9-9f65-5502401b7e4a.png\">\r\n\r\n---\r\nOriginally reported by @gaearon via https://github.com/bvaughn/react-devtools-experimental/issues/217",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/16494",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/16494/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/16494/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/16494/events",
    "html_url": "https://github.com/facebook/react/issues/16494",
    "id": 482557333,
    "node_id": "MDU6SXNzdWU0ODI1NTczMzM=",
    "number": 16494,
    "title": "DevTools: Audit places where we change tags or disconnect alternates in React",
    "user": {
      "login": "bvaughn",
      "id": 29597,
      "node_id": "MDQ6VXNlcjI5NTk3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bvaughn",
      "html_url": "https://github.com/bvaughn",
      "followers_url": "https://api.github.com/users/bvaughn/followers",
      "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
      "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
      "organizations_url": "https://api.github.com/users/bvaughn/orgs",
      "repos_url": "https://api.github.com/users/bvaughn/repos",
      "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bvaughn/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710573595,
        "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
        "name": "Component: Developer Tools",
        "color": "fbca04",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-08-19T22:26:58Z",
    "updated_at": "2020-01-08T19:10:09Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "Cases like https://github.com/bvaughn/react-devtools-experimental/issues/197 (where a dehydrated Suspense node turns into a regular one) produce confusing failures because we expect Fiber alternates to be \"for life\", whereas in practice they can actually get disconnected by React in some cases. (Search for \"Disconnect\" in ReactFiberBeginWork.)\r\n\r\nAdditionally, I think changing `tag` can also produce confusing failures if it changes from a value that was filtered out, to a value that is not filtered out.\r\n\r\nWe need to be more proactive about handling these cases when we make such changes to React, and we need to look at existing cases where this happens and whether we can handle them.\r\n\r\n---\r\nOriginally reported by @gaearon via https://github.com/bvaughn/react-devtools-experimental/issues/198",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/16493",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/16493/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/16493/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/16493/events",
    "html_url": "https://github.com/facebook/react/issues/16493",
    "id": 482557184,
    "node_id": "MDU6SXNzdWU0ODI1NTcxODQ=",
    "number": 16493,
    "title": "DevTools: Fix or silence \"cannot find fiber with ID\" warnings when hovering ",
    "user": {
      "login": "bvaughn",
      "id": 29597,
      "node_id": "MDQ6VXNlcjI5NTk3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bvaughn",
      "html_url": "https://github.com/bvaughn",
      "followers_url": "https://api.github.com/users/bvaughn/followers",
      "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
      "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
      "organizations_url": "https://api.github.com/users/bvaughn/orgs",
      "repos_url": "https://api.github.com/users/bvaughn/repos",
      "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bvaughn/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710573595,
        "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
        "name": "Component: Developer Tools",
        "color": "fbca04",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      },
      {
        "id": 40929153,
        "node_id": "MDU6TGFiZWw0MDkyOTE1Mw==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
        "name": "Type: Enhancement",
        "color": "84b6eb",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2019-08-19T22:26:25Z",
    "updated_at": "2020-08-25T09:49:53Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "Sometimes I see \"cannot find fiber with ID\" when hovering over the tree. They are sporadic. I'll need to dig into why they happen. But we also need to look at our usage of warnings to make sure they're either actionable or gated by DEV/DEBUG.\r\n\r\n---\r\nOriginally reported by @gaearon via https://github.com/bvaughn/react-devtools-experimental/issues/166",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/16490",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/16490/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/16490/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/16490/events",
    "html_url": "https://github.com/facebook/react/issues/16490",
    "id": 482556957,
    "node_id": "MDU6SXNzdWU0ODI1NTY5NTc=",
    "number": 16490,
    "title": "DevTools: Check if accessibility regressions exist compared to old DevTools",
    "user": {
      "login": "bvaughn",
      "id": 29597,
      "node_id": "MDQ6VXNlcjI5NTk3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bvaughn",
      "html_url": "https://github.com/bvaughn",
      "followers_url": "https://api.github.com/users/bvaughn/followers",
      "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
      "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
      "organizations_url": "https://api.github.com/users/bvaughn/orgs",
      "repos_url": "https://api.github.com/users/bvaughn/repos",
      "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bvaughn/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710573595,
        "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
        "name": "Component: Developer Tools",
        "color": "fbca04",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-08-19T22:25:36Z",
    "updated_at": "2020-01-08T19:11:00Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "Before this becomes stable, we need to check if we are regressing accessibility on any important existing interactions.\r\n\r\nAt least, we should probably make the tree view focusable.\r\n\r\n---\r\nOriginally reported by @gaearon via https://github.com/bvaughn/react-devtools-experimental/issues/52",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/16489",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/16489/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/16489/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/16489/events",
    "html_url": "https://github.com/facebook/react/issues/16489",
    "id": 482556895,
    "node_id": "MDU6SXNzdWU0ODI1NTY4OTU=",
    "number": 16489,
    "title": "DevTools: Suspense Debugger",
    "user": {
      "login": "bvaughn",
      "id": 29597,
      "node_id": "MDQ6VXNlcjI5NTk3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bvaughn",
      "html_url": "https://github.com/bvaughn",
      "followers_url": "https://api.github.com/users/bvaughn/followers",
      "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
      "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
      "organizations_url": "https://api.github.com/users/bvaughn/orgs",
      "repos_url": "https://api.github.com/users/bvaughn/repos",
      "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bvaughn/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710573595,
        "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
        "name": "Component: Developer Tools",
        "color": "fbca04",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      },
      {
        "id": 40929153,
        "node_id": "MDU6TGFiZWw0MDkyOTE1Mw==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
        "name": "Type: Enhancement",
        "color": "84b6eb",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-08-19T22:25:26Z",
    "updated_at": "2020-01-08T19:11:00Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "### MVP\r\n- [x] Initial prototype with a tree and toggling.\r\n- [x] Tree should reflect real suspense state.\r\n- [ ] Make it less fragile.\r\n  - [x] Does findDOMNode issue affect this?\r\n- [ ] Ensure expensive tree construction doesn't run unless you're on the tab.\r\n- [ ] Improve navigation so the user doesn't get lost.\r\n  - [ ] Maybe flash nodes.\r\n  - [ ] Maybe offer a \"finder\" tool.\r\n- [ ] Sync selection with the Components tab.\r\n- [ ] Make it look nice. @bvaughn \r\n\r\n### Future\r\n- [ ] Consider a fuzzer.\r\n- [ ] Considering filtering by viewport.\r\n- [ ] Optimize the tree updates.\r\n  - [ ] Consider listening to operations. Don't forget to handle ancestor reorder.\r\n\r\n---\r\nOriginally reported by @gaearon via https://github.com/bvaughn/react-devtools-experimental/issues/43",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/16488",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/16488/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/16488/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/16488/events",
    "html_url": "https://github.com/facebook/react/issues/16488",
    "id": 482556701,
    "node_id": "MDU6SXNzdWU0ODI1NTY3MDE=",
    "number": 16488,
    "title": "DevTools: Re-enable postMessage transferable for faster ArrayBuffer transfers",
    "user": {
      "login": "bvaughn",
      "id": 29597,
      "node_id": "MDQ6VXNlcjI5NTk3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bvaughn",
      "html_url": "https://github.com/bvaughn",
      "followers_url": "https://api.github.com/users/bvaughn/followers",
      "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
      "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
      "organizations_url": "https://api.github.com/users/bvaughn/orgs",
      "repos_url": "https://api.github.com/users/bvaughn/repos",
      "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bvaughn/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710573595,
        "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
        "name": "Component: Developer Tools",
        "color": "fbca04",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      },
      {
        "id": 40929151,
        "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
        "name": "Type: Bug",
        "color": "b60205",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2019-08-19T22:24:43Z",
    "updated_at": "2020-01-08T19:11:00Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "I got this on FB.com sandbox:\r\n\r\n<img width=\"815\" alt=\"screen shot 2019-03-01 at 1 15 24 pm\" src=\"https://user-images.githubusercontent.com/810438/53640457-26dcbb00-3c24-11e9-828f-a987ffeec4da.png\">\r\n\r\n\r\n---\r\nOriginally reported by @gaearon via https://github.com/bvaughn/react-devtools-experimental/issues/25",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/16487",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/16487/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/16487/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/16487/events",
    "html_url": "https://github.com/facebook/react/issues/16487",
    "id": 482556578,
    "node_id": "MDU6SXNzdWU0ODI1NTY1Nzg=",
    "number": 16487,
    "title": "DevTools: Crashes and warnings when quickly collapsing",
    "user": {
      "login": "bvaughn",
      "id": 29597,
      "node_id": "MDQ6VXNlcjI5NTk3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bvaughn",
      "html_url": "https://github.com/bvaughn",
      "followers_url": "https://api.github.com/users/bvaughn/followers",
      "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
      "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
      "organizations_url": "https://api.github.com/users/bvaughn/orgs",
      "repos_url": "https://api.github.com/users/bvaughn/repos",
      "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bvaughn/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710573595,
        "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
        "name": "Component: Developer Tools",
        "color": "fbca04",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      },
      {
        "id": 40929151,
        "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
        "name": "Type: Bug",
        "color": "b60205",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-08-19T22:24:17Z",
    "updated_at": "2020-01-08T19:10:59Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "This is weird. Happens if I select a node deeply and then long-press \"left\" arrow.\r\n\r\n```\r\nInvalid index 154 specified; store contains 154 items.\r\n\r\nUncaught Invariant Violation: Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.\r\n    at ReactError (file:///Users/gaearon/p/react-devtools-experimental/shells/dev/build/devtools.js:8529:40)\r\n```\r\n\r\nIt starts with \"invalid index\" and then gives me different React invariants or warnings depending on how lucky I am.\r\n\r\n![Screen Recording 2019-04-25 at 05 58 PM](https://user-images.githubusercontent.com/810438/56754075-fcbafb80-6783-11e9-8fe6-84aa29d1c120.gif)\r\n\r\n---\r\nMore weird symptoms:\r\n\r\n<img width=\"889\" alt=\"Screen Shot 2019-04-25 at 6 38 22 PM\" src=\"https://user-images.githubusercontent.com/810438/56756281-5671f480-6789-11e9-8d0b-631a5217e63b.png\">\r\n\r\n---\r\n<img width=\"832\" alt=\"Screen Shot 2019-04-25 at 6 41 37 PM\" src=\"https://user-images.githubusercontent.com/810438/56756492-c7191100-6789-11e9-8814-cb849590ee01.png\">\r\n\r\n---\r\nThis \"fixes\" it:\r\n\r\n```diff\r\n       runWithPriority(UserBlockingPriority, () => dispatch(action));\r\n-      next(() => dispatch({ type: 'UPDATE_INSPECTED_ELEMENT_ID' }));\r\n+      runWithPriority(UserBlockingPriority, () => dispatch({ type: 'UPDATE_INSPECTED_ELEMENT_ID' }));\r\n     },\r\n```\r\n\r\nSo I suspect it's a bug with `Scheduler.next()`.\r\n\r\n---\r\nThis also looks funky. Note how somewhere in the middle right pane gets \"stuck\" showing the same cycle of values:\r\n\r\n![Screen Recording 2019-04-25 at 07 36 PM](https://user-images.githubusercontent.com/810438/56759733-8b824500-6791-11e9-95ba-d4d3630a4c5e.gif)\r\n\r\n---\r\nReact bug: https://github.com/facebook/react/issues/15512\r\n\r\n---\r\nOriginally reported by @gaearon via https://github.com/bvaughn/react-devtools-experimental/issues/228",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/16486",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/16486/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/16486/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/16486/events",
    "html_url": "https://github.com/facebook/react/issues/16486",
    "id": 482555597,
    "node_id": "MDU6SXNzdWU0ODI1NTU1OTc=",
    "number": 16486,
    "title": "DevTools: Elements height being clipped by console",
    "user": {
      "login": "bvaughn",
      "id": 29597,
      "node_id": "MDQ6VXNlcjI5NTk3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bvaughn",
      "html_url": "https://github.com/bvaughn",
      "followers_url": "https://api.github.com/users/bvaughn/followers",
      "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
      "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
      "organizations_url": "https://api.github.com/users/bvaughn/orgs",
      "repos_url": "https://api.github.com/users/bvaughn/repos",
      "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bvaughn/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710573595,
        "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
        "name": "Component: Developer Tools",
        "color": "fbca04",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      },
      {
        "id": 40929151,
        "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
        "name": "Type: Bug",
        "color": "b60205",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2019-08-19T22:20:56Z",
    "updated_at": "2020-01-08T19:10:59Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "![clipping-bug](https://user-images.githubusercontent.com/10223856/55770859-3984b400-5a5c-11e9-8ae4-e51ecf1e4f51.gif)\r\n\r\nThis one was kinda tricky to reproduce, but basically the steps are:\r\n\r\n1. Click the inspect element and hover any component\r\n2. Open the console pressing esc\r\n3. Move mouse back to devtools and click again the inspect button (to stop inspection).\r\n4. Close the console with esc.\r\n\r\n(ps: sorry for the gif quality, I don't know how to properly convert the .mov to .gif)\r\n\r\n---\r\nOriginally reported by @lucasecdb via https://github.com/bvaughn/react-devtools-experimental/issues/110",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/16483",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/16483/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/16483/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/16483/events",
    "html_url": "https://github.com/facebook/react/issues/16483",
    "id": 482551102,
    "node_id": "MDU6SXNzdWU0ODI1NTExMDI=",
    "number": 16483,
    "title": "DevTools: Better linking between browser Performance tab and DevTools Profiler",
    "user": {
      "login": "bvaughn",
      "id": 29597,
      "node_id": "MDQ6VXNlcjI5NTk3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bvaughn",
      "html_url": "https://github.com/bvaughn",
      "followers_url": "https://api.github.com/users/bvaughn/followers",
      "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
      "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
      "organizations_url": "https://api.github.com/users/bvaughn/orgs",
      "repos_url": "https://api.github.com/users/bvaughn/repos",
      "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bvaughn/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710573595,
        "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
        "name": "Component: Developer Tools",
        "color": "fbca04",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      },
      {
        "id": 40929153,
        "node_id": "MDU6TGFiZWw0MDkyOTE1Mw==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
        "name": "Type: Enhancement",
        "color": "84b6eb",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-08-19T22:07:31Z",
    "updated_at": "2020-01-08T19:10:58Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "Notes from a chat with Benoit:\r\n\r\nIt would be nice if starting profiling (or reload and profiling) in the browser auto-started profiling in DevTools.\r\n\r\nIt would also be nice if viewing a range of time in the Performance tab narrowed down the commits within the Profiler. At least starting the profilers at the same time would enable a manual match-up.\r\n\r\nTo my knowledge, none of the currently available APIs (including experimental) would enable us to support this level of integration.\r\n\r\n---\r\nIf we were to make use of the DevTools protocol, we could [`Profiler.start`](https://vanilla.aslushnikov.com/?Profiler.start) and [`Profiler.stop`](https://vanilla.aslushnikov.com/?Profiler.stop) the built-in profiler in sync with React's own profiler. Chrome's profiler also dispatches [`Profiler.consoleProfileStarted`](https://vanilla.aslushnikov.com/?Profiler.consoleProfileStarted) and [`Profiler.consoleProfileFinished`](https://vanilla.aslushnikov.com/?Profiler.consoleProfileFinished) events which we _could_ use to follow the browser's profiler if we wanted to.\r\n\r\nThere do not appear to be any APIs/events for syncing the zoomed-in range.\r\n\r\n---\r\nOriginally reported via https://github.com/bvaughn/react-devtools-experimental/issues/37",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/16482",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/16482/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/16482/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/16482/events",
    "html_url": "https://github.com/facebook/react/issues/16482",
    "id": 482550920,
    "node_id": "MDU6SXNzdWU0ODI1NTA5MjA=",
    "number": 16482,
    "title": "DevTools: Should Profiler surface the base duration?",
    "user": {
      "login": "bvaughn",
      "id": 29597,
      "node_id": "MDQ6VXNlcjI5NTk3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bvaughn",
      "html_url": "https://github.com/bvaughn",
      "followers_url": "https://api.github.com/users/bvaughn/followers",
      "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
      "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
      "organizations_url": "https://api.github.com/users/bvaughn/orgs",
      "repos_url": "https://api.github.com/users/bvaughn/repos",
      "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bvaughn/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710573595,
        "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
        "name": "Component: Developer Tools",
        "color": "fbca04",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      },
      {
        "id": 40929153,
        "node_id": "MDU6TGFiZWw0MDkyOTE1Mw==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
        "name": "Type: Enhancement",
        "color": "84b6eb",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-08-19T22:07:02Z",
    "updated_at": "2020-01-08T19:10:58Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "Benoit shared feedback that it would be helpful to show the base duration for the tree (and/or selected element) to get a sense of the total cost over time. (Not sure yet what we'd call this.)\r\n\r\n---\r\nOriginally reported via https://github.com/bvaughn/react-devtools-experimental/issues/55",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/16481",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/16481/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/16481/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/16481/events",
    "html_url": "https://github.com/facebook/react/issues/16481",
    "id": 482550722,
    "node_id": "MDU6SXNzdWU0ODI1NTA3MjI=",
    "number": 16481,
    "title": "DevTools: Collect more info when profiling",
    "user": {
      "login": "bvaughn",
      "id": 29597,
      "node_id": "MDQ6VXNlcjI5NTk3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bvaughn",
      "html_url": "https://github.com/bvaughn",
      "followers_url": "https://api.github.com/users/bvaughn/followers",
      "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
      "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
      "organizations_url": "https://api.github.com/users/bvaughn/orgs",
      "repos_url": "https://api.github.com/users/bvaughn/repos",
      "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bvaughn/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710573595,
        "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
        "name": "Component: Developer Tools",
        "color": "fbca04",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      },
      {
        "id": 40929153,
        "node_id": "MDU6TGFiZWw0MDkyOTE1Mw==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
        "name": "Type: Enhancement",
        "color": "84b6eb",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2019-08-19T22:06:29Z",
    "updated_at": "2020-04-17T18:37:54Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "Some feedback I've heard from a DevTools user (roughly transcribed by me):\r\n\r\n> I'm trying to pinpoint those renders...with hooks, it's sometimes more unclear to me why something is rendering...I generally don't use devtools much anywhere. I use console.log. But Redux devtools worked really well for me because I could see when things were changing and what exactly changed.\r\n\r\nMaybe we could add an opt-in mode (in Settings > Profiler) to collect more data when profiling about _why_ a component rendered. For example, if `props` or `state` changed, we could show which keys changed (just their name, not their values). Maybe we could do something similar for context and for hooks?\r\n\r\nThen we could add this information to the right side panel for the selected fiber in the Profiler UI.\r\n\r\n---\r\nOriginally reported via https://github.com/bvaughn/react-devtools-experimental/issues/98",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/16480",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/16480/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/16480/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/16480/events",
    "html_url": "https://github.com/facebook/react/issues/16480",
    "id": 482550567,
    "node_id": "MDU6SXNzdWU0ODI1NTA1Njc=",
    "number": 16480,
    "title": "DevTools: Fix disabled hooks lint rule",
    "user": {
      "login": "bvaughn",
      "id": 29597,
      "node_id": "MDQ6VXNlcjI5NTk3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bvaughn",
      "html_url": "https://github.com/bvaughn",
      "followers_url": "https://api.github.com/users/bvaughn/followers",
      "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
      "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
      "organizations_url": "https://api.github.com/users/bvaughn/orgs",
      "repos_url": "https://api.github.com/users/bvaughn/repos",
      "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bvaughn/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710573595,
        "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
        "name": "Component: Developer Tools",
        "color": "fbca04",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-08-19T22:06:06Z",
    "updated_at": "2020-01-08T19:10:57Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "Disabled via 00f6466\r\n\r\nMore context at https://github.com/bvaughn/react-devtools-experimental/pull/154#discussion_r275134664\r\n\r\n---\r\nOriginally reported via https://github.com/bvaughn/react-devtools-experimental/issues/156",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/16478",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/16478/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/16478/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/16478/events",
    "html_url": "https://github.com/facebook/react/issues/16478",
    "id": 482547444,
    "node_id": "MDU6SXNzdWU0ODI1NDc0NDQ=",
    "number": 16478,
    "title": "DevTools: Component bookmarks",
    "user": {
      "login": "bvaughn",
      "id": 29597,
      "node_id": "MDQ6VXNlcjI5NTk3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bvaughn",
      "html_url": "https://github.com/bvaughn",
      "followers_url": "https://api.github.com/users/bvaughn/followers",
      "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
      "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
      "organizations_url": "https://api.github.com/users/bvaughn/orgs",
      "repos_url": "https://api.github.com/users/bvaughn/repos",
      "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bvaughn/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710573595,
        "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
        "name": "Component: Developer Tools",
        "color": "fbca04",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      },
      {
        "id": 710375792,
        "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false,
        "description": null
      },
      {
        "id": 40929153,
        "node_id": "MDU6TGFiZWw0MDkyOTE1Mw==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
        "name": "Type: Enhancement",
        "color": "84b6eb",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2019-08-19T21:57:12Z",
    "updated_at": "2020-01-08T19:10:57Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "Product developers sometimes find it useful to jump back and forth between a few components in a tree. Currently this requires scrolling or using the selection tool. Maybe we could allow you to temporarily bookmark one or more components somehow? Then the existing Search interface could maybe be repurposed to let you step between bookmarked components (when there's no search text).\r\n\r\nThese bookmarks would probably not need to be persisted between reloads, so they could be associated with the specific in-memory element<sup>1</sup>.\r\n\r\n<sup>1</sup> Although this association would be lost with a filter change.\r\n\r\n---\r\nOriginally reported via https://github.com/bvaughn/react-devtools-experimental/issues/305",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/16477",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/16477/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/16477/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/16477/events",
    "html_url": "https://github.com/facebook/react/issues/16477",
    "id": 482547222,
    "node_id": "MDU6SXNzdWU0ODI1NDcyMjI=",
    "number": 16477,
    "title": "DevTools: Profiler: Show which hooks changed",
    "user": {
      "login": "bvaughn",
      "id": 29597,
      "node_id": "MDQ6VXNlcjI5NTk3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bvaughn",
      "html_url": "https://github.com/bvaughn",
      "followers_url": "https://api.github.com/users/bvaughn/followers",
      "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
      "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
      "organizations_url": "https://api.github.com/users/bvaughn/orgs",
      "repos_url": "https://api.github.com/users/bvaughn/repos",
      "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bvaughn/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710573595,
        "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
        "name": "Component: Developer Tools",
        "color": "fbca04",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      },
      {
        "id": 40929153,
        "node_id": "MDU6TGFiZWw0MDkyOTE1Mw==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
        "name": "Type: Enhancement",
        "color": "84b6eb",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 12,
    "created_at": "2019-08-19T21:56:36Z",
    "updated_at": "2020-09-11T17:43:36Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "# \"Can you show which hooks changed?\"\r\n\r\n...is a question I've heard a couple of times with regard to the new Profiler change-tracking feature. This request is certainly understandable, but it presents a couple of challenges:\r\n\r\n1. Identifying which hooks values change would requires shallowly re-rendering each function component.\r\n2. Identifying a hook in a non-ambiguous way requires displaying the full hooks tree structure, since hooks aren't named. (Alternately we could support named hooks, #16474)\r\n\r\nLet's take each of a look at each of these below.\r\n\r\n## 1 - Identifying which hooks values change\r\n\r\nOne of the challenge for DevTools when it comes to hooks is identifying custom hooks. Sebastian's [proposed solution](https://github.com/bvaughn/react-devtools-experimental/blob/master/src/backend/ReactDebugHooks.js) is that DevTools temporarily overrides React's hooks dispatcher while it shallowly re-renders the component. During the re-render, each time one of the built-in hooks is used, our override implementation parses the stack to identify \"custom hooks\" (functions higher up in the callstack that begin with \"use\"). After render is completed, we reassemble this information into a tree structure which DevTools can display.\r\n\r\nCurrently we only do this  shallow render when a component is [inspected](https://github.com/bvaughn/react-devtools-experimental/blob/master/OVERVIEW.md#inspecting-an-element), but in order for us to track which hooks have changed while profiling, we would need to shallowly render _every_ component using hooks during the profiling session. Mostly likely we would have to do this during the performance sensitive \"commit\" phase since that's when DevTools is notified of an update.\r\n\r\nI think we could do better than re-running the above hooks override for every component on every commit if we:\r\n* Created a map of Fiber to cached hooks tree structure.\r\n* Lazily populate the above map (by shallow re-rendering) only when a component was updated for the first time.\r\n* Compared Fiber `memoizedState`s to identify changes on future commits and map them back to the tree structure based on their position in the list structure. <sup>1</sup>\r\n\r\nHowever, even with the above optimizations this would still add significant overhead to a performance sensitive phase.\r\n\r\n<sup>1</sup> I think this should work but might also end up being complicated to implement.\r\n\r\n## 2 - Identifying a hook\r\n\r\nAlthough the variables that hooks values are assigned to are meaningfully named, the hooks themselves are unnamed. Because of this, DevTools has no feasible way of identifying a hook short of displaying the entire hooks tree structure. Consider the following example code:\r\n\r\n```js\r\nfunction useCustomHook(...) {\r\n  const [foo, setFoo] = useState(...);\r\n  // ...\r\n}\r\n\r\nfunction ExampleComponent(props) {\r\n  const [bar, setBar] = useState(...);\r\n  const [baz, setBaz] = useState(...);\r\n  const custom = useCustomHook(...);\r\n  // ...\r\n}\r\n```\r\n\r\nThe example above shows 4 hooks: three `useState` and one custom. Let's say that \"foo\" and \"baz\" changed in a particular render. How would DevTools identify this? It could just show \"two state hooks\" but that's not very helpful. I think the only way we could identify it would be to show the entire tree, and visually highlight which hooks in it have changed:\r\n\r\n```\r\nState\r\nState *\r\nCustomHook\r\n  State *\r\n```\r\n\r\nThis is _okay_ but it's not great unless the developer is cross-referencing the component (and probably the custom hooks definition as well). To help with this, we could also _show the values_ but now we're adding more overhead in terms of trackin and bridge traffic.\r\n\r\n## In summary\r\n\r\nClearly both of these challenges can be overcome but they are non-trivial to implement and they will certainly add more runtime overhead to the profiler. Because of this, it may be a while before we add this feature to the DevTools.\r\n\r\n---\r\nOriginally reported via https://github.com/bvaughn/react-devtools-experimental/issues/312",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/16474",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/16474/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/16474/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/16474/events",
    "html_url": "https://github.com/facebook/react/issues/16474",
    "id": 482545095,
    "node_id": "MDU6SXNzdWU0ODI1NDUwOTU=",
    "number": 16474,
    "title": "DevTools: Named hooks",
    "user": {
      "login": "bvaughn",
      "id": 29597,
      "node_id": "MDQ6VXNlcjI5NTk3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bvaughn",
      "html_url": "https://github.com/bvaughn",
      "followers_url": "https://api.github.com/users/bvaughn/followers",
      "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
      "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
      "organizations_url": "https://api.github.com/users/bvaughn/orgs",
      "repos_url": "https://api.github.com/users/bvaughn/repos",
      "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bvaughn/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710573595,
        "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
        "name": "Component: Developer Tools",
        "color": "fbca04",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      },
      {
        "id": 710375792,
        "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false,
        "description": null
      },
      {
        "id": 40929153,
        "node_id": "MDU6TGFiZWw0MDkyOTE1Mw==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
        "name": "Type: Enhancement",
        "color": "84b6eb",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 11,
    "created_at": "2019-08-19T21:50:31Z",
    "updated_at": "2020-08-17T13:44:54Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "**Note** this issue is outdated. The current thinking is that the alternative, \"*load source code (with source maps) and parse for name*\", is probably the best course of action.\r\n\r\n---\r\n\r\n## The problem\r\n\r\nOne common piece of feedback about DevTools hooks integration is that hooks have no name and can be confusing. Consider the following example:\r\n```js\r\nfunction useSomeCustomHook() {\r\n  const [foo, setFoo] = useState(true);\r\n  const [bar, setBar] = useState(false);\r\n\r\n  // ...\r\n}\r\n\r\nfunction Example() {\r\n  const baz = useSomeCustomHook();\r\n\r\n  // ...\r\n}\r\n```\r\n\r\nCurrently in DevTools the above component would be displayed as follows:\r\n```\r\nSomeCustomHook:\r\n  State: true\r\n  State: false\r\n```\r\n\r\nThis information isn't as rich as we would prefer. ☹️\r\n\r\nThe next question is often: \"can you use the name of the variable the hook return value is assigned to?\" but this is tricky because DevTools doesn't actually have any way to access that variable. (Even if DevTools has a handle on the `Example` function above, how would it access the `useSomeCustomHook` function?)\r\n\r\n## The proposal\r\n\r\nThe solution to this would be some form of user-defined metadata (preferably generated by a code transform). Building on the precedent of the `useDebugValue` hook (https://github.com/facebook/react/pull/14559), we might introduce a new no-op hook e.g. `useDebugName`.\r\n\r\nThe above example could make use of this hook like so:\r\n```js\r\nfunction useSomeCustomHook() {\r\n  const [foo, setFoo] = useState(true);\r\n  useDebugName(\"foo\"); // injected by Babel transform\r\n  const [bar, setBar] = useState(false);\r\n  useDebugName(\"bar\"); // injected by Babel transform\r\n\r\n  // ...\r\n}\r\n\r\nfunction Example() {\r\n  const baz = useSomeCustomHook();\r\n\r\n  // ...\r\n}\r\n```\r\n\r\nDevTools could then display something like:\r\n```\r\nSomeCustomHook:\r\n  State (foo): true\r\n  State (bar): true\r\n```\r\n\r\n## Implementation details\r\n\r\nThe new `useDebugName` hook might be a noop hook provided by React (similar to `useDebugValue`) _or_ it could even be an export from the (soon to be released [`react-debug-hooks` package](https://github.com/facebook/react/blob/master/packages/react-debug-tools/)). The key concerns would be that:\r\n1. It has no effect (and adds no overhead) when DevTools is not present.\r\n2. Not calling it at all (or only calling it for _some_ hooks) should not break or corrupt anything.\r\n\r\nDevTools could override the no-op `useDebugName` implementation before inspecting a component and automatically associate the provided name with the most recently called native hook.\r\n\r\nFor example, the following code should only result in one named hook (the second `useState` call).\r\n```js\r\nconst [foo, setFoo] = useState(true);\r\nconst [bar, setBar] = useState(false);\r\nuseDebugName(\"bar\"); // injected by Babel transform\r\nconst [baz, setBaz] = useState(true);\r\n```\r\n\r\nBeing able to support sparse name metadata would be important for third party code (that might not be transformed to supply the metadata).\r\n\r\nA code transform would be ideal for this scenario because manual annotation would probably be cumbersome. This could also be marketed as a **DEV-only transform** so as not to bloat production bundles with display names. We might even try to detect the env and throw if it isn't DEV (like https://github.com/facebook/react/pull/15939).\r\n\r\n## Further considerations\r\n\r\n### Custom hooks?\r\n\r\nIn some cases, custom hooks might also be ambiguous. Consider the `useSubscription` hook (https://github.com/facebook/react/pull/15022):\r\n```js\r\nfunction Example() {\r\n  const foo = useSubscription(...);\r\n  const bar = useSubscription(...);\r\n\r\n  // ...\r\n}\r\n```\r\n\r\nCurrently in DevTools the above component would be displayed as follows:\r\n```\r\nSubscription: \"some value\"\r\n  State: Object\r\nSubscription: \"some other  value\"\r\n  State: Object\r\n```\r\n\r\nMaybe the value alone (provided by `useDebugValue`) could be enough to uniquely identify the hook, but I suspect in many cases it might not be sufficient. Should we then use `useDebugName` for custom hooks as well?\r\n\r\nI think it would be more fragile given the way our custom hooks detection logic is implemented. Custom hooks are not identified until after a component has finished rendering. In order for us to associate names with custom hooks, we would need to maintain a stack of names. This could lead to potential mismatches though in the event that `useDebugName` was called more (or fewer) times than there are custom hooks.\r\n\r\nFor example, consider the following code:\r\n```js\r\nfunction useSomeCustomHook() {\r\n  const [foo, setFoo] = useState(true);\r\n  useDebugName(\"foo\");\r\n  useDebugName(\"effectively ignored\");\r\n  const [bar, setBar] = useState(false);\r\n  const [baz, setBaz] = useState(false);\r\n  useDebugName(\"baz\");\r\n\r\n  // ...\r\n}\r\n````\r\n\r\nThe proposed implementation of `useDebugName` would be robust enough to handle naming \"foo\" and \"baz\" states and leaving \"bar\" as anonymous state hook. If we were maintaining a stack of names however, this discrepency would be more difficult to manage.\r\n\r\nPerhaps there is a clever solution to this problem. I would probably suggest leaving it out of the initial implementation though and only revisiting if we determine it's a necessary feature.\r\n\r\n## Alternatives considered\r\n\r\n### Pass debug name as an additional (unused) parameter\r\n\r\nAn alternative approach to calling a separate hook for naming purposes would be to pass the display name as an additional parameter to the native hook, e.g.:\r\n```js\r\nfunction useSomeCustomHook() {\r\n  const [foo, setFoo] = useState(true, \"foo\");\r\n  const [bar, setBar] = useState(false, \"bar\");\r\n\r\n  // ...\r\n}\r\n\r\nfunction Example() {\r\n  const baz = useSomeCustomHook();\r\n\r\n  // ...\r\n}\r\n```\r\n\r\n**Pros**:\r\n* Less code.\r\n* Does not introduce a new hook.\r\n\r\n**Cons**:\r\n* It requires knowledge about the arity of native hooks. Ror example `useReducer` has optional parameters that the transform (or manual code) would need to be aware of to avoid a runtime error.\r\n* It would not be possible to support naming custom hooks (if that's something we decided to do).\r\n\r\n### Load source code (with source maps) and parse for name\r\nWe could use an extension API like [`Resource.getContent`](https://developer.chrome.com/extensions/devtools_inspectedWindow#method-Resource-getContent) to load the source code (including custom hooks) and parse it determine the hook/variable names. Essentially this would work like the proposed transform above, but at runtime.\r\n\r\n**Pros**:\r\n* Does not require a Babel transform step. (\"Just works\")\r\n* Does not potentially bloat production builds (if transform is used incorrectly).\r\n\r\n**Cons**:\r\n* Adds additional async loading (complexity) to suspense cache used for hooks inspection.\r\n* May have difficulty parsing certain code patterns (e.g. Babel's destructuring transform) unless we embed a full parser.\r\n\r\n### Call `toString` on the function component and parse for name\r\nA possible 80/20 variant of the above proposal would be to simply call` toString` on the function component and parse any top-level hooks.\r\n\r\n**Pros**:\r\n* Does not require a Babel transform step. (\"Just works\")\r\n* Does not potentially bloat production builds (if transform is used incorrectly).\r\n* Does not require any additional asynchronous code.\r\n\r\n**Cons**:\r\n* Only supports top-level hooks (used directly within the function).\r\n* May have difficulty parsing certain code patterns (e.g. Babel's destructuring transform) unless we embed a fullp parser.\r\n\r\n### Use a Babel transform to leave an inline comment (and call `toString` to search for it)\r\nRather than inserting a call to a new custom hook, our code transform could just insert an inline comment with the name. We could then parse the code to find the inline comment, e.g.:\r\n```js\r\nfunction Example() {\r\n  /* hook:foo:Example.react.js:3 */\r\n  const foo = useSubscription(...);\r\n  /* hook:bar:Example.react.js:5 */\r\n  const bar = useSubscription(...);\r\n\r\n  // ...\r\n}\r\n```\r\n\r\n**Pros**:\r\n* Does not potentially bloat production builds (if transform is used incorrectly).\r\n* Potentially sidesteps difficulty of parsing certain code patterns (e.g. Babel's destructuring transform).\r\n\r\n**Cons**:\r\n* Only supports top-level hooks (used directly within the function).\r\n* Still requires an explicit transform step.\r\n\r\n---\r\nOriginally reported via https://github.com/bvaughn/react-devtools-experimental/issues/323",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/16472",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/16472/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/16472/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/16472/events",
    "html_url": "https://github.com/facebook/react/issues/16472",
    "id": 482544667,
    "node_id": "MDU6SXNzdWU0ODI1NDQ2Njc=",
    "number": 16472,
    "title": "DevTools: Keyboard arrow-key navigation for the flamegraph view",
    "user": {
      "login": "bvaughn",
      "id": 29597,
      "node_id": "MDQ6VXNlcjI5NTk3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bvaughn",
      "html_url": "https://github.com/bvaughn",
      "followers_url": "https://api.github.com/users/bvaughn/followers",
      "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
      "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
      "organizations_url": "https://api.github.com/users/bvaughn/orgs",
      "repos_url": "https://api.github.com/users/bvaughn/repos",
      "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bvaughn/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710573595,
        "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
        "name": "Component: Developer Tools",
        "color": "fbca04",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      },
      {
        "id": 40929153,
        "node_id": "MDU6TGFiZWw0MDkyOTE1Mw==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
        "name": "Type: Enhancement",
        "color": "84b6eb",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-08-19T21:49:15Z",
    "updated_at": "2020-01-08T19:10:55Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "It would be good to have keyboard navigation on the flamegraph view to make it easier and faster to scoot around to different components in the same render. \r\n\r\nGiven that flamegraph is implemented in SVG and given the complexity of navigating through an uneven grid, I suspect keyboard access is probably beyond the scope of near-future DevTools releases, but wanted to file this issue while it's top-of-mind. \r\n\r\nExpected behavior: \r\n* There should be a selected/focused UI of some sort around the active component. This could be a black or colored outline around the currently selected component, or perhaps a background pattern like diagonal hatching.  IMHO, this would be valuable even without keyboard support! \r\n* Up arrow should change selection to the parent component\r\n* Left/Right arrows should move selection to the prev/next sibling components. Should wrap when at the beginning or end of the line.\r\n* Tab should move focus to the right pane (this matches behavior of other DevTools tabs like Elements)\r\n* Shift+Tab should move focus to the rightmost control in the toolbar (currently this is the \"next commit\" button)\r\n\r\nThis is a companion issue to #332 which asks for keyboard access for the \"Rendered At\" list. Compared to this suggestion, #332 should be much easier to implement so I split them.\r\n\r\n---\r\nOriginally reported by @justingrant via https://github.com/bvaughn/react-devtools-experimental/issues/333",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/16471",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/16471/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/16471/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/16471/events",
    "html_url": "https://github.com/facebook/react/issues/16471",
    "id": 482544193,
    "node_id": "MDU6SXNzdWU0ODI1NDQxOTM=",
    "number": 16471,
    "title": "DevTools: React Native: Support reload-and-profile be an important feature",
    "user": {
      "login": "bvaughn",
      "id": 29597,
      "node_id": "MDQ6VXNlcjI5NTk3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bvaughn",
      "html_url": "https://github.com/bvaughn",
      "followers_url": "https://api.github.com/users/bvaughn/followers",
      "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
      "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
      "organizations_url": "https://api.github.com/users/bvaughn/orgs",
      "repos_url": "https://api.github.com/users/bvaughn/repos",
      "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bvaughn/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710573595,
        "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
        "name": "Component: Developer Tools",
        "color": "fbca04",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      },
      {
        "id": 40929153,
        "node_id": "MDU6TGFiZWw0MDkyOTE1Mw==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
        "name": "Type: Enhancement",
        "color": "84b6eb",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-08-19T21:47:53Z",
    "updated_at": "2020-01-08T19:10:55Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "React DevTools v4 adds a new reload and profile feature to measure perf for application \"mount\" ([although it required a bit of hacking](https://github.com/bvaughn/react-devtools-experimental/pull/35)). I don't feel knowledgeable enough about React Native to tackle it, so my current plan is to just **not** support this feature for RN.\r\n\r\nIf we did decide to support it,I think we would need to solve the following:\r\n\r\n1. A reload hook on the backend that worked for all bundle types (not just DEV).\r\n2. Some assurance that the backend will be injected/initialized _before_ the first mount/commit (or a mechanism to delay the first commit, like we do in the browser).\r\n3. Some way for third party code to request a production+profiling build ([similar to how DOM does it](https://fb.me/react-profiling)).\r\n4. A sync storage mechanism (or some other way for DevTools could leave a flag for itself so it knows to begin profiling immediately after reload+connection).\r\n\r\n---\r\nOriginally reported via https://github.com/bvaughn/react-devtools-experimental/issues/336",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/16470",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/16470/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/16470/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/16470/events",
    "html_url": "https://github.com/facebook/react/issues/16470",
    "id": 482543940,
    "node_id": "MDU6SXNzdWU0ODI1NDM5NDA=",
    "number": 16470,
    "title": "DevTools: React Native: Remember saved component filters between reloads",
    "user": {
      "login": "bvaughn",
      "id": 29597,
      "node_id": "MDQ6VXNlcjI5NTk3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bvaughn",
      "html_url": "https://github.com/bvaughn",
      "followers_url": "https://api.github.com/users/bvaughn/followers",
      "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
      "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
      "organizations_url": "https://api.github.com/users/bvaughn/orgs",
      "repos_url": "https://api.github.com/users/bvaughn/repos",
      "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bvaughn/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710573595,
        "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
        "name": "Component: Developer Tools",
        "color": "fbca04",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      },
      {
        "id": 40929153,
        "node_id": "MDU6TGFiZWw0MDkyOTE1Mw==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
        "name": "Type: Enhancement",
        "color": "84b6eb",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-08-19T21:47:06Z",
    "updated_at": "2020-01-08T19:10:55Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "DevTools v4 added a pretty powerful new component filtering feature that enables devs to filter out components by type, name, or file system location. Because these filters can be a bit elaborate to create, they are saved between sessions to improve dev experience.\r\n\r\n**Unfortunately, I don't think I am going to be able to support the persistence functionality for React Native.** (In other words, filters will be forgotten each time you reload the app.)\r\n\r\nThe reason for this is a mix of timing and context. The biggest limiting factor is the lack of a synchronous storage option. React Native has a couple of faux sync storage options, but they just in-memory wrappers around an async storage layer and they require async initialization. That _could_ work if the React Native backend waited to initialize DevTools until it also initialized the async storage layer, _but_ this has implications on reload-and-profile support (#336).\r\n\r\n---\r\nOriginally reported via https://github.com/bvaughn/react-devtools-experimental/issues/337",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/16469",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/16469/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/16469/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/16469/events",
    "html_url": "https://github.com/facebook/react/issues/16469",
    "id": 482543159,
    "node_id": "MDU6SXNzdWU0ODI1NDMxNTk=",
    "number": 16469,
    "title": "DevTools: Triggering Error Boundaries from DevTools",
    "user": {
      "login": "bvaughn",
      "id": 29597,
      "node_id": "MDQ6VXNlcjI5NTk3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bvaughn",
      "html_url": "https://github.com/bvaughn",
      "followers_url": "https://api.github.com/users/bvaughn/followers",
      "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
      "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
      "organizations_url": "https://api.github.com/users/bvaughn/orgs",
      "repos_url": "https://api.github.com/users/bvaughn/repos",
      "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bvaughn/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710573595,
        "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
        "name": "Component: Developer Tools",
        "color": "fbca04",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      },
      {
        "id": 40929153,
        "node_id": "MDU6TGFiZWw0MDkyOTE1Mw==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
        "name": "Type: Enhancement",
        "color": "84b6eb",
        "default": false,
        "description": null
      },
      {
        "id": 725156255,
        "node_id": "MDU6TGFiZWw3MjUxNTYyNTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/good%20first%20issue%20(taken)",
        "name": "good first issue (taken)",
        "color": "b60205",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2019-08-19T21:44:50Z",
    "updated_at": "2020-03-18T16:35:04Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "It would be useful to force components into an error state, in order to test error boundaries (similar to how the suspense toggle works).\r\n\r\n---\r\nOriginally reported via https://github.com/bvaughn/react-devtools-experimental/issues/340",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/16468",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/16468/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/16468/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/16468/events",
    "html_url": "https://github.com/facebook/react/issues/16468",
    "id": 482542595,
    "node_id": "MDU6SXNzdWU0ODI1NDI1OTU=",
    "number": 16468,
    "title": "Remember saved component filters by url or in bookmarks",
    "user": {
      "login": "bvaughn",
      "id": 29597,
      "node_id": "MDQ6VXNlcjI5NTk3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bvaughn",
      "html_url": "https://github.com/bvaughn",
      "followers_url": "https://api.github.com/users/bvaughn/followers",
      "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
      "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
      "organizations_url": "https://api.github.com/users/bvaughn/orgs",
      "repos_url": "https://api.github.com/users/bvaughn/repos",
      "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bvaughn/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710573595,
        "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
        "name": "Component: Developer Tools",
        "color": "fbca04",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      },
      {
        "id": 710375792,
        "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2019-08-19T21:43:09Z",
    "updated_at": "2020-07-25T19:40:17Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "It would be cool if it will support saving filter based on url or some bookmarks. I think it will be really useful for switching between different projects. And seems that bookmarks is better solution because usually people have some different stages like production/pre-production/local development.\r\n\r\n---\r\nOriginally reported by @7rulnik via https://github.com/bvaughn/react-devtools-experimental/issues/359",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/16465",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/16465/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/16465/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/16465/events",
    "html_url": "https://github.com/facebook/react/issues/16465",
    "id": 482540711,
    "node_id": "MDU6SXNzdWU0ODI1NDA3MTE=",
    "number": 16465,
    "title": "DevTools: Occasional FOUC when loading DevTools",
    "user": {
      "login": "bvaughn",
      "id": 29597,
      "node_id": "MDQ6VXNlcjI5NTk3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bvaughn",
      "html_url": "https://github.com/bvaughn",
      "followers_url": "https://api.github.com/users/bvaughn/followers",
      "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
      "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
      "organizations_url": "https://api.github.com/users/bvaughn/orgs",
      "repos_url": "https://api.github.com/users/bvaughn/repos",
      "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bvaughn/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710573595,
        "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
        "name": "Component: Developer Tools",
        "color": "fbca04",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      },
      {
        "id": 40929151,
        "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
        "name": "Type: Bug",
        "color": "b60205",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2019-08-19T21:38:01Z",
    "updated_at": "2020-01-08T19:10:53Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "Seems to only happen the first time DevTools is opened after being installed (or perhaps the first time after the browser is opened).\r\n\r\n---\r\nOriginally reported via https://github.com/bvaughn/react-devtools-experimental/issues/381",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/16463",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/16463/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/16463/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/16463/events",
    "html_url": "https://github.com/facebook/react/issues/16463",
    "id": 482539346,
    "node_id": "MDU6SXNzdWU0ODI1MzkzNDY=",
    "number": 16463,
    "title": "DevTools: An easier way to see all siblings",
    "user": {
      "login": "bvaughn",
      "id": 29597,
      "node_id": "MDQ6VXNlcjI5NTk3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bvaughn",
      "html_url": "https://github.com/bvaughn",
      "followers_url": "https://api.github.com/users/bvaughn/followers",
      "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
      "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
      "organizations_url": "https://api.github.com/users/bvaughn/orgs",
      "repos_url": "https://api.github.com/users/bvaughn/repos",
      "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bvaughn/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710573595,
        "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
        "name": "Component: Developer Tools",
        "color": "fbca04",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      },
      {
        "id": 40929153,
        "node_id": "MDU6TGFiZWw0MDkyOTE1Mw==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
        "name": "Type: Enhancement",
        "color": "84b6eb",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2019-08-19T21:34:16Z",
    "updated_at": "2020-02-08T07:47:08Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "I have a particular pattern that I struggle with when navigating deep trees in devtools: I want to see all siblings of a node together.\r\n\r\nSay I'm in the middle of something and I wonder what are all nodes on the same level. It's super hard to actually get to that state. I wonder if we could tweak \"left\" button to do that as an intermediate state.\r\n\r\n* first press: collapse the current node\r\n* second press: collapse all siblings (new)\r\n* third press: move to the parent\r\n\r\nMaybe this is too crazy :-) Or maybe there's another mechanic that can achieve the same effect. The goal here is to be able to make sense of the tree structure by going _upwards_. Currently implementation details of children prevent me from seeing it. (At least, with the \"expand\" mode on — which is now on by default.)\r\n\r\n---\r\nOriginally reported by @gaearon via https://github.com/bvaughn/react-devtools-experimental/issues/384",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/16456",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/16456/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/16456/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/16456/events",
    "html_url": "https://github.com/facebook/react/issues/16456",
    "id": 482399202,
    "node_id": "MDU6SXNzdWU0ODIzOTkyMDI=",
    "number": 16456,
    "title": "React DevTools: styling overrides global styles",
    "user": {
      "login": "CompuIves",
      "id": 587016,
      "node_id": "MDQ6VXNlcjU4NzAxNg==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/587016?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CompuIves",
      "html_url": "https://github.com/CompuIves",
      "followers_url": "https://api.github.com/users/CompuIves/followers",
      "following_url": "https://api.github.com/users/CompuIves/following{/other_user}",
      "gists_url": "https://api.github.com/users/CompuIves/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CompuIves/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CompuIves/subscriptions",
      "organizations_url": "https://api.github.com/users/CompuIves/orgs",
      "repos_url": "https://api.github.com/users/CompuIves/repos",
      "events_url": "https://api.github.com/users/CompuIves/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CompuIves/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710573595,
        "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
        "name": "Component: Developer Tools",
        "color": "fbca04",
        "default": false,
        "description": null
      },
      {
        "id": 40929151,
        "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
        "name": "Type: Bug",
        "color": "b60205",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2019-08-19T16:07:25Z",
    "updated_at": "2020-01-04T10:14:15Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nThis is a very specific case - there are some styles leaking from react devtools, if you use it in your own application directly. Specifically these lines: https://github.com/facebook/react/blob/devtools-v4-merge/packages/react-devtools-shared/src/devtools/views/root.css#L174-L178.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nIt's funny, I can give a *real* CodeSandbox editor now! You can see the styling on the editor elements here: https://codesandbox.io/s/new.\r\n\r\n**What is the expected behavior?**\r\n\r\nNo leaking styles. Ideally the `* {` would be prefixed by an id or classname specific for the devtools. I think this should be possible with the styling used by the devtools. I can open a PR to fix this if everyone agrees on this fix.\r\n\r\ncc @bvaughn \t",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/16444",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/16444/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/16444/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/16444/events",
    "html_url": "https://github.com/facebook/react/issues/16444",
    "id": 482007607,
    "node_id": "MDU6SXNzdWU0ODIwMDc2MDc=",
    "number": 16444,
    "title": "Refactor ProfilerContext to use reducer instead of multi-state",
    "user": {
      "login": "bvaughn",
      "id": 29597,
      "node_id": "MDQ6VXNlcjI5NTk3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bvaughn",
      "html_url": "https://github.com/bvaughn",
      "followers_url": "https://api.github.com/users/bvaughn/followers",
      "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
      "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
      "organizations_url": "https://api.github.com/users/bvaughn/orgs",
      "repos_url": "https://api.github.com/users/bvaughn/repos",
      "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bvaughn/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710573595,
        "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
        "name": "Component: Developer Tools",
        "color": "fbca04",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      },
      {
        "id": 40929153,
        "node_id": "MDU6TGFiZWw0MDkyOTE1Mw==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
        "name": "Type: Enhancement",
        "color": "84b6eb",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-08-18T15:40:40Z",
    "updated_at": "2020-01-08T19:10:52Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "The `ProfilerContext` is currently comprised of several pieces of related state, each managed with `useState`. This necessitates awkward checks like [this](https://github.com/bvaughn/react-devtools-experimental/blob/4697f5b37967b85b2c844044aeebb5b1a740875d/src/devtools/views/Profiler/ProfilerContext.js#L126-L131) or even worse like [this](https://github.com/bvaughn/react-devtools-experimental/blob/4697f5b37967b85b2c844044aeebb5b1a740875d/src/devtools/views/Profiler/SnapshotSelector.js#L62-L73) or [this](https://github.com/bvaughn/react-devtools-experimental/blob/source/src/devtools/views/Profiler/Profiler.js#L71-L83).\r\n\r\nThis context should be refactored to use a single reducer (`useReducer`) like `TreeContext`. This is a bit more involved at the moment because of suspense and the `ProfilerContext` being higher level than the suspense cache. Although maybe we could work around this by using some sort of [subscription](https://github.com/bvaughn/react-devtools-experimental/blob/4697f5b37967b85b2c844044aeebb5b1a740875d/src/devtools/views/Profiler/ProfilerContext.js#L118-L124)?\r\n\r\nSee related issues like #16441 and commit [4697f5b](https://github.com/bvaughn/react-devtools-experimental/commit/4697f5b37967b85b2c844044aeebb5b1a740875d).",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/16416",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/16416/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/16416/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/16416/events",
    "html_url": "https://github.com/facebook/react/issues/16416",
    "id": 481517156,
    "node_id": "MDU6SXNzdWU0ODE1MTcxNTY=",
    "number": 16416,
    "title": "SSR: Cannot set property 'memoizedState' of null",
    "user": {
      "login": "ambar",
      "id": 105919,
      "node_id": "MDQ6VXNlcjEwNTkxOQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/105919?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ambar",
      "html_url": "https://github.com/ambar",
      "followers_url": "https://api.github.com/users/ambar/followers",
      "following_url": "https://api.github.com/users/ambar/following{/other_user}",
      "gists_url": "https://api.github.com/users/ambar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ambar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ambar/subscriptions",
      "organizations_url": "https://api.github.com/users/ambar/orgs",
      "repos_url": "https://api.github.com/users/ambar/repos",
      "events_url": "https://api.github.com/users/ambar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ambar/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 40929151,
        "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
        "name": "Type: Bug",
        "color": "b60205",
        "default": false,
        "description": null
      },
      {
        "id": 725156255,
        "node_id": "MDU6TGFiZWw3MjUxNTYyNTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/good%20first%20issue%20(taken)",
        "name": "good first issue (taken)",
        "color": "b60205",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 10,
    "created_at": "2019-08-16T09:10:04Z",
    "updated_at": "2020-05-12T02:38:47Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nA bug?\r\n\r\n**What is the current behavior?**\r\n\r\n> Cannot set property 'memoizedState' of null\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n```js\r\nconst processLink = html => {\r\n  return renderToStaticMarkup(<Link />)\r\n};\r\n\r\nconst RichText = ({ html }) => {\r\n  const htmlProcessed = useMemo(() => processLink(html), [html]);\r\n}\r\n```\r\nSee https://codesandbox.io/s/cannot-set-property-memoizedstate-of-null-mrxfr\r\n\r\n**What is the expected behavior?**\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.8~16.9\r\n\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/16376",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/16376/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/16376/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/16376/events",
    "html_url": "https://github.com/facebook/react/issues/16376",
    "id": 479965143,
    "node_id": "MDU6SXNzdWU0Nzk5NjUxNDM=",
    "number": 16376,
    "title": "Add Priorities for All Event Types",
    "user": {
      "login": "sebmarkbage",
      "id": 63648,
      "node_id": "MDQ6VXNlcjYzNjQ4",
      "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sebmarkbage",
      "html_url": "https://github.com/sebmarkbage",
      "followers_url": "https://api.github.com/users/sebmarkbage/followers",
      "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
      "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
      "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
      "repos_url": "https://api.github.com/users/sebmarkbage/repos",
      "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 739761016,
        "node_id": "MDU6TGFiZWw3Mzk3NjEwMTY=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler",
        "name": "Component: Reconciler",
        "color": "f9a798",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      },
      {
        "id": 40929151,
        "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
        "name": "Type: Bug",
        "color": "b60205",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "acdlite",
      "id": 3624098,
      "node_id": "MDQ6VXNlcjM2MjQwOTg=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3624098?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/acdlite",
      "html_url": "https://github.com/acdlite",
      "followers_url": "https://api.github.com/users/acdlite/followers",
      "following_url": "https://api.github.com/users/acdlite/following{/other_user}",
      "gists_url": "https://api.github.com/users/acdlite/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/acdlite/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/acdlite/subscriptions",
      "organizations_url": "https://api.github.com/users/acdlite/orgs",
      "repos_url": "https://api.github.com/users/acdlite/repos",
      "events_url": "https://api.github.com/users/acdlite/events{/privacy}",
      "received_events_url": "https://api.github.com/users/acdlite/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "acdlite",
        "id": 3624098,
        "node_id": "MDQ6VXNlcjM2MjQwOTg=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/3624098?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/acdlite",
        "html_url": "https://github.com/acdlite",
        "followers_url": "https://api.github.com/users/acdlite/followers",
        "following_url": "https://api.github.com/users/acdlite/following{/other_user}",
        "gists_url": "https://api.github.com/users/acdlite/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/acdlite/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/acdlite/subscriptions",
        "organizations_url": "https://api.github.com/users/acdlite/orgs",
        "repos_url": "https://api.github.com/users/acdlite/repos",
        "events_url": "https://api.github.com/users/acdlite/events{/privacy}",
        "received_events_url": "https://api.github.com/users/acdlite/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-08-13T05:27:07Z",
    "updated_at": "2020-01-08T19:11:25Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "Currently the simple event plugin defines a priority for the event but not all events go through the SimpleEventPlugin. That's just one of several EventPlugins. The remaining ones now get the wrong priority associated with them. \r\n\r\nE.g. I think all of these should be discrete:\r\n\r\nchange\r\ncompositionend\r\ncompositionstart\r\ncompositionupdate\r\nselectionchange\r\ntextinput\r\n\r\nThese show up too but I don't know if they're even bridged.\r\n\r\ndblclick\r\npointerenter\r\npointerleave\r\n\r\nFlare defines its own priorities.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/16374",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/16374/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/16374/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/16374/events",
    "html_url": "https://github.com/facebook/react/issues/16374",
    "id": 479889545,
    "node_id": "MDU6SXNzdWU0Nzk4ODk1NDU=",
    "number": 16374,
    "title": "Verify that Dehydrated Boundaries (and SuspenseList) Works with DevTools",
    "user": {
      "login": "sebmarkbage",
      "id": 63648,
      "node_id": "MDQ6VXNlcjYzNjQ4",
      "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sebmarkbage",
      "html_url": "https://github.com/sebmarkbage",
      "followers_url": "https://api.github.com/users/sebmarkbage/followers",
      "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
      "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
      "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
      "repos_url": "https://api.github.com/users/sebmarkbage/repos",
      "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710573595,
        "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
        "name": "Component: Developer Tools",
        "color": "fbca04",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      },
      {
        "id": 710722093,
        "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
        "name": "Type: Needs Investigation",
        "color": "fbca04",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "bvaughn",
      "id": 29597,
      "node_id": "MDQ6VXNlcjI5NTk3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bvaughn",
      "html_url": "https://github.com/bvaughn",
      "followers_url": "https://api.github.com/users/bvaughn/followers",
      "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
      "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
      "organizations_url": "https://api.github.com/users/bvaughn/orgs",
      "repos_url": "https://api.github.com/users/bvaughn/repos",
      "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bvaughn/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "bvaughn",
        "id": 29597,
        "node_id": "MDQ6VXNlcjI5NTk3",
        "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bvaughn",
        "html_url": "https://github.com/bvaughn",
        "followers_url": "https://api.github.com/users/bvaughn/followers",
        "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
        "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
        "organizations_url": "https://api.github.com/users/bvaughn/orgs",
        "repos_url": "https://api.github.com/users/bvaughn/repos",
        "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bvaughn/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-08-12T23:12:21Z",
    "updated_at": "2020-01-08T19:11:25Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "The fixture might be a good start https://github.com/facebook/react/tree/master/fixtures/ssr (enableSuspenseServerRenderer flag to try it).\r\n\r\nIt has a long suspending thing.\r\n\r\nIt doesn't have a SuspenseList yet but might be nice.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/16365",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/16365/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/16365/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/16365/events",
    "html_url": "https://github.com/facebook/react/issues/16365",
    "id": 479668806,
    "node_id": "MDU6SXNzdWU0Nzk2Njg4MDY=",
    "number": 16365,
    "title": "ErrorBoundary rendering multiple copies of itself when ref assignment fails",
    "user": {
      "login": "silverwind",
      "id": 115237,
      "node_id": "MDQ6VXNlcjExNTIzNw==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/115237?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/silverwind",
      "html_url": "https://github.com/silverwind",
      "followers_url": "https://api.github.com/users/silverwind/followers",
      "following_url": "https://api.github.com/users/silverwind/following{/other_user}",
      "gists_url": "https://api.github.com/users/silverwind/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/silverwind/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/silverwind/subscriptions",
      "organizations_url": "https://api.github.com/users/silverwind/orgs",
      "repos_url": "https://api.github.com/users/silverwind/repos",
      "events_url": "https://api.github.com/users/silverwind/events{/privacy}",
      "received_events_url": "https://api.github.com/users/silverwind/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 739761016,
        "node_id": "MDU6TGFiZWw3Mzk3NjEwMTY=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler",
        "name": "Component: Reconciler",
        "color": "f9a798",
        "default": false,
        "description": null
      },
      {
        "id": 40929151,
        "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
        "name": "Type: Bug",
        "color": "b60205",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2019-08-12T14:12:35Z",
    "updated_at": "2020-01-09T17:05:27Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nbug\r\n\r\n**What is the current behavior?**\r\n\r\nWhen a error occurs during the assignment of a `ref` (and maybe other conditions), a error boundary wrapping that error may get confused and it renders itself multiple times inside the same parent. See https://codesandbox.io/s/stoic-fermi-6etqb which renders:\r\n\r\n```html\r\n<div id=\"root\">\r\n  <div class=\"boundary\"><span>content</span></div>\r\n  <div class=\"boundary\"><span>error</span></div>\r\n</div>\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\n```html\r\n<div id=\"root\">\r\n  <div class=\"boundary\"><span>error</span></div>\r\n</div>\r\n```",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/16342",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/16342/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/16342/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/16342/events",
    "html_url": "https://github.com/facebook/react/issues/16342",
    "id": 479129821,
    "node_id": "MDU6SXNzdWU0NzkxMjk4MjE=",
    "number": 16342,
    "title": "textarea does not show warning when switching from uncontrolled to controlled like inputs do",
    "user": {
      "login": "bradwestfall",
      "id": 2272118,
      "node_id": "MDQ6VXNlcjIyNzIxMTg=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2272118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bradwestfall",
      "html_url": "https://github.com/bradwestfall",
      "followers_url": "https://api.github.com/users/bradwestfall/followers",
      "following_url": "https://api.github.com/users/bradwestfall/following{/other_user}",
      "gists_url": "https://api.github.com/users/bradwestfall/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bradwestfall/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bradwestfall/subscriptions",
      "organizations_url": "https://api.github.com/users/bradwestfall/orgs",
      "repos_url": "https://api.github.com/users/bradwestfall/repos",
      "events_url": "https://api.github.com/users/bradwestfall/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bradwestfall/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 127893911,
        "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
        "name": "Component: DOM",
        "color": "fef2c0",
        "default": false,
        "description": null
      },
      {
        "id": 40929151,
        "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
        "name": "Type: Bug",
        "color": "b60205",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2019-08-09T19:15:55Z",
    "updated_at": "2019-12-01T22:39:25Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nWhile things like `<input>` correctly get a warning when switching from uncrontrolled to controlled, I'm noticing `<textarea>` does not\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nHere's a codesandbox. Type in the input field, we see error (correct), change to textarea and start over, type in field and we don't see the error (incorrect I think) https://codesandbox.io/s/recursing-dawn-jls8i\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.8\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/16265",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/16265/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/16265/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/16265/events",
    "html_url": "https://github.com/facebook/react/issues/16265",
    "id": 475084284,
    "node_id": "MDU6SXNzdWU0NzUwODQyODQ=",
    "number": 16265,
    "title": "Warning for 'exhaustive-deps' keeps asking for the full 'props' object instead of allowing single 'props' properties as dependencies",
    "user": {
      "login": "cbdeveloper",
      "id": 43407798,
      "node_id": "MDQ6VXNlcjQzNDA3Nzk4",
      "avatar_url": "https://avatars2.githubusercontent.com/u/43407798?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cbdeveloper",
      "html_url": "https://github.com/cbdeveloper",
      "followers_url": "https://api.github.com/users/cbdeveloper/followers",
      "following_url": "https://api.github.com/users/cbdeveloper/following{/other_user}",
      "gists_url": "https://api.github.com/users/cbdeveloper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cbdeveloper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cbdeveloper/subscriptions",
      "organizations_url": "https://api.github.com/users/cbdeveloper/orgs",
      "repos_url": "https://api.github.com/users/cbdeveloper/repos",
      "events_url": "https://api.github.com/users/cbdeveloper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cbdeveloper/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 32,
    "created_at": "2019-07-31T11:18:04Z",
    "updated_at": "2020-10-21T16:42:11Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBUG (possible) in `eslint-plugin-react-hooks`\r\n\r\n**What is the current behavior?**\r\n\r\nWhen I'm in CodeSanbox using a React Sandbox I can use single properties of the `props` object as dependencies for the `useEffect` hook:\r\n\r\nExample 1:\r\n\r\n```\r\nuseEffect(()=>{\r\n    console.log('Running useEffect...');\r\n    console.log(typeof(props.myProp));\r\n  },[ ]);\r\n```\r\n\r\nThe example 1 gives me the following warning in CodeSandbox environment:\r\n\r\n>React Hook useEffect has a missing dependency: '**props.myProp'**. Either include it or remove the dependency array. (react-hooks/exhaustive-deps) eslint\r\n\r\nAnd if I add `[props.myProp]` to the array, the warning goes away.\r\n\r\nBut the same example 1 in my local environment in VSCode, I get the following warning:\r\n\r\n>React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.eslint(react-hooks/exhaustive-deps)\r\n\r\n**What is the expected behavior?**\r\n\r\nI would expect that I would get the same behavior that I get on CodeSandbox in my local environment in VSCode.\r\n\r\nBut, if I add `[props.myProp]` to the array, the warning DOES NOT go away. Although the code works as intended.\r\n\r\nWhat could be happening? Does CodeSandbox uses a different version of the plugin? Is there any configuration I can make to change this behavior?\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nVersions I'm using:\r\n\r\nDEV:\r\n```\r\n\"eslint\": \"^5.10.0\",\r\n\"eslint-plugin-react\": \"^7.11.1\",\r\n\"eslint-plugin-react-hooks\": \"^1.6.1\",\r\n```\r\n\r\nREGULAR\r\n```\r\n\"react\": \"^16.8.6\",\r\n\"react-dom\": \"^16.8.6\",\r\n```\r\n\r\nVSCODE (probably not causing this issue)\r\n\r\nVersion: 1.32.3 (user setup)\r\nCommit: a3db5be9b5c6ba46bb7555ec5d60178ecc2eaae4\r\nDate: 2019-03-14T23:43:35.476Z\r\nElectron: 3.1.6\r\nChrome: 66.0.3359.181\r\nNode.js: 10.2.0\r\nV8: 6.6.346.32\r\nOS: Windows_NT x64 10.0.17763\r\n\r\n**.eslintrc.json**\r\n\r\n```\r\n{\r\n  \"root\"  :true,\r\n  \"env\": {\r\n    \"browser\": true,\r\n    \"commonjs\": true,\r\n    \"es6\": true,\r\n    \"node\": true\r\n  },\r\n  \"extends\": [\r\n    \"eslint:recommended\",\r\n    \"plugin:react/recommended\",\r\n    \"plugin:import/errors\"\r\n  ],\r\n  \"parser\":\"babel-eslint\",\r\n  \"parserOptions\": {\r\n    \"ecmaVersion\": 2018,\r\n    \"sourceType\": \"module\",\r\n    \"ecmaFeatures\": {\r\n      \"jsx\":true\r\n    }\r\n  },\r\n  \"plugins\":[\r\n    \"react\",\r\n    \"react-hooks\"\r\n  ],\r\n  \"rules\": {\r\n    \"react/prop-types\": 0,\r\n    \"semi\": \"error\",\r\n    \"no-console\": 0,\r\n    \"react-hooks/rules-of-hooks\": \"error\",\r\n    \"react-hooks/exhaustive-deps\": \"warn\"\r\n  },\r\n  \"settings\": {\r\n    \"import/resolver\" : {\r\n      \"alias\" : {\r\n        \"map\" : [\r\n          [\"@components\",\"./src/components\"],\r\n          [\"@constants\",\"./src/constants\"],\r\n          [\"@helpers\",\"./src/helpers\"]\r\n        ],\r\n        \"extensions\": [\".js\"]\r\n      }\r\n    },\r\n    \"react\" : {\r\n      \"version\": \"detect\"\r\n    }\r\n  }\r\n}\r\n\r\n```\r\n\r\n\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/16258",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/16258/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/16258/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/16258/events",
    "html_url": "https://github.com/facebook/react/issues/16258",
    "id": 474854768,
    "node_id": "MDU6SXNzdWU0NzQ4NTQ3Njg=",
    "number": 16258,
    "title": "[Regression] onChange behaviour on radio buttons",
    "user": {
      "login": "theKashey",
      "id": 582410,
      "node_id": "MDQ6VXNlcjU4MjQxMA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/582410?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theKashey",
      "html_url": "https://github.com/theKashey",
      "followers_url": "https://api.github.com/users/theKashey/followers",
      "following_url": "https://api.github.com/users/theKashey/following{/other_user}",
      "gists_url": "https://api.github.com/users/theKashey/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theKashey/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theKashey/subscriptions",
      "organizations_url": "https://api.github.com/users/theKashey/orgs",
      "repos_url": "https://api.github.com/users/theKashey/repos",
      "events_url": "https://api.github.com/users/theKashey/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theKashey/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 127893911,
        "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
        "name": "Component: DOM",
        "color": "fef2c0",
        "default": false,
        "description": null
      },
      {
        "id": 710722093,
        "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
        "name": "Type: Needs Investigation",
        "color": "fbca04",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2019-07-30T22:42:14Z",
    "updated_at": "2020-04-01T21:19:31Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nHaving an uncontrolled, but _observed_ Radio Group, `onChange` would not be called on the previously selected Radio, only on the newly selected one.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://codesandbox.io/s/elastic-tu-yvytn\r\n\r\n**What is the expected behavior?**\r\n\r\nonChange is called on both `inputs`\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.8.6\r\n\r\nThis issue was fixed in 15.6.2 - https://github.com/facebook/react/issues/12172\r\n\r\n**Workaround**\r\n```js\r\nconst radioStates = new Map();\r\nconst nop = () => null;\r\nexport const Radio = ({inputGroupName, value}) => {\r\n  const [checked, setChecked] = React.useState(false);\r\n\r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    // Radio change events are broken\r\n    // see https://github.com/facebook/react/issues/9988\r\n    // emulating Radio Group controller\r\n    const group = e.target.name;\r\n\r\n    // disable old radio    \r\n    const oldHandler = radioStates.get(group) || nop;\r\n    oldHandler(false); \r\n\r\n    // enable new radio\r\n    radioStates.set(group, setChecked);    \r\n    setChecked(e.target.checked);\r\n  };\r\n\r\n  return (\r\n    <label>\r\n      <input\r\n        type=\"radio\"\r\n        name={inputGroupName}\r\n        value={value}\r\n        onChange={handleInputChange}\r\n      />\r\n    </label>\r\n  );\r\n};\r\n```",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/16161",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/16161/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/16161/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/16161/events",
    "html_url": "https://github.com/facebook/react/issues/16161",
    "id": 470059181,
    "node_id": "MDU6SXNzdWU0NzAwNTkxODE=",
    "number": 16161,
    "title": "onBeforeInput fires after browser updates the DOM for special characters like \"中\" or 😣on Firefox and Edge",
    "user": {
      "login": "Chun-Yang",
      "id": 2827867,
      "node_id": "MDQ6VXNlcjI4Mjc4Njc=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/2827867?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Chun-Yang",
      "html_url": "https://github.com/Chun-Yang",
      "followers_url": "https://api.github.com/users/Chun-Yang/followers",
      "following_url": "https://api.github.com/users/Chun-Yang/following{/other_user}",
      "gists_url": "https://api.github.com/users/Chun-Yang/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Chun-Yang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Chun-Yang/subscriptions",
      "organizations_url": "https://api.github.com/users/Chun-Yang/orgs",
      "repos_url": "https://api.github.com/users/Chun-Yang/repos",
      "events_url": "https://api.github.com/users/Chun-Yang/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Chun-Yang/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 127893911,
        "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
        "name": "Component: DOM",
        "color": "fef2c0",
        "default": false,
        "description": null
      },
      {
        "id": 710722093,
        "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
        "name": "Type: Needs Investigation",
        "color": "fbca04",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2019-07-19T00:07:06Z",
    "updated_at": "2020-04-01T21:19:04Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nonBeforeInput fires after browser updates the DOM for special characters like \"中\" or 😣on Firefox and Edge\r\nhttps://codesandbox.io/s/modest-franklin-muirj  \r\nNOTE: pasting it would not trigger the bug, you have to type it in. You can use control-command-space to open the emoji keyboard on mac\r\n\r\n**What is the expected behavior?**\r\nDOM should not update before onBeforeInput fires\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact: 16.3.1\r\nFirefox: 68.0.1 \r\nMac: 10.14.5\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/16087",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/16087/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/16087/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/16087/events",
    "html_url": "https://github.com/facebook/react/issues/16087",
    "id": 465512106,
    "node_id": "MDU6SXNzdWU0NjU1MTIxMDY=",
    "number": 16087,
    "title": "[Umbrella] Memory Leaks",
    "user": {
      "login": "sebmarkbage",
      "id": 63648,
      "node_id": "MDQ6VXNlcjYzNjQ4",
      "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sebmarkbage",
      "html_url": "https://github.com/sebmarkbage",
      "followers_url": "https://api.github.com/users/sebmarkbage/followers",
      "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
      "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
      "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
      "repos_url": "https://api.github.com/users/sebmarkbage/repos",
      "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2019-07-09T00:17:45Z",
    "updated_at": "2020-09-23T20:27:47Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "This issue is a summary of issues mentioned in https://github.com/facebook/react/pull/15157.\r\n\r\nThere are many different ways to create memory leaks with React since we give you access to the imperative power to do so. Most should be dealt with by clean up / unmount functions.\r\n\r\nSome could be pure React bugs. Some could be related to the lack of clean up of render phase effects. Others could be related to leaks that exists but the way React works makes them larger than they otherwise would've.\r\n\r\n# Resolved\r\n\r\n- [x] Land https://github.com/facebook/react/pull/16115 What patterns are actually covered? It can cut down on a potentially larger leak but is that the whole leak? I could imagine some patterns where this is the complete solution but unclear if it's the complete solution for the patterns that people are actually hitting in practice.\r\n\r\n# Actionable\r\n\r\nI think there are at least two actionable patterns to address from #15157:\r\n\r\n- [ ] If a handle on a DOM node is leaked, it takes the React tree with it. This is a fairly easy mistake to make and the effect is pretty high. What we would do here is special case DOM nodes with refs on them, and always detach their back pointer to the React Fiber, if it was ever fully mounted. We currently traverse these trees anyway when they get deleted. We want to stop doing this for most things but for nodes with a ref it seems minor to special case since they typically need to be invoked with null anyway.\r\n- [ ] Investigate the source of the leak in https://github.com/jonnycornwell/potential_react_leak and fix the source of the problem.\r\n\r\n# Unresolved\r\n\r\n- [ ] Closing over setState/dispatch or class component instances to global state can leak too. Does this pattern warrant special casing too? Under what conditions?\r\n- [ ] It appears Chrome (and maybe other browsers?) may retain inputs due to the Undo Stack (https://github.com/facebook/react/issues/17581)\r\n- [ ] What other issues remain after solving the actionable above? Let's make another pass investigating if people's original issues remain.\r\n\r\n# Won't Fix\r\n\r\n- Side-effects in class constructor, componentWillMount, componentWillReceiveProps, componentWillUpdate, getDerivedStateFrom... and render that store a reference to anything stateful outside React won't be able to clean up. This is [documented](https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html) in the 16.3 release and is a major design decision as part of the concurrent/suspense/error handling strategy.\r\n- Effects/state retained temporarily in alternate fiber likely won't be fixed short term. This is due to how Fiber uses two trees and swaps between them. This can lead to additional values being retained until that tree gets some work on it to swap again. This was observed in the Hooks release and there are some confusing cases where a destroy function can hold onto more memory than expected in the closure. Typically this is solved by using a custom hook since that gets its own scope/closure.\r\n- Props/child trees retained by alternate children. Similarly, children that was just removed can sometimes between retained by the alternate copy of that. That is until that node gets another update on it which clears out the old children. These cases are fairly unusual and fix themselves eventually as the app lives on.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/15989",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/15989/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/15989/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/15989/events",
    "html_url": "https://github.com/facebook/react/issues/15989",
    "id": 460540822,
    "node_id": "MDU6SXNzdWU0NjA1NDA4MjI=",
    "number": 15989,
    "title": "Collapsible Error Dialogs for the Ecosystem",
    "user": {
      "login": "gaearon",
      "id": 810438,
      "node_id": "MDQ6VXNlcjgxMDQzOA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gaearon",
      "html_url": "https://github.com/gaearon",
      "followers_url": "https://api.github.com/users/gaearon/followers",
      "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
      "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
      "organizations_url": "https://api.github.com/users/gaearon/orgs",
      "repos_url": "https://api.github.com/users/gaearon/repos",
      "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gaearon/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710573595,
        "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
        "name": "Component: Developer Tools",
        "color": "fbca04",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      },
      {
        "id": 121709921,
        "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
        "name": "Type: Feature Request",
        "color": "c7def8",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-06-25T17:09:07Z",
    "updated_at": "2020-01-08T19:11:48Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "Spinoff from https://github.com/facebook/react/pull/15797#issuecomment-504782329.\r\n\r\nBoth in React Native and Create React App, redboxes are full screen. But in React, most errors are recoverable. Even with accidental runtime crashes it's useful to look \"underneath\" to see whether your boundary worked as expected, and to have an idea of the end user experience.\r\n\r\nWe could solve this with a collapsed-by-default floating error panel that just shows a list of messages. You can click to expand. We could also use this as an opportunity to unify the RN and web designs.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/15988",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/15988/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/15988/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/15988/events",
    "html_url": "https://github.com/facebook/react/issues/15988",
    "id": 460539339,
    "node_id": "MDU6SXNzdWU0NjA1MzkzMzk=",
    "number": 15988,
    "title": "getDerivedStateFromError for Control Flow",
    "user": {
      "login": "gaearon",
      "id": 810438,
      "node_id": "MDQ6VXNlcjgxMDQzOA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gaearon",
      "html_url": "https://github.com/gaearon",
      "followers_url": "https://api.github.com/users/gaearon/followers",
      "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
      "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
      "organizations_url": "https://api.github.com/users/gaearon/orgs",
      "repos_url": "https://api.github.com/users/gaearon/repos",
      "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gaearon/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 739761016,
        "node_id": "MDU6TGFiZWw3Mzk3NjEwMTY=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler",
        "name": "Component: Reconciler",
        "color": "f9a798",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      },
      {
        "id": 121709921,
        "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
        "name": "Type: Feature Request",
        "color": "c7def8",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-06-25T17:05:13Z",
    "updated_at": "2020-01-08T19:11:47Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "Spinoff from https://github.com/facebook/react/pull/15797#issuecomment-504782329.\r\n\r\nWe might want to offer a way to \"bubble\" control flow up the tree a la Algebraic Effects. `throw Redirect()` is a canonical example. However, we want them to bypass the normal error boundaries. So it probably needs to be a first-class API.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/15879",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/15879/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/15879/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/15879/events",
    "html_url": "https://github.com/facebook/react/issues/15879",
    "id": 455872346,
    "node_id": "MDU6SXNzdWU0NTU4NzIzNDY=",
    "number": 15879,
    "title": "Component delegation to context",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-06-13T17:47:48Z",
    "updated_at": "2019-06-13T17:47:48Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\nReport a bug\r\n\r\n**Introduction/Concept**\r\nI was trying to make a modal package (bootstrap visual as a placeholder) that instead of instancing modals all over the DOM and virtual DOM, would concentrate the data in a holder/controller. This controller would be responsible for providing the modal context and display/hide when necessary.\r\n\r\n**What is the current behavior?**\r\nThe state of the modal content only updates when I recall the show method. \r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\nhttps://codesandbox.io/s/modals-react-i8bdn (Bootstrap is included only to make the modal work)\r\n\r\n**What is the expected behavior?**\r\nThat React would keep the state sync with the counter value.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n16.8.6\r\nAll browsers/OS\r\nNo",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/15739",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/15739/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/15739/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/15739/events",
    "html_url": "https://github.com/facebook/react/issues/15739",
    "id": 448459468,
    "node_id": "MDU6SXNzdWU0NDg0NTk0Njg=",
    "number": 15739,
    "title": "Controlled input makes browser not saving submitted value (for autocomplete)",
    "user": {
      "login": "bootleq",
      "id": 156608,
      "node_id": "MDQ6VXNlcjE1NjYwOA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/156608?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bootleq",
      "html_url": "https://github.com/bootleq",
      "followers_url": "https://api.github.com/users/bootleq/followers",
      "following_url": "https://api.github.com/users/bootleq/following{/other_user}",
      "gists_url": "https://api.github.com/users/bootleq/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bootleq/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bootleq/subscriptions",
      "organizations_url": "https://api.github.com/users/bootleq/orgs",
      "repos_url": "https://api.github.com/users/bootleq/repos",
      "events_url": "https://api.github.com/users/bootleq/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bootleq/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 127893911,
        "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
        "name": "Component: DOM",
        "color": "fef2c0",
        "default": false,
        "description": null
      },
      {
        "id": 40929151,
        "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
        "name": "Type: Bug",
        "color": "b60205",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2019-05-25T12:18:13Z",
    "updated_at": "2020-04-01T22:43:18Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Bug** (behaves different per browser, but generally inconsistent to uncontrolled inputs)\r\n\r\n**Current behavior**\r\nReproduce with https://jsfiddle.net/bootleq/hos4r6qd/\r\n1. Type `a` in *name* field, and `b` in *uncontrolled* field.\r\n2. Submit.\r\n3. Re-run the fiddle.\r\n4. Focus input fields to see if browser \"saves\" previous input.\r\n\r\n**Expected behavior**\r\nBrowser provides `a` suggestion for *name* and `b` for *uncontrolled* field.\r\nControlled and uncontrolled elements should behave the same.\r\n\r\n**Actual result**\r\nUncontrolled input has `b` suggestion, but controlled input (*name*) has **no** suggestion.\r\nTested on Windows 7, Google Chrome 74.0.3729.169.\r\nAnd on Firefox 68.0b4, we can click the *workaround* button before submit, by reset the `value` DOM attribute it behaves as expected.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/15727",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/15727/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/15727/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/15727/events",
    "html_url": "https://github.com/facebook/react/issues/15727",
    "id": 447908849,
    "node_id": "MDU6SXNzdWU0NDc5MDg4NDk=",
    "number": 15727,
    "title": "Root-level performance events",
    "user": {
      "login": "bvaughn",
      "id": 29597,
      "node_id": "MDQ6VXNlcjI5NTk3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bvaughn",
      "html_url": "https://github.com/bvaughn",
      "followers_url": "https://api.github.com/users/bvaughn/followers",
      "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
      "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
      "organizations_url": "https://api.github.com/users/bvaughn/orgs",
      "repos_url": "https://api.github.com/users/bvaughn/repos",
      "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bvaughn/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "bvaughn",
      "id": 29597,
      "node_id": "MDQ6VXNlcjI5NTk3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bvaughn",
      "html_url": "https://github.com/bvaughn",
      "followers_url": "https://api.github.com/users/bvaughn/followers",
      "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
      "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
      "organizations_url": "https://api.github.com/users/bvaughn/orgs",
      "repos_url": "https://api.github.com/users/bvaughn/repos",
      "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bvaughn/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "bvaughn",
        "id": 29597,
        "node_id": "MDQ6VXNlcjI5NTk3",
        "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bvaughn",
        "html_url": "https://github.com/bvaughn",
        "followers_url": "https://api.github.com/users/bvaughn/followers",
        "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
        "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
        "organizations_url": "https://api.github.com/users/bvaughn/orgs",
        "repos_url": "https://api.github.com/users/bvaughn/repos",
        "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bvaughn/received_events",
        "type": "User",
        "site_admin": false
      },
      {
        "login": "sebmarkbage",
        "id": 63648,
        "node_id": "MDQ6VXNlcjYzNjQ4",
        "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sebmarkbage",
        "html_url": "https://github.com/sebmarkbage",
        "followers_url": "https://api.github.com/users/sebmarkbage/followers",
        "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
        "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
        "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
        "repos_url": "https://api.github.com/users/sebmarkbage/repos",
        "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
        "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2019-05-23T23:00:28Z",
    "updated_at": "2020-01-08T19:12:23Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "DevTools (and other perf related infra) would benefit from being able to observer the following:\r\n* Starting (or resuming) work on a root.\r\n* Completing (or yielding) work on a root.\r\n* Committing work for a root.\r\n* A particularly component suspending during a render.\r\n* A suspended (identified by a component stack) promise resolving/retrying.\r\n* An update being scheduled (e.g. `setState`) by a component (identified by a component stack).\r\n* A root-level `render` call being made.\r\n\r\nIn order to fit within the context of the scheduler, we would also want to emit/capture the following events:\r\n* The scheduler is starting to run tasks at a specific priority.\r\n* The scheduler is stopping.\r\n* The scheduler currently has X number of tasks scheduled for each priority. (Maybe this could be logged periodically? Or along with each time we stopped work at a priority?)\r\n\r\nWe could use this info to e.g. draw a timeline in the Profiler UI that showed CPU/IO work breakdown.\r\n\r\nIf we used a mechanism like `performance.mark` to record these events as part of the browser's profiling session, we could also include information about _unscheduled_ JavaScript- as well as other important related concepts, like network requests, paints, etc.\r\n\r\n### Sequencing\r\n- [ ] (ʀᴇᴀᴄᴛ) Add logging to react-reconciler and scheduler packages.\r\n    * e.g. Make sure we are logging start/stop/yield/cancel for renders correctly\r\n    * e.g. Make sure state-updates are being logged with the scheduled priority (not just the current)\r\n    * Research: Make sure performance.mark is actually fast enough to use.\r\n    * Add some basic test coverage to ensure we are marking the expected events in the expected order.\r\n    * (Do not expose component stacks for now).\r\n- [ ] (ʀᴇᴀᴄᴛ) Design API for DevTools to start/stop performance marking.\r\n    * This shouldn’t be on by default, only when we’re actually profiling.\r\n- [ ] (ʀᴇᴀᴄᴛ) Design public API (if we want one) for collecting and logging these new data points.\r\n    * Web-speed would probably like to collect this data.\r\n- [ ] (ᴅᴇᴠᴛᴏᴏʟs) [Parse Chrome](https://docs.google.com/document/d/1CvAClvFfyA5R-PhYUmn5OOQtYMH4h6I0nSsKchNAySU/preview) performance profile JSON output.\r\n    * Filter unsupported event types.\r\n    * Massage data slightly (e.g. combine multiple micro-yields into a single task).\r\n- [ ] (ᴅᴇᴠᴛᴏᴏʟs) Create visualization (chart) UI for data.\r\n    * Turn individual events (or “B” and “E” pairs) into graphics on a timeline.\r\n    * Needs exploratory prototyping / design work.\r\n- [ ] (ᴅᴇᴠᴛᴏᴏʟs) Create zoom-and-pan controls.\r\n    * Something that works similar to Chrome’s Performance tab probably.\r\n    * Enables zooming in on regions of profiling data.\r\n    * Would be nice to build using the interactions stuff Dominic/Nicolas made for Comet\r\n    * Consider not zooming all the way out by default (but setting some max zoom-out cap?)\r\n    * Consider adding windowing logic to avoid rendering things outside of the viewport?\r\n- [ ] (ᴅᴇᴠᴛᴏᴏʟs) Add [Chrome debug protocol](https://chromedevtools.github.io/devtools-protocol/tot/Profiler#method-start) support\r\n    * Requires [“debugger” permission](https://developer.chrome.com/extensions/debugger), but it should be an [optional permission](https://developer.chrome.com/extensions/permissions) that we just-in-time prompt for.\r\n- [ ] (ʀᴇᴀᴄᴛ/ᴅᴇᴠᴛᴏᴏʟs) Initial integration.\r\n    * When user starts profiling React, Chrome’s profiling recorder should also be started.\r\n        * We may want to enable running one without the other? Depends on how much overhead.\r\n    * Also call the React hook to enable performance.mark calls for scheduler and react-dom.\r\n- [ ] (ʀᴇᴀᴄᴛ/ᴅᴇᴠᴛᴏᴏʟs) Improved integration.\r\n    * Add component stack ID to marked “update state” and “suspend” events (e.g. “state-update-normal-123”)\r\n    * Read actual component stack string from DevTools using this ID.\r\n- [ ] (ʀᴇᴀᴄᴛ/ᴅᴇᴠᴛᴏᴏʟs) Explore implementing a queue size visualization\r\n    * Would require a new event or a hook into scheduler to get the current queue size.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/15726",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/15726/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/15726/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/15726/events",
    "html_url": "https://github.com/facebook/react/issues/15726",
    "id": 447903009,
    "node_id": "MDU6SXNzdWU0NDc5MDMwMDk=",
    "number": 15726,
    "title": "Improving the component logging/debugging experience",
    "user": {
      "login": "bvaughn",
      "id": 29597,
      "node_id": "MDQ6VXNlcjI5NTk3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bvaughn",
      "html_url": "https://github.com/bvaughn",
      "followers_url": "https://api.github.com/users/bvaughn/followers",
      "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
      "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
      "organizations_url": "https://api.github.com/users/bvaughn/orgs",
      "repos_url": "https://api.github.com/users/bvaughn/repos",
      "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bvaughn/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      },
      {
        "id": 710375792,
        "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "bvaughn",
      "id": 29597,
      "node_id": "MDQ6VXNlcjI5NTk3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bvaughn",
      "html_url": "https://github.com/bvaughn",
      "followers_url": "https://api.github.com/users/bvaughn/followers",
      "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
      "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
      "organizations_url": "https://api.github.com/users/bvaughn/orgs",
      "repos_url": "https://api.github.com/users/bvaughn/repos",
      "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bvaughn/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "bvaughn",
        "id": 29597,
        "node_id": "MDQ6VXNlcjI5NTk3",
        "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bvaughn",
        "html_url": "https://github.com/bvaughn",
        "followers_url": "https://api.github.com/users/bvaughn/followers",
        "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
        "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
        "organizations_url": "https://api.github.com/users/bvaughn/orgs",
        "repos_url": "https://api.github.com/users/bvaughn/repos",
        "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bvaughn/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": null,
    "comments": 22,
    "created_at": "2019-05-23T22:37:15Z",
    "updated_at": "2020-02-11T08:41:15Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "# Backstory\r\n\r\nDevTools re-renders function components that use hooks in order to build up metadata to display in the selected element panel. This may cause confusion, since these re-renders will trigger breakpoints and cause unexpected console logging (see [this comment](https://github.com/facebook/react-devtools/issues/1215#issuecomment-495382645)). We avoid unnecessary re-renders by caching data (see [PR 289](https://github.com/bvaughn/react-devtools-experimental/pull/289)) but even so this is likely to be a point of confusion.\r\n\r\n# Solution\r\n\r\nIt would be nice if the shallow re-rendering done by DevTools were less observable (e.g. console logs were suppressed to avoid cluttering the console). Breakpoints would still be hit, but that seems like a less common use case. \r\n\r\nWhile we are considering logging, we might also consider if there are additional improvements that could be made, e.g.\r\n\r\n1. Add a new section to the Components tree that shows the most recently logged messages for a given component.\r\n2. Add an option to coalesce render-time logs into a single message that's printed at commit (or error) time to make debug logging easier to read. (Perhaps we could use `console.group` to also indicate the nested structure of these logs.)\r\n\r\nThe proposals below address both (a) collecting per-component logging info and (b) temporarily disabling console logging while re-rendering for inspection purposes.\r\n\r\n# API Proposals\r\n\r\n## 1: Modify built-in `console` methods\r\n\r\nDevTools could spy on the built-in `console` methods and disable the pass-through functionality when re-rendering.\r\n\r\n### Pros\r\n* Requires no effort / code changes for developers to opt in and benefit from this.\r\n* \"Just works\" for advanced methods like `console.group` and `console.table`.\r\n* \"Just works\" for third party libraries that may not even be React-specific.\r\n### Cons\r\n* Feels questionable to modify native browser APIs.\r\n\r\n## 2: Add `React.log` and `React.info` API\r\n\r\nReact will be adding two new logging methods in the upcoming v16.9 release- `React.warn` and `React.error` (see #15170). These methods decorate `console.warn` and `console.error` and append the current component stack to any logged messages. We could extend this pattern and add additional `log` and `info` methods. These APIs could be extended by DevTools as needed.\r\n\r\n### Pros\r\n* Does not require mutating global APIs.\r\n### Cons\r\n* Requires code changes to opt-in.\r\n* Would not cover (or would be a hassle to cover) all `console` methods (e.g. `group`)\r\n* Would not work for third party components or non-React utility code.\r\n\r\n## 3: Add `React.debug(callback)` API\r\n\r\nReact could add a new `debug` API that accepts a callback for general debug operations (most commonly `console` logging, but also potentially breakpoints or other things).\r\n\r\n### Pros\r\n* Works with breakpoints.\r\n* Covers more complex use cases (e.g. pushing to an array for debug purposes).\r\n* Single method rather than mirroring (or spying on) multiple `console` APIs.\r\n### Cons\r\n* Requires code changes to opt-in.\r\n* Requires more boilerplate for simple logging use cases.\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/15658",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/15658/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/15658/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/15658/events",
    "html_url": "https://github.com/facebook/react/pull/15658",
    "id": 444541166,
    "node_id": "MDExOlB1bGxSZXF1ZXN0Mjc5MTgwNTA4",
    "number": 15658,
    "title": "Track which fibers scheduled the current render work",
    "user": {
      "login": "bvaughn",
      "id": 29597,
      "node_id": "MDQ6VXNlcjI5NTk3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bvaughn",
      "html_url": "https://github.com/bvaughn",
      "followers_url": "https://api.github.com/users/bvaughn/followers",
      "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
      "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
      "organizations_url": "https://api.github.com/users/bvaughn/orgs",
      "repos_url": "https://api.github.com/users/bvaughn/repos",
      "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bvaughn/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 8,
    "created_at": "2019-05-15T16:47:08Z",
    "updated_at": "2020-01-23T18:46:45Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/15658",
      "html_url": "https://github.com/facebook/react/pull/15658",
      "diff_url": "https://github.com/facebook/react/pull/15658.diff",
      "patch_url": "https://github.com/facebook/react/pull/15658.patch"
    },
    "body": "This PR introduces the concept of tracking which Fiber(s) schedule work with React. Tracked Fibers are called \"updaters\" and are exposed to DevTools via a `memoizedUpdaters` property on the `ReactFiberRoot`. The implementation of this feature follows a vaguely similar approach as interaction tracing, but does not require reference counting since there is no subscriptions API.\r\n\r\nThis change is in support of a new DevTools Profiler feature (https://github.com/bvaughn/react-devtools-experimental/pull/269) that shows which Fiber(s) scheduled the selected commit.\r\n\r\nAll changes have been gated behind a new feature flag, `enableUpdaterTracking`, which is enabled for Profiling builds by default. We also only track updaters when DevTools has been detected, to avoid doing unnecessary work.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/15520",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/15520/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/15520/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/15520/events",
    "html_url": "https://github.com/facebook/react/issues/15520",
    "id": 437940427,
    "node_id": "MDU6SXNzdWU0Mzc5NDA0Mjc=",
    "number": 15520,
    "title": "Cannot suppress error boundary output using react-test-renderer",
    "user": {
      "login": "mpeyper",
      "id": 23029903,
      "node_id": "MDQ6VXNlcjIzMDI5OTAz",
      "avatar_url": "https://avatars0.githubusercontent.com/u/23029903?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mpeyper",
      "html_url": "https://github.com/mpeyper",
      "followers_url": "https://api.github.com/users/mpeyper/followers",
      "following_url": "https://api.github.com/users/mpeyper/following{/other_user}",
      "gists_url": "https://api.github.com/users/mpeyper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mpeyper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mpeyper/subscriptions",
      "organizations_url": "https://api.github.com/users/mpeyper/orgs",
      "repos_url": "https://api.github.com/users/mpeyper/repos",
      "events_url": "https://api.github.com/users/mpeyper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mpeyper/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 8,
    "created_at": "2019-04-27T12:50:04Z",
    "updated_at": "2020-07-25T05:09:23Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nWhen following @gaearon's example on [how to suppress the error boundary logging in tests expecting errors](https://github.com/facebook/react/issues/11098#issuecomment-412682721), it appears to not be working in 16.8.6 (I'm not sure which versions after 16.4.3 is _has_ worked for).\r\n\r\n[Here is a sandbox.](https://codesandbox.io/s/l5mrl747wm?expanddevtools=1&fontsize=14&module=%2Fsrc%2Fexample.test.js&previewwindow=tests)\r\n\r\nI had to make a change to the `renderError` as it looks like the way codesandbox executes the script cause the `event.error` to be hidden from the code (it just had an object with `isTrusted: true` on it - google led me [here](https://stackoverflow.com/a/44862693/6902543) so I changed it to just count the number of errors).\r\n\r\nI also made a change to be able to use `react-test-renderer` as well as `react-dom` as I'm actually after a way to suppress the error using the test renderer for an [issue raised in `react-hooks-testing-library`](https://github.com/mpeyper/react-hooks-testing-library/issues/50).\r\n\r\nIn my sandbox, you will see the errors\r\n\r\n> The above error occurred in the <Darth> component:\r\n> in Darth\r\n> in TestBoundary\r\n>\r\n> React will try to recreate this component tree from scratch using the error boundary you provided, TestBoundary.\r\n\r\nand\r\n\r\n> The above error occurred in the <ObiWan> component:\r\n> in ObiWan\r\n> in TestBoundary\r\n> \r\n> React will try to recreate this component tree from scratch using the error boundary you provided, TestBoundary.\r\n\r\nget printed to the console, despite the `event.preventDefault()` call.\r\n\r\nThe other main thing to note is that the `react-test-renderer` test does not pass, which implies the error listener is not firing for it, which sort of makes sense to me as it's not using the DOM, so it's not erroring on the window, but my understanding of these things is somewhat limited.\r\n\r\n**What is the expected behavior?**\r\n\r\nAssuming the `expectRenderError`, `TestBoundary` and `handleTopLevelError` code is sufficient to suppress the output as indicated in #11098, I would expect the `react-dom` test to produce no output.\r\n\r\nAssuming the same setup should also work for `react-test-renderer`, I would also expect that test to have no output.\r\n\r\nIf either of these assumptions are wrong, how should one go about suppressing the output in these tests?  \r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n`react`: `16.8.6`\r\n`react-dom`: `16.8.6`\r\n`react-test-renderer`: `16.8.6`",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/15488",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/15488/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/15488/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/15488/events",
    "html_url": "https://github.com/facebook/react/issues/15488",
    "id": 436828895,
    "node_id": "MDU6SXNzdWU0MzY4Mjg4OTU=",
    "number": 15488,
    "title": "eslint-plugin-react-hooks suggests adding a dependency on a function that always changes",
    "user": {
      "login": "sophiebits",
      "id": 6820,
      "node_id": "MDQ6VXNlcjY4MjA=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/6820?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sophiebits",
      "html_url": "https://github.com/sophiebits",
      "followers_url": "https://api.github.com/users/sophiebits/followers",
      "following_url": "https://api.github.com/users/sophiebits/following{/other_user}",
      "gists_url": "https://api.github.com/users/sophiebits/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sophiebits/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sophiebits/subscriptions",
      "organizations_url": "https://api.github.com/users/sophiebits/orgs",
      "repos_url": "https://api.github.com/users/sophiebits/repos",
      "events_url": "https://api.github.com/users/sophiebits/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sophiebits/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1249821345,
        "node_id": "MDU6TGFiZWwxMjQ5ODIxMzQ1",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20ESLint%20Rules",
        "name": "Component: ESLint Rules",
        "color": "f7afdb",
        "default": false,
        "description": ""
      },
      {
        "id": 1776420141,
        "node_id": "MDU6TGFiZWwxNzc2NDIwMTQx",
        "url": "https://api.github.com/repos/facebook/react/labels/Partner",
        "name": "Partner",
        "color": "e4bef7",
        "default": false,
        "description": ""
      },
      {
        "id": 40929153,
        "node_id": "MDU6TGFiZWw0MDkyOTE1Mw==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
        "name": "Type: Enhancement",
        "color": "84b6eb",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2019-04-24T17:50:17Z",
    "updated_at": "2020-01-08T23:42:28Z",
    "closed_at": null,
    "author_association": "COLLABORATOR",
    "active_lock_reason": null,
    "body": "If you write:\r\n\r\n```js\r\nimport React, {useEffect} from 'react';\r\nconst Foo = ({ orgId }) => {\r\n  const fetchOrg = () => {\r\n    alert(orgId);\r\n  };\r\n  useEffect(() => {\r\n    fetchOrg();\r\n  }, [orgId]);\r\n  return <div />;\r\n};\r\n```\r\n\r\nthen you get the error:\r\n\r\n> React Hook useEffect has a missing dependency: 'fetchOrg'. Either include it or remove the dependency array\r\n\r\nBut if you follow that advice and add `fetchOrg` to the dep array, you get:\r\n\r\n> The 'fetchOrg' function makes the dependencies of useEffect Hook (at line 6) change on every render. Move it inside the useEffect callback. Alternatively, wrap the 'fetchOrg' definition into its own useCallback() Hook\r\n\r\nIdeally it could suggest the second solution immediately, instead of suggesting a remediation that it will immediately warn about.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/15486",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/15486/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/15486/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/15486/events",
    "html_url": "https://github.com/facebook/react/issues/15486",
    "id": 436712099,
    "node_id": "MDU6SXNzdWU0MzY3MTIwOTk=",
    "number": 15486,
    "title": "<details> open attribute not synchronised",
    "user": {
      "login": "afenton90",
      "id": 8963736,
      "node_id": "MDQ6VXNlcjg5NjM3MzY=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/8963736?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/afenton90",
      "html_url": "https://github.com/afenton90",
      "followers_url": "https://api.github.com/users/afenton90/followers",
      "following_url": "https://api.github.com/users/afenton90/following{/other_user}",
      "gists_url": "https://api.github.com/users/afenton90/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/afenton90/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/afenton90/subscriptions",
      "organizations_url": "https://api.github.com/users/afenton90/orgs",
      "repos_url": "https://api.github.com/users/afenton90/repos",
      "events_url": "https://api.github.com/users/afenton90/events{/privacy}",
      "received_events_url": "https://api.github.com/users/afenton90/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710722093,
        "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
        "name": "Type: Needs Investigation",
        "color": "fbca04",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 10,
    "created_at": "2019-04-24T13:55:30Z",
    "updated_at": "2020-08-06T04:22:16Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**What is the current behavior?**\r\n`open` attribute does not synchronise with the virtual dom on the `details` element, when using the `details` element as a controlled component. \r\n\r\nI have a codesandbox [here](https://codesandbox.io/s/xl756mk82w) that demonstrates the current behaviour. \r\n\r\n**What is the expected behavior?**\r\nThe `open` attribute stays synchronised with the virtual dom and is added/removed.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact: **`16.8.6`**\r\nBrowser: **Chrome**\r\nDid this work in previous versions of React? **No**\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/15484",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/15484/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/15484/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/15484/events",
    "html_url": "https://github.com/facebook/react/issues/15484",
    "id": 436617632,
    "node_id": "MDU6SXNzdWU0MzY2MTc2MzI=",
    "number": 15484,
    "title": "An error in render() + boundary behaves unexpectedly on ReactDOM.hydrate()",
    "user": {
      "login": "Rendez",
      "id": 61776,
      "node_id": "MDQ6VXNlcjYxNzc2",
      "avatar_url": "https://avatars0.githubusercontent.com/u/61776?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Rendez",
      "html_url": "https://github.com/Rendez",
      "followers_url": "https://api.github.com/users/Rendez/followers",
      "following_url": "https://api.github.com/users/Rendez/following{/other_user}",
      "gists_url": "https://api.github.com/users/Rendez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Rendez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Rendez/subscriptions",
      "organizations_url": "https://api.github.com/users/Rendez/orgs",
      "repos_url": "https://api.github.com/users/Rendez/repos",
      "events_url": "https://api.github.com/users/Rendez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Rendez/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710332294,
        "node_id": "MDU6TGFiZWw3MTAzMzIyOTQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Server%20Rendering",
        "name": "Component: Server Rendering",
        "color": "d4c5f9",
        "default": false,
        "description": null
      },
      {
        "id": 40929151,
        "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
        "name": "Type: Bug",
        "color": "b60205",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2019-04-24T10:27:18Z",
    "updated_at": "2020-04-18T07:08:05Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "From the React.org docs:\r\n> Error boundaries preserve the declarative nature of React, [...] somewhere deep in the tree, **it will still correctly propagate to the closest error boundary.**\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nI am not sure if this is a bug or intended behavior, because it only happens with `ReactDOM.hydrate` when an error is thrown only within `render`.\r\n\r\n**What is the current behavior?**\r\nIf an error is thrown in the `render()` method of any component, the error boundary at any given top-level renders its fallback exactly where that component is, instead of where the error boundary is defined.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\nhttps://codesandbox.io/s/74kmwk3o1j\r\n\r\n**What is the expected behavior?**\r\nJust like it `ReactDOM.hydrate` behaves if the error happens in `componentDidMount`, the error boundary's fallback should be rendered where the error boundary element is actually declared.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nv16.8.6 on Chrome, haven't tested previous versions, but I think to remember this working correctly when we upgraded to v16 and added our top-level, page boundary.\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/15446",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/15446/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/15446/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/15446/events",
    "html_url": "https://github.com/facebook/react/issues/15446",
    "id": 434847956,
    "node_id": "MDU6SXNzdWU0MzQ4NDc5NTY=",
    "number": 15446,
    "title": "Events before Client Side Hydration",
    "user": {
      "login": "aralroca",
      "id": 13313058,
      "node_id": "MDQ6VXNlcjEzMzEzMDU4",
      "avatar_url": "https://avatars3.githubusercontent.com/u/13313058?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aralroca",
      "html_url": "https://github.com/aralroca",
      "followers_url": "https://api.github.com/users/aralroca/followers",
      "following_url": "https://api.github.com/users/aralroca/following{/other_user}",
      "gists_url": "https://api.github.com/users/aralroca/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aralroca/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aralroca/subscriptions",
      "organizations_url": "https://api.github.com/users/aralroca/orgs",
      "repos_url": "https://api.github.com/users/aralroca/repos",
      "events_url": "https://api.github.com/users/aralroca/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aralroca/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1775955521,
        "node_id": "MDU6TGFiZWwxNzc1OTU1NTIx",
        "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Backlog",
        "name": "Resolution: Backlog",
        "color": "9dd1e8",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 22,
    "created_at": "2019-04-18T16:09:41Z",
    "updated_at": "2020-10-01T12:33:47Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Recently I detected a problem using React in SSR. Maybe is quite obvious, but all the JavaScript events that are fired before the JavaScript is loaded, are lost...\r\n\r\nThis is something normal. The JS is not there yet... Ok. However, I expect to have some utility to do some exceptions.\r\n\r\nI'm going to try to explain my case:\r\n\r\nI'm using an image, and in the event `onError`, I want to change the src to render a fallback image.\r\n\r\n```jsx\r\nfunction Img(props) {\r\n  return (\r\n    <img {...props} onError={e => { e.target.src = fallbackSrc } } />\r\n  )\r\n}\r\n```\r\n\r\nNevertheless, this code loaded from SSR, is working \"sometimes\"... I guess that this \"sometimes\" is because if the event is fired before the client side hydration. Is not catched by my JS. And the `e => e.target.src = fallbackSrc` is never executed. However, if the JS is loaded faster than the onError event, is catched, and is rendering the fallback image as I expected.\r\n\r\nI want to propose some utility to do sometimes some exceptions, and render the JS inline on the first render. Perhaps, adding some extra config in `ReactDOM.hydrate`? I dunno... \r\n\r\nOr maybe someone can help me providing any tip in order to fix this?\r\n\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/15439",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/15439/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/15439/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/15439/events",
    "html_url": "https://github.com/facebook/react/issues/15439",
    "id": 434688004,
    "node_id": "MDU6SXNzdWU0MzQ2ODgwMDQ=",
    "number": 15439,
    "title": "act() should warn in testing frameworks besides jest ",
    "user": {
      "login": "threepointone",
      "id": 18808,
      "node_id": "MDQ6VXNlcjE4ODA4",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18808?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/threepointone",
      "html_url": "https://github.com/threepointone",
      "followers_url": "https://api.github.com/users/threepointone/followers",
      "following_url": "https://api.github.com/users/threepointone/following{/other_user}",
      "gists_url": "https://api.github.com/users/threepointone/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/threepointone/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/threepointone/subscriptions",
      "organizations_url": "https://api.github.com/users/threepointone/orgs",
      "repos_url": "https://api.github.com/users/threepointone/repos",
      "events_url": "https://api.github.com/users/threepointone/events{/privacy}",
      "received_events_url": "https://api.github.com/users/threepointone/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 139734344,
        "node_id": "MDU6TGFiZWwxMzk3MzQzNDQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Test%20Utils",
        "name": "Component: Test Utils",
        "color": "eb6420",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      },
      {
        "id": 121709921,
        "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
        "name": "Type: Feature Request",
        "color": "c7def8",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-04-18T09:59:04Z",
    "updated_at": "2020-01-08T19:12:59Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nfeature request\r\n\r\n**What is the current behavior?**\r\n\r\nThe warnings for missing act() warnings around updates only happen in jest. \r\n\r\n**What is the expected behavior?**\r\n\r\nWe should support other test runners/frameworks as well (like jasmine, karma, etc)\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.8.0+",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/15418",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/15418/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/15418/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/15418/events",
    "html_url": "https://github.com/facebook/react/issues/15418",
    "id": 433157743,
    "node_id": "MDU6SXNzdWU0MzMxNTc3NDM=",
    "number": 15418,
    "title": "Field type=\"email\" with multiple attribute cursor jumps to start",
    "user": {
      "login": "jordyvg",
      "id": 20287756,
      "node_id": "MDQ6VXNlcjIwMjg3NzU2",
      "avatar_url": "https://avatars2.githubusercontent.com/u/20287756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jordyvg",
      "html_url": "https://github.com/jordyvg",
      "followers_url": "https://api.github.com/users/jordyvg/followers",
      "following_url": "https://api.github.com/users/jordyvg/following{/other_user}",
      "gists_url": "https://api.github.com/users/jordyvg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jordyvg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jordyvg/subscriptions",
      "organizations_url": "https://api.github.com/users/jordyvg/orgs",
      "repos_url": "https://api.github.com/users/jordyvg/repos",
      "events_url": "https://api.github.com/users/jordyvg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jordyvg/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 127893911,
        "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
        "name": "Component: DOM",
        "color": "fef2c0",
        "default": false,
        "description": null
      },
      {
        "id": 40929151,
        "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
        "name": "Type: Bug",
        "color": "b60205",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2019-04-15T08:32:08Z",
    "updated_at": "2020-08-17T15:33:58Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nWhile adding multiple comma separated email addresses the cursor will jump to te beginning the input field. First i thought it was a [Formik](https://github.com/jaredpalmer/formik/issues/1428) issue, but it seems to be a React one.\r\n\r\nExample pure React: https://codesandbox.io/embed/0y06zo7l8p\r\nExample React with Formik: https://codesandbox.io/embed/k57zw7wz5\r\nMDN docs: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/email#multiple\r\n\r\n**What is the expected behavior?**\r\nCursor stays on current position.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nChrome 73, Safari 12.1, Opera 60.0\r\nReact 16.7.0\r\n\r\nMaybe #14551 related?\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/15401",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/15401/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/15401/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/15401/events",
    "html_url": "https://github.com/facebook/react/pull/15401",
    "id": 432683019,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MjcwMTAzOTcx",
    "number": 15401,
    "title": "Double compress using GCC",
    "user": {
      "login": "sebmarkbage",
      "id": 63648,
      "node_id": "MDQ6VXNlcjYzNjQ4",
      "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sebmarkbage",
      "html_url": "https://github.com/sebmarkbage",
      "followers_url": "https://api.github.com/users/sebmarkbage/followers",
      "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
      "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
      "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
      "repos_url": "https://api.github.com/users/sebmarkbage/repos",
      "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 8,
    "created_at": "2019-04-12T18:07:56Z",
    "updated_at": "2020-01-09T21:00:29Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/15401",
      "html_url": "https://github.com/facebook/react/pull/15401",
      "diff_url": "https://github.com/facebook/react/pull/15401.diff",
      "patch_url": "https://github.com/facebook/react/pull/15401.patch"
    },
    "body": "Let's see what sizebot says about this.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/15349",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/15349/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/15349/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/15349/events",
    "html_url": "https://github.com/facebook/react/pull/15349",
    "id": 430280240,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MjY4MjAxODAw",
    "number": 15349,
    "title": "[new] [react-is] add `typeOfElementType`, extracted from `typeOf`",
    "user": {
      "login": "ljharb",
      "id": 45469,
      "node_id": "MDQ6VXNlcjQ1NDY5",
      "avatar_url": "https://avatars1.githubusercontent.com/u/45469?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ljharb",
      "html_url": "https://github.com/ljharb",
      "followers_url": "https://api.github.com/users/ljharb/followers",
      "following_url": "https://api.github.com/users/ljharb/following{/other_user}",
      "gists_url": "https://api.github.com/users/ljharb/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ljharb/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ljharb/subscriptions",
      "organizations_url": "https://api.github.com/users/ljharb/orgs",
      "repos_url": "https://api.github.com/users/ljharb/repos",
      "events_url": "https://api.github.com/users/ljharb/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ljharb/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 12,
    "created_at": "2019-04-08T06:41:50Z",
    "updated_at": "2020-10-12T02:02:25Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/15349",
      "html_url": "https://github.com/facebook/react/pull/15349",
      "diff_url": "https://github.com/facebook/react/pull/15349.diff",
      "patch_url": "https://github.com/facebook/react/pull/15349.patch"
    },
    "body": "By extracting this functionality, I'll be able to simplify the logic in enzyme [here](https://github.com/airbnb/enzyme/blob/master/packages/enzyme-adapter-react-16/src/ReactSixteenAdapter.js#L320-L322) by comparing directly to the type rather than needing to make a fake element.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/15344",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/15344/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/15344/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/15344/events",
    "html_url": "https://github.com/facebook/react/issues/15344",
    "id": 430089125,
    "node_id": "MDU6SXNzdWU0MzAwODkxMjU=",
    "number": 15344,
    "title": "useReducer's dispatch should return a promise which resolves once its action has been delivered",
    "user": {
      "login": "pelotom",
      "id": 128019,
      "node_id": "MDQ6VXNlcjEyODAxOQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/128019?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pelotom",
      "html_url": "https://github.com/pelotom",
      "followers_url": "https://api.github.com/users/pelotom/followers",
      "following_url": "https://api.github.com/users/pelotom/following{/other_user}",
      "gists_url": "https://api.github.com/users/pelotom/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pelotom/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pelotom/subscriptions",
      "organizations_url": "https://api.github.com/users/pelotom/orgs",
      "repos_url": "https://api.github.com/users/pelotom/repos",
      "events_url": "https://api.github.com/users/pelotom/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pelotom/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1109410193,
        "node_id": "MDU6TGFiZWwxMTA5NDEwMTkz",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Hooks",
        "name": "Component: Hooks",
        "color": "c2f27b",
        "default": false,
        "description": ""
      },
      {
        "id": 121709921,
        "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
        "name": "Type: Feature Request",
        "color": "c7def8",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 32,
    "created_at": "2019-04-07T00:04:45Z",
    "updated_at": "2020-10-13T08:16:06Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "(This is a spinoff from [this thread](https://github.com/facebook/react/issues/15240).)\r\n\r\nIt's sometimes useful to be able to dispatch an action from within an async function, wait for the action to transform the state, and then use the resulting state to determine possible further async work to do. For this purpose it's possible to define a `useNext` hook which returns a promise of the next value:\r\n\r\n```js\r\nfunction useNext(value) {\r\n  const valueRef = useRef(value);\r\n  const resolvesRef = useRef([]);\r\n  useEffect(() => {\r\n    if (valueRef.current !== value) {\r\n      for (const resolve of resolvesRef.current) {\r\n        resolve(value);\r\n      }\r\n      resolvesRef.current = [];\r\n      valueRef.current = value;\r\n    }\r\n  }, [value]);\r\n  return () => new Promise(resolve => {\r\n    resolvesRef.current.push(resolve);\r\n  });\r\n}\r\n```\r\n\r\nand use it like so:\r\n\r\n```js\r\nconst nextState = useNext(state);\r\n\r\nuseEffect(() => {\r\n  fetchStuff(state);\r\n}, []);\r\n\r\nasync function fetchStuff(state) {\r\n  dispatch({ type: 'START_LOADING' });\r\n  \r\n  let data = await xhr.post('/api/data');\r\n  dispatch({ type: 'RECEIVE_DATA', data });\r\n  \r\n  // get the new state after the action has taken effect\r\n  state = await nextState();\r\n\r\n  if (!state.needsMoreData) return;\r\n\r\n  data = await xhr.post('/api/more-data');\r\n  dispatch({ type: 'RECEIVE_MORE_DATA', data });\r\n}\r\n```\r\n\r\n\r\nThis is all well and good, but `useNext` has a fundamental limitation: it only resolves promises when the state _changes_... so if dispatching an action resulted in the same state (thus causing `useReducer` to [bail out](https://reactjs.org/docs/hooks-reference.html#bailing-out-of-a-state-update)), our async function would hang waiting for an update that wasn't coming.\r\n\r\nWhat we _really_ want here is a way to obtain the state after the last dispatch has taken effect, whether or not it resulted in the state changing. Currently I'm not aware of a foolproof way to implement this in userland (happy to be corrected on this point). But it seems like it could be a very useful feature of `useReducer`'s `dispatch` function itself to return a promise of the state resulting from reducing by the action. Then we could rewrite the preceding example as\r\n\r\n```js\r\nuseEffect(() => {\r\n  fetchStuff(state);\r\n}, []);\r\n\r\nasync function fetchStuff(state) {\r\n  dispatch({ type: 'START_LOADING' });\r\n  \r\n  let data = await xhr.post('/api/data');\r\n  state = await dispatch({ type: 'RECEIVE_DATA', data });\r\n  \r\n  if (!state.needsMoreData) return;\r\n\r\n  data = await xhr.post('/api/more-data');\r\n  dispatch({ type: 'RECEIVE_MORE_DATA', data });\r\n}\r\n```\r\n\r\n## EDIT\r\n\r\nThinking about this a little more, the promise returned from `dispatch` doesn't need to carry the next state, because there are other situations where you want to obtain the latest state too and we can already solve that with a simple ref. The narrowly-defined problem is: we need to be able to wait until after a `dispatch()` has taken affect. So `dispatch` could just return a `Promise<void>`:\r\n\r\n```js\r\nconst stateRef = useRef(state);\r\nuseEffect(() => {\r\n  stateRef.current = state;\r\n}, [state]);\r\n\r\nuseEffect(() => {\r\n  fetchStuff();\r\n}, []);\r\n\r\nasync function fetchStuff() {\r\n  dispatch({ type: 'START_LOADING' });\r\n  \r\n  let data = await xhr.post('/api/data');\r\n\r\n  // can look at current state here too\r\n  if (!stateRef.current.shouldReceiveData) return;\r\n  \r\n  await dispatch({ type: 'RECEIVE_DATA', data });\r\n\r\n  if (!stateRef.current.needsMoreData) return;\r\n\r\n  data = await xhr.post('/api/more-data');\r\n  dispatch({ type: 'RECEIVE_MORE_DATA', data });\r\n}\r\n```",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/15317",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/15317/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/15317/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/15317/events",
    "html_url": "https://github.com/facebook/react/issues/15317",
    "id": 429168725,
    "node_id": "MDU6SXNzdWU0MjkxNjg3MjU=",
    "number": 15317,
    "title": "[Concurrent] Safely disposing uncommitted objects",
    "user": {
      "login": "FredyC",
      "id": 1096340,
      "node_id": "MDQ6VXNlcjEwOTYzNDA=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1096340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/FredyC",
      "html_url": "https://github.com/FredyC",
      "followers_url": "https://api.github.com/users/FredyC/followers",
      "following_url": "https://api.github.com/users/FredyC/following{/other_user}",
      "gists_url": "https://api.github.com/users/FredyC/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/FredyC/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/FredyC/subscriptions",
      "organizations_url": "https://api.github.com/users/FredyC/orgs",
      "repos_url": "https://api.github.com/users/FredyC/repos",
      "events_url": "https://api.github.com/users/FredyC/events{/privacy}",
      "received_events_url": "https://api.github.com/users/FredyC/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710375792,
        "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 74,
    "created_at": "2019-04-04T09:17:29Z",
    "updated_at": "2020-11-04T16:18:12Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "## How to safely keep a reference to uncommitted objects and dispose of them on unmount? \r\n\r\nFor a MobX world, we are trying to [prepare for the Concurrent mode](https://github.com/mobxjs/mobx-react-lite/issues/53). In short, there is a [Reaction object being created](https://github.com/mobxjs/mobx-react-lite/blob/231be100e6ba458f40642adb9f0bc77aa4d366ce/src/useObserver.ts#L32\r\n) to track for observables and it is stored within `useRef`.\r\n\r\nThe major problem is, that we can't just `useEffect` to create it in a safe way later. We need it to start tracking the observables on a first render otherwise we might miss some updates and cause inconsistent behavior.\r\n\r\nWe do have a [semi-working solution](https://github.com/mobxjs/mobx-react-lite/pull/121), basically, a custom made garbage collector based on `setTimeout`. However, it's unreliable as it can accidentally dispose of Reactions that are actually being used but weren't committed yet.\r\n\r\nWould love to hear we are overlooking some obvious solution there.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/15293",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/15293/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/15293/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/15293/events",
    "html_url": "https://github.com/facebook/react/issues/15293",
    "id": 428032141,
    "node_id": "MDU6SXNzdWU0MjgwMzIxNDE=",
    "number": 15293,
    "title": "Is it recommended to fetch in effect or should it be imperative",
    "user": {
      "login": "otakustay",
      "id": 639549,
      "node_id": "MDQ6VXNlcjYzOTU0OQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/639549?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/otakustay",
      "html_url": "https://github.com/otakustay",
      "followers_url": "https://api.github.com/users/otakustay/followers",
      "following_url": "https://api.github.com/users/otakustay/following{/other_user}",
      "gists_url": "https://api.github.com/users/otakustay/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/otakustay/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/otakustay/subscriptions",
      "organizations_url": "https://api.github.com/users/otakustay/orgs",
      "repos_url": "https://api.github.com/users/otakustay/repos",
      "events_url": "https://api.github.com/users/otakustay/events{/privacy}",
      "received_events_url": "https://api.github.com/users/otakustay/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1109410193,
        "node_id": "MDU6TGFiZWwxMTA5NDEwMTkz",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Hooks",
        "name": "Component: Hooks",
        "color": "c2f27b",
        "default": false,
        "description": ""
      },
      {
        "id": 710375792,
        "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2019-04-02T05:34:28Z",
    "updated_at": "2019-04-04T11:08:26Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "In out team we encountered a explosive discussion on how we should handle the relationship of a fetch and its parameters, after searching in community I still find various solutions to this, I'd like to raise this discussion to find a best practive.\r\n\r\n## Background\r\n\r\nSuppose we have a simple list view like:\r\n\r\n<img width=\"687\" alt=\"Jietu20190402-130206@2x\" src=\"https://user-images.githubusercontent.com/639549/55377435-87268b80-5547-11e9-97a8-313a5713ced3.png\">\r\n\r\nWhenever user types keyword in textbox and clicks \"Search\" button, or they change the page number, we should fetch a new list from remote and render it in table.\r\n\r\nWe use redux to manage global state of this simple app, the store is structured as:\r\n\r\n```js\r\n{\r\n    filter: '',\r\n    pageIndex: 0,\r\n    results: []\r\n}\r\n```\r\n\r\nWe developed a total of 3 solutions to demonstrate how the change of `filter` and `pageIndex` should cause a fetch of `results`.\r\n\r\n## Use effect and separation of view and logic\r\n\r\nThis is the first demo: https://codesandbox.io/s/20x1m39w00\r\n\r\nIn this implementation we tried to:\r\n\r\n1. Utilize `useEffect` to trigger a fetch when any parameter changes.\r\n2. Do not pass any parameter as prop to `components/List` component.\r\n\r\nIn my point of view, I like this solution best because:\r\n\r\n1. It have a very clear separation of view and logic, `components/List` does not receive any redundant props such as `filter` or `pageIndex`.\r\n2. It theoretically treat a callback prop as a normal one, make it a dependency of `useEffect`.\r\n3. It works in a **reactive** way, which means \"we trigger a fetch not because the action taken from user, only because the change of state\".\r\n\r\nStill we have concerns about it:\r\n\r\n1. It obviously triggers more render and updates because change of `filter` or `pageIndex` does not dispatch `FETCH_RESULTS` immediately, this cause a sync dispatch in effect which we previously avoided by `no-set-state-did-update` rule.\r\n2. We create a state update from another state update, this \"chaining\" is not clear enough for developers and may cause unwanted infinite loop.\r\n\r\n## Use effect and params together\r\n\r\nThe second demo is much like the first one: https://codesandbox.io/s/54o1rjvyv4\r\n\r\nThe only change is we pass `filter` and `pageIndex` to `components/List`, in this case we believe **effect is a part of component** so that every dependencies used to form an effect should be passed as prop.\r\n\r\nThis solution gives a more clear view of what is used to fetch data in `components/List`, this is \r\n a highly adopted solution in community, however we're not sure this is recommended officially.\r\n\r\n## Imperative action to fetch data\r\n\r\nAs opposed to previous, this is our third demo: https://codesandbox.io/s/p5yv48x97x\r\n\r\nIn this solution we changed our thought and implement the app in a more \"redux way\":\r\n\r\n1. We trigger the fetch on user interactions, either click on \"Search\" button or change the page number, however either interaction only provides its own parameter, we don't provide `pageIndex` when \"Search\" button is clicked.\r\n2. We have a thunk which computes a new parameter object based on current state using `getState()` function, a `FETCH_RESULTS` action is dispatched.\r\n3. We have several reducers to observe `FETCH_RESULTS` action and updates corresponding parameter in global state.\r\n4. Fetched list is connected to `components/List` component, this component now is a pure presentational component, no lifecycle effect is involved.\r\n5. To solve the first fetch when application is mounted, we create an `containers/App` container component.\r\n\r\nBy doing these we eliminated the \"chaining state update\" issue, however it introduces several concerns:\r\n\r\n1. If we add more user interactions in the future, the `loadResults` thunk could be more and more complex.\r\n2. The use of `getState` in `redux-thunk` is not highly recommended in community, we found some articles stating that developers should avoid to use it in most cases.\r\n3. We can't explain the exist of the `containers/App` container only to trigger a fetch on mount, thee `useEffect` take no dependencies and `exhaustive-deps` rules complains about it, not paring mount and update is also a big uncomfortable point to us.\r\n4. Trigger fetch from user interactions is what we called \"imperative\", we're confused about whether a reactive framework like react recommends imperative programming.\r\n\r\n------\r\n\r\nSince we are not able to get a conclusion for a very long time, we decide to raise this issue for more discussion to find a better solution to these very common use cases.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/15278",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/15278/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/15278/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/15278/events",
    "html_url": "https://github.com/facebook/react/issues/15278",
    "id": 427453460,
    "node_id": "MDU6SXNzdWU0Mjc0NTM0NjA=",
    "number": 15278,
    "title": "useMemo / useCallback cache busting opt out",
    "user": {
      "login": "alexreardon",
      "id": 2182637,
      "node_id": "MDQ6VXNlcjIxODI2Mzc=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/2182637?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexreardon",
      "html_url": "https://github.com/alexreardon",
      "followers_url": "https://api.github.com/users/alexreardon/followers",
      "following_url": "https://api.github.com/users/alexreardon/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexreardon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexreardon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexreardon/subscriptions",
      "organizations_url": "https://api.github.com/users/alexreardon/orgs",
      "repos_url": "https://api.github.com/users/alexreardon/repos",
      "events_url": "https://api.github.com/users/alexreardon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexreardon/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710375792,
        "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 32,
    "created_at": "2019-03-31T22:12:07Z",
    "updated_at": "2020-01-04T09:45:48Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "According to the `React` docs, `useMemo` and `useCallback` are subject to cache purging:\r\n\r\n> You may rely on useMemo as a performance optimization, not as a semantic guarantee. In the future, React may choose to “forget” some previously memoized values and recalculate them on next render, e.g. to free memory for offscreen components. Write your code so that it still works without useMemo — and then add it to optimize performance. [source](https://reactjs.org/docs/hooks-reference.html#usememo)\r\n\r\nI am working on moving `react-beautiful-dnd` over to using hooks https://github.com/atlassian/react-beautiful-dnd/issues/871. I have the whole thing working and tested 👍 \r\n\r\nIt leans quite heavily on `useMemo` and `useCallback` right now. If the memoization cache for is cleared for a dragging item, the result will be a cancelled drag. This is not good. \r\n\r\nMy understanding is that `useMemo` and `useCallback` are currently *not* subject to cache purging based on this language:\r\n\r\n> In the **future**, React may choose to “forget”\r\n\r\n**Request 1**: Is it possible to opt-out of this cache purging? Perhaps a third `options` argument to `useMemo` and `useCallback`:\r\n\r\n```js\r\nconst value = useMemo(() => ({ hello: 'world' }), [], { usePersistantCache: true });\r\n```\r\n\r\n(Naming up for grabs, but this is just the big idea)\r\n\r\nA work around is to use a custom memoization toolset such as a `useMemoOne` which reimplements `useMemo` and `useCallback` just using `ref`s [see example](https://twitter.com/alexandereardon/status/1108488559881641986)\r\n\r\nI am keen to avoid the work around if possible.\r\n\r\n**Request 2**: While *request 1* is favourable, it would be good to know the exact conditions in which the memoization caches are purged",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/15274",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/15274/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/15274/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/15274/events",
    "html_url": "https://github.com/facebook/react/pull/15274",
    "id": 427337645,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MjY1OTc0OTEx",
    "number": 15274,
    "title": "Remove Flow types from Scheduler and Tracing",
    "user": {
      "login": "sebmarkbage",
      "id": 63648,
      "node_id": "MDQ6VXNlcjYzNjQ4",
      "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sebmarkbage",
      "html_url": "https://github.com/sebmarkbage",
      "followers_url": "https://api.github.com/users/sebmarkbage/followers",
      "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
      "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
      "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
      "repos_url": "https://api.github.com/users/sebmarkbage/repos",
      "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2019-03-30T23:07:00Z",
    "updated_at": "2020-01-08T19:03:47Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/15274",
      "html_url": "https://github.com/facebook/react/pull/15274",
      "diff_url": "https://github.com/facebook/react/pull/15274.diff",
      "patch_url": "https://github.com/facebook/react/pull/15274.patch"
    },
    "body": "The idea is to make the scheduler as unopinionated and uncontroversial as possible.\r\n\r\nCurrently it's a bit of a mix and match and also use our build tooling. This keeps spreading.\r\n\r\nLet's make a decision here either way and stick to it.\r\n\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/15255",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/15255/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/15255/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/15255/events",
    "html_url": "https://github.com/facebook/react/issues/15255",
    "id": 427099499,
    "node_id": "MDU6SXNzdWU0MjcwOTk0OTk=",
    "number": 15255,
    "title": "Profiler marks",
    "user": {
      "login": "bvaughn",
      "id": 29597,
      "node_id": "MDQ6VXNlcjI5NTk3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bvaughn",
      "html_url": "https://github.com/bvaughn",
      "followers_url": "https://api.github.com/users/bvaughn/followers",
      "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
      "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
      "organizations_url": "https://api.github.com/users/bvaughn/orgs",
      "repos_url": "https://api.github.com/users/bvaughn/repos",
      "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bvaughn/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710573595,
        "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
        "name": "Component: Developer Tools",
        "color": "fbca04",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      },
      {
        "id": 40929153,
        "node_id": "MDU6TGFiZWw0MDkyOTE1Mw==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
        "name": "Type: Enhancement",
        "color": "84b6eb",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "bvaughn",
      "id": 29597,
      "node_id": "MDQ6VXNlcjI5NTk3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bvaughn",
      "html_url": "https://github.com/bvaughn",
      "followers_url": "https://api.github.com/users/bvaughn/followers",
      "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
      "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
      "organizations_url": "https://api.github.com/users/bvaughn/orgs",
      "repos_url": "https://api.github.com/users/bvaughn/repos",
      "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bvaughn/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "bvaughn",
        "id": 29597,
        "node_id": "MDQ6VXNlcjI5NTk3",
        "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bvaughn",
        "html_url": "https://github.com/bvaughn",
        "followers_url": "https://api.github.com/users/bvaughn/followers",
        "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
        "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
        "organizations_url": "https://api.github.com/users/bvaughn/orgs",
        "repos_url": "https://api.github.com/users/bvaughn/repos",
        "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bvaughn/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2019-03-29T17:33:27Z",
    "updated_at": "2020-02-11T03:48:34Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "Can we expose a lighter weight set of Performance \"marks\" for people consuming browser Performance tracing? e.g. when a particular `Profiler` commits. This should be a lot less heavyweight than the full mark-and-measure stuff.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/15240",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/15240/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/15240/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/15240/events",
    "html_url": "https://github.com/facebook/react/issues/15240",
    "id": 426597099,
    "node_id": "MDU6SXNzdWU0MjY1OTcwOTk=",
    "number": 15240,
    "title": "Dancing between state and effects - a real-world use case",
    "user": {
      "login": "jlongster",
      "id": 17031,
      "node_id": "MDQ6VXNlcjE3MDMx",
      "avatar_url": "https://avatars2.githubusercontent.com/u/17031?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jlongster",
      "html_url": "https://github.com/jlongster",
      "followers_url": "https://api.github.com/users/jlongster/followers",
      "following_url": "https://api.github.com/users/jlongster/following{/other_user}",
      "gists_url": "https://api.github.com/users/jlongster/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jlongster/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jlongster/subscriptions",
      "organizations_url": "https://api.github.com/users/jlongster/orgs",
      "repos_url": "https://api.github.com/users/jlongster/repos",
      "events_url": "https://api.github.com/users/jlongster/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jlongster/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710375792,
        "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 30,
    "created_at": "2019-03-28T16:41:29Z",
    "updated_at": "2019-10-08T21:39:01Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "I started this as a gist but Dan mentioned that this would be a good discussion issue so here goes. I've been writing with and refactoring code into hooks for a while now. For 95% of code, they are great and very straight-forward once you get the basic idea. There are still a few more complex cases where I struggle with the right answer though. This is an attempt to explain them.\r\n\r\n## The use case\r\n\r\nThis is a real-world use case from an app I'm building: interacting with a list items. I've simplified the examples into codesandboxes though to illustrate the basic idea.\r\n\r\nHere's the first one: https://codesandbox.io/s/lx55q0v3qz. It renders a list of items, and if you click on any of them, an editable input will appear to edit it (it doesn't save yet). The colored box on the right will change whenever an item rerenders.\r\n\r\nIf you click around in the items, you can see that when changing the edited item, all items rerender. But the `Row` component is wrapped with `React.memo`! They all rerender because the `onEdit` is new each time the app renders, causing all items to rerender.\r\n\r\n## Maintaining callback identity\r\n\r\nWe want `onEdit` to be same function for all future renders. In this case, it's easy because it doesn't depend on anything. We can simply wrap it in `useCallback` with an empty dependencies array:\r\n\r\n```js\r\n  let onEdit = useCallback(id => {\r\n    setEditingId(id);\r\n  }, []);\r\n```\r\n\r\nNow, you can see clicking around only rerenders the necessary items (only those colors change): https://codesandbox.io/s/k33klz68yr\r\n\r\n## Implementing saving\r\n\r\nWe're missing a crucial feature: after editing an item, on blur it should save the value. In my app the way the \"save\" event gets triggered is different, but doing it on blur is fine here.\r\n\r\nTo do this, we create an `onSave` callback in the app and pass it down to each item, which calls it on blur with the new value. `onSave` takes a new item and updates the items array with the new item and sets the `items` state.\r\n\r\nHere is it running: https://codesandbox.io/s/yvl79qj5vj\r\n\r\nYou'll notice that all items are rerendering again when saving. The list rerenders twice when you click another item: first when you click down and the input loses focus, and then again to edit a different item. So all the colors change once, and then only the editing rows color changes again.\r\n\r\nThe reason all of them are rerendering is because `onSave` is now a new callback every render. But we can't fix it with the same technique as `onEdit` because it depends on `items` - so we *have* to create a new callback which closes over `items` otherwise you'd lose previous edits. This is the \"callbacks are recreated too many times\" problem with hooks.\r\n\r\nOne solution is to switch to `useReducer`. Here's that implementation:\r\nhttps://codesandbox.io/s/nrq5y77kj0\r\n\r\nNote that I still wrap up the reducer into `onEdit` and `onSave` callbacks that are passed down to the row. I find passing callbacks to be clearer in most cases, and works with any components in the ecosystem that already expect callbacks. We can simply use `useCallback` with no dependencies though since `dispatch` is always the same.\r\n\r\nNote how that even when saving an item, only the necessary rows rerender.\r\n\r\n## The difference between event handlers and dispatch\r\n\r\nThere's a problem though. This works with a simple demo, but in my real app `onSave` *both* optimistically updates local state and saves it off to the server. It does a side effect.\r\n\r\nIt's something like this:\r\n\r\n```js\r\nasync function onSave(transaction) {\r\n  let { changes, newTransactions } = updateTransaction(transactions, transaction);\r\n  // optimistic update\r\n  setTransactions(newTransactions)\r\n  // save to server\r\n  await postToServer('apply-changes', { changes })\r\n}\r\n```\r\n\r\nThere's a big difference between the phase when an event handler and dispatch is run. Event handlers are run whenever they are triggered (naturally) but the dispatching the action (running `reducer`) happens when rendering. The reducer must be pure because of this.\r\n\r\nHere's the reducer from https://codesandbox.io/s/nrq5y77kj0:\r\n\r\n```js\r\n  function reducer(state, action) {\r\n    switch (action.type) {\r\n      case \"save-item\": {\r\n        let { item } = action;\r\n        return {\r\n          ...state,\r\n          items: items.map(it => (it.id === item.id ? item : it))\r\n        };\r\n      }\r\n      case \"edit-item\": {\r\n        return { ...state, editingId: action.id };\r\n      }\r\n    }\r\n  }\r\n```\r\n\r\nHow is `save-item` also supposed to trigger a side effect? First, item's important to understand these 3 phases:\r\n\r\n```\r\nEvent handler -> render -> commit\r\n```\r\n\r\nEvents are run in the first phase, which causes a render (when dispatches happen), and when everything is finally ready to be flushed to the DOM it does it in a \"commit\" phase, which is when all effects are run (more or less).\r\n\r\nWe need our side effect to run in the commit phase.\r\n\r\n### Option 1\r\n\r\nOne option is to use a ref to \"mark\" the saving effect to be run. Here's the code: https://codesandbox.io/s/m5xrrm4ym8\r\n\r\nBasically you create a flag as a ref:\r\n\r\n```js\r\nlet shouldSave = useRef(false);\r\n```\r\n\r\nLuckily, we've already wrapped the save dispatch into an event handler. Inside `onSave` we mark this flag as true. We can't do it inside of the reducer because it must be pure:\r\n\r\n```js\r\n  let onSave = useCallback(item => {\r\n    shouldSave.current = true;\r\n    dispatch({ type: \"save-item\", item });\r\n  }, []);\r\n```\r\n\r\nFinally, we define an effect that always runs after rendering and checks the flag and resets it:\r\n\r\n```js\r\n  useEffect(() => {\r\n    if (shouldSave.current) {\r\n      // save... all the items to the server?\r\n      post(items)\r\n      shouldSave.current = false;\r\n    }\r\n  });\r\n```\r\n\r\nI thought this option was going to work, but just ran into this issue. We don't know *what* to save anymore. We certainly don't want to send the entire items array to the server! I suppose we could store the item in the ref, but what happens if multiple events are fired before the effect runs? I suppose you could store an array, but... do we really need that?\r\n\r\n### Option 2\r\n\r\n**Note**: I just noticed this option is documented in [How to read an often-changing value from useCallback?](https://reactjs.org/docs/hooks-faq.html#how-to-read-an-often-changing-value-from-usecallback), but I disagree with the tone used. I think this is a fine pattern an better in many cases than `dispatch`, even if it's not quite as robust. Especially since it's not as powerful as callbacks. (see end of this section)\r\n\r\nKeeping around all of the data we need to do the effect might work in some cases, but it feels a little clunky. If we could \"queue up\" effect from the reducer, that would work, but we can't do that. Instead, another option is to embrace callbacks.\r\n\r\nGoing back to the version which used a naive `onSave` which forced all items to rerender (https://codesandbox.io/s/yvl79qj5vj), `onSave` looks like this:\r\n\r\n```js\r\n  let onSave = useCallback(\r\n    item => {\r\n      setItems(items.map(it => (it.id === item.id ? item : it)));\r\n    },\r\n    [items]\r\n  );\r\n```\r\n\r\nThe core problem is that it depends on items. We need to recreate `onSave` because it closes over `items`. But what if it didn't close over it? Instead, let's create a ref:\r\n\r\n```js\r\nlet latestItems = useRef(items);\r\n```\r\n\r\nAnd an effect which keeps it up-to-date with items:\r\n\r\n```js\r\nuseEffect(() => {\r\n  latestItems.current = items\r\n});\r\n```\r\n\r\nNow, the `onSave` callback can reference the ref to always get the up-to-date items. Which means we can memoize it with `useCallback`:\r\n\r\n\r\n```js\r\nlet onSave = useCallback(item => {\r\n  setItems(latestItems.current.map(it => (it.id === item.id ? item : it)));\r\n}, []);\r\n```\r\n\r\nWe are **intentionally** opting to always referencing the latest item. The biggest change with hooks in my opinion is that they are safe by default: an async function will always reference the exact same state that existed at the time they were called. Classes operate the other way: you access state from this.state which can be mutated between async work. Sometimes you want that though so you can maintain callback identity.\r\n\r\nHere is the running sandbox for it: https://codesandbox.io/s/0129jop840. Notice how you can edit items and only the necessary rows rerender, even though it updates `items`. Now, we can do anything we want in our callback, like posting to a server:\r\n\r\n```js\r\nlet onSave = useCallback(item => {\r\n  setItems(latestItems.current.map(it => (it.id === item.id ? item : it)));\r\n  // save to server\r\n  post('/save-item', { item })\r\n}, []);\r\n```\r\n\r\nBasically, if all you need is the latest data since last commit, **callbacks can be memoized as well as reducers**. The drawback is that you need to put each piece of data you need in a ref. If you have lots of pieces of data and only a few simple effects, reducers would be better, but in my case (and I suspect in many others) it's easier to use callbacks with refs.\r\n\r\nIt's nice too because in my real app the save process is more complicated. It needs to get changes back from the server and apply them locally as well, so it looks more like this:\r\n\r\n```js\r\nlet onSave = useCallback(item => {\r\n  setItems(latestItems.current.map(it => (it.id === item.id ? item : it)));\r\n  // save to server\r\n  let changes = await post('/save-item', { item })\r\n  applyChanges(latestItems.current, changes)\r\n}, []);\r\n```\r\n\r\nMaintainability-wise, it's *really* nice to see this whole flow here in one place. Breakin this up to try to manually queue up effects and do a dance with `useReducer` feels much more convoluted.\r\n\r\n### Option 3\r\n\r\nI suppose another option would be to try to \"mark\" the effect to be run in state itself. That way you could do it in `useReducer` as well, and it would look something like this:\r\n\r\n```js\r\nfunction reducer(state, action) {\r\n  switch (action.type) {\r\n    case \"save-item\": {\r\n      let { item } = action;\r\n      return {\r\n        ...state,\r\n        items: state.items.map(it => (it.id === item.id ? item : it)),\r\n        itemsToSave: itemsToSave.concat([item])\r\n      };\r\n    }\r\n    // ...\r\n  }\r\n}\r\n```\r\n\r\nAnd an effect would check the `itemsToSave` state and save them off. The problem is resetting that state - the effect would have to change state, causing a useless rerender, and it's not determistic to make sure that the effect does not run multiple times before `itemsToSave` gets reset.\r\n\r\nIn my experience mixing effects into state, causing renders, make things a lot more difficult to maintain and debug.\r\n\r\n### What's the difference between Option 1 and 2?\r\n\r\nIs there a crucial difference between 1 and 2? Yes, but I'd argue it's not a big deal if you can accept it. Remember these three phases:\r\n\r\n```\r\nEvent handler -> render -> commit\r\n```\r\n\r\nThe big difference is option 1 is doing the side effect in the commit phase, and option 2 is doing it in the event handler phase. Why does this matter?\r\n\r\nIf, for some reason, an item called `onSave` multiple times before the next commit phase happened, option 1 is more robust. A reducer will \"queue up\" the actions and run them in order, updating state in between them, so if you did:\r\n\r\n```js\r\nonSave({ id: 1, name: \"Foo\" })\r\nonSave({ id: 2, name: \"Bar\" })\r\n```\r\n\r\nwhich runs the callback twice immediately, the reducer will process the first save and update the items, and process the second save **passing in the already updated state**.\r\n\r\nHowever, with option 2, when processing the second save **the commit phase hasn't been run yet** so the `latestItems` ref hasn't been updated yet. **The first save will be lost**.\r\n\r\nHowever, the ergonomics of option 2 is much better for many use cases, and I think it's fine to weight these benefits and never need the ability to handle such quick updates. Although concurrent mode might introduce some interesting arguments against that.\r\n\r\n## Another small use case for triggering effects\r\n\r\nIn case this wasn't already long enough, there's a similar use case I'll describe quickly. You can also add new items to the list by editing data in an empty row, and the state of this \"new item\" is tracked separately. \"Saving\" this item doesn't touch the backend, but simply updates the local state, and separate explicit \"add\" action is needed to add it to the list.\r\n\r\nThe hard part is that there is a keybinding for adding the item to the list while editing - something like alt+enter. The problem is I want to coordinate with the state change, so first I want to save the existing field and *then* add to the list. The saving process is complicated so it need to run through that first (I can't just duplicate it all in `onAdd`).\r\n\r\nThis isn't a problem specific to hooks, it's just about coordinating with state changes. When I was working with reducers, I had though that something like this would be neat. Basically when the new items detect that you want to save + add it first an action like `{ type: 'save-item', fields: { name: 'Foo' }, shouldAdd: true }`\r\n\r\n\r\n```js\r\nfunction reducer(state, action) {\r\n  switch (action.type) {\r\n    case \"save-item\": {\r\n      let { fields } = action;\r\n      let newItem = { ...state.newItem, ...fields };\r\n\r\n      if(action.shouldAdd) {\r\n        shouldAdd.current = true\r\n      }\r\n\r\n      return { ...state, newItem };\r\n    }\r\n    // ...\r\n  }\r\n}\r\n```\r\n\r\nwhere `shouldAdd` is a ref that is checked on commit phase and saves the item off to the server. This isn't possible though.\r\n\r\nAnother option would be for the item to call `onAdd` instead of `onSave` when saving + adding, and you could manually call the reducer yourself to process the changes:\r\n\r\n```js\r\nasync function onAdd(fields) {\r\n  let action = { type: 'save-item', fields }\r\n  dispatch(action)\r\n  \r\n  let newItem = reducer(state, action)\r\n  post('/add-item', { newItem });\r\n\r\n}\r\n```\r\n\r\nThis is kind of a neat trick: you are manually running the reducer to get the updated state, and React will run the reducer again whenever it wants.\r\n\r\nSince I ended up liking callbacks for my original problems, I ended up going with a similar approach where I have a ref flag that I just set in `onSave`:\r\n\r\n```js\r\nlet [newItem, setNewItem] = useState({})\r\nlet latestNewItem = useRef(newItem);\r\nlet shouldAdd = useRef(false);\r\n\r\nuseEffect(() => {\r\n  latestNewItem.current = newItem;\r\n})\r\n\r\nuseEffect(() => {\r\n  if(shouldAdd.current) {\r\n    setNewItem({})\r\n    post('/add-item', { newItem })\r\n    shouldAdd.current = false;\r\n  }\r\n})\r\n\r\nlet onSave = useCallback((fields, { add }) => {\r\n  // In my real app, applying the changes to the current item is a bit more complicated than this,\r\n  // so it's not an option to separate on an `onAdd` function that duplicates this logic\r\n  setNewItem({ ...latestNewItem.current, ...fields });\r\n\r\n  // This action also should add, mark the effect to be run\r\n  if(add) {\r\n    shouldAdd.current = true;\r\n  }\r\n}, [])\r\n```\r\n\r\n## Conclusions\r\n\r\nSorry for the length of this. I figure I'd be over-detailed rather than under-detailed, and I've been brewing these thoughts since hooks came out. I'll try to conclude my thoughts here:\r\n\r\n* Effects are **very nice**. It feels like we have easy access to the \"commit\" phase of React, whereas previously it was all in `componentDidUpdate` and not composable at all. Now it's super easy to throw on code to the commit phase which makes coordinating stuff with state easier.\r\n\r\n* Reducers have interesting properties, and I can see how they are fully robust in a concurrent world, but for many cases they are too limited. The ergonomics of implementing many effect-ful workflows with them requires an awkward dance, kind of like when you try to track effect states in local state and split up workflows. Keeping a linear workflow in a callback is not only nice, but necessary in many cases for maintainability.\r\n\r\n* Callbacks can be made memoizable without much work. In many cases I think it's easier to use the ref trick than reducers, but the question is: just *how* dangerous is it? Right now it's not that dangerous, but maybe concurrent mode really is going to break it.\r\n\r\n* If that's the case, we should figure out a better way to weave together effects and state changes.\r\n\r\nI hope all of this made sense. Let me know if something is unclear and I'll try to fix it.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/15238",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/15238/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/15238/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/15238/events",
    "html_url": "https://github.com/facebook/react/issues/15238",
    "id": 426573772,
    "node_id": "MDU6SXNzdWU0MjY1NzM3NzI=",
    "number": 15238,
    "title": "Noscript tags no longer rendering components in 16.5.0",
    "user": {
      "login": "zfletch",
      "id": 3039310,
      "node_id": "MDQ6VXNlcjMwMzkzMTA=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3039310?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zfletch",
      "html_url": "https://github.com/zfletch",
      "followers_url": "https://api.github.com/users/zfletch/followers",
      "following_url": "https://api.github.com/users/zfletch/following{/other_user}",
      "gists_url": "https://api.github.com/users/zfletch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zfletch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zfletch/subscriptions",
      "organizations_url": "https://api.github.com/users/zfletch/orgs",
      "repos_url": "https://api.github.com/users/zfletch/repos",
      "events_url": "https://api.github.com/users/zfletch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zfletch/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710375792,
        "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2019-03-28T15:56:11Z",
    "updated_at": "2020-08-18T14:54:18Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nStarting in version 16.4.3, the following code:\r\n\r\n```\r\n<noscript>\r\n  <a href=\"/cat\">Cat</a>\r\n  <a href=\"/dog\">Dog</a>\r\n</noscript>\r\n```\r\n\r\nis being rendered in the browser as:\r\n\r\n```\r\n<noscript></noscript>\r\n```\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem.**\r\n\r\nPrior to 16.4.3: https://codesandbox.io/embed/5mww4nzpwp\r\n\r\nAfter 16.4.3: https://codesandbox.io/embed/6v8m4yo303\r\n\r\n(The changes are not visible, but if you `inspect element` you can see that, in the first example, the links are being rendered, and in the second example they're not being rendered.)\r\n\r\n**What is the expected behavior?**\r\n\r\nIt should render in the browser the same as in the code:\r\n\r\n```\r\n<noscript>\r\n  <a href=\"/cat\">Cat</a>\r\n  <a href=\"/dog\">Dog</a>\r\n</noscript>\r\n```\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nSee above, it was working in versions prior to 16.4.3. (I couldn't find a previous issue mentioning this bug. I think it could have been introduced in the fix for https://github.com/facebook/react/issues/11423)\r\n\r\n**Why is this a problem?**\r\n\r\nI use a snapshot tool with React to generate a set of static pages from a React project. These pages have less functionality than the full application, but they allow webcrawlers and users who have disabled JavaScript to use the site at a basic level. For example, the code might look like this:\r\n\r\n```\r\n<FancyInteractiveButton linksTo=\"page\">link</FancyInteractiveButton>\r\n<noscript>\r\n  <a href=\"page\">link</a>\r\n</noscript>\r\n```\r\n\r\nPreventing components in `<noscript>` tags from rendering breaks this functionality for users with JavaScript disabled. The generated snapshots no longer contain the links. It also makes the site harder to navigate by webcrawlers, even if they have JavaScript enabled, because they have to be smart enough to use the fancy button instead of following the link.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/15221",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/15221/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/15221/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/15221/events",
    "html_url": "https://github.com/facebook/react/issues/15221",
    "id": 425733192,
    "node_id": "MDU6SXNzdWU0MjU3MzMxOTI=",
    "number": 15221,
    "title": "Hook equivalent for `getSnapshotBeforeUpdate`",
    "user": {
      "login": "brainkim",
      "id": 2996754,
      "node_id": "MDQ6VXNlcjI5OTY3NTQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/2996754?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brainkim",
      "html_url": "https://github.com/brainkim",
      "followers_url": "https://api.github.com/users/brainkim/followers",
      "following_url": "https://api.github.com/users/brainkim/following{/other_user}",
      "gists_url": "https://api.github.com/users/brainkim/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brainkim/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brainkim/subscriptions",
      "organizations_url": "https://api.github.com/users/brainkim/orgs",
      "repos_url": "https://api.github.com/users/brainkim/repos",
      "events_url": "https://api.github.com/users/brainkim/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brainkim/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1775955521,
        "node_id": "MDU6TGFiZWwxNzc1OTU1NTIx",
        "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Backlog",
        "name": "Resolution: Backlog",
        "color": "9dd1e8",
        "default": false,
        "description": ""
      },
      {
        "id": 121709921,
        "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
        "name": "Type: Feature Request",
        "color": "c7def8",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 10,
    "created_at": "2019-03-27T02:29:09Z",
    "updated_at": "2020-10-21T09:57:27Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature\r\n\r\n**What is the current behavior?**\r\n\r\nThere is no hook based equivalent for `getSnapshotBeforeUpdate`. The docs state:\r\n> Our goal is for Hooks to cover all use cases for classes as soon as possible. There are no Hook equivalents to the uncommon getSnapshotBeforeUpdate and componentDidCatch lifecycles yet, but we plan to add them soon.\r\n\r\n**What is the expected behavior?**\r\n\r\nThere is a hook based equivalent for `getSnapshotBeforeUpdate`, maybe something like:\r\n\r\n```js\r\nfunction ScrollingList(props) {\r\n  const lengthRef = React.useRef(0);\r\n  const listRef = React.useRef(null);\r\n\r\n  const prevHeight = React.useSnapshot(() => {\r\n    if (lengthRef.current < props.list.length) {\r\n      const list = listRef.current;\r\n      return list.scrollHeight - list.scrollTop;\r\n    }\r\n  }); \r\n\r\n  React.useEffect(() => {\r\n    lengthRef.current = props.list.length;\r\n  }, [props.list.length]);\r\n\r\n  React.useEffect(() => {\r\n    if (prevHeight != null) {\r\n      const list = listRef.current;\r\n      list.scrollTop = list.scrollHeight - prevHeight;\r\n    }\r\n  }, [prevHeight]);\r\n  return (\r\n    <div ref={listRef}>{/* ... */}</div>\r\n  );\r\n}\r\n```\r\n\r\nThis code probably is bug-ridden and not the best use of hooks but you get the idea.\r\n\r\nI’d like to know:\r\n1. If this feature is planned or on the roadmap.\r\n2. What the proposed API will be.\r\n3. If anyone is working on this.\r\n\r\nSorry, if this is being tracked somewhere and I haven’t seen it. I’m planning an intense component which will use `getSnapshotBeforeUpdate` and I’d love some guidance about the future of this lifecycle method.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact v16.8.0 and later. All browsers and OSes.\r\n\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/15207",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/15207/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/15207/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/15207/events",
    "html_url": "https://github.com/facebook/react/issues/15207",
    "id": 424982212,
    "node_id": "MDU6SXNzdWU0MjQ5ODIyMTI=",
    "number": 15207,
    "title": "Memoized components should forward displayName",
    "user": {
      "login": "pbondoer",
      "id": 1671753,
      "node_id": "MDQ6VXNlcjE2NzE3NTM=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1671753?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pbondoer",
      "html_url": "https://github.com/pbondoer",
      "followers_url": "https://api.github.com/users/pbondoer/followers",
      "following_url": "https://api.github.com/users/pbondoer/following{/other_user}",
      "gists_url": "https://api.github.com/users/pbondoer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pbondoer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pbondoer/subscriptions",
      "organizations_url": "https://api.github.com/users/pbondoer/orgs",
      "repos_url": "https://api.github.com/users/pbondoer/repos",
      "events_url": "https://api.github.com/users/pbondoer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pbondoer/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 204945357,
        "node_id": "MDU6TGFiZWwyMDQ5NDUzNTc=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Shallow%20Renderer",
        "name": "Component: Shallow Renderer",
        "color": "eb6420",
        "default": false,
        "description": null
      },
      {
        "id": 40929153,
        "node_id": "MDU6TGFiZWw0MDkyOTE1Mw==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
        "name": "Type: Enhancement",
        "color": "84b6eb",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 13,
    "created_at": "2019-03-25T15:57:20Z",
    "updated_at": "2020-08-16T17:41:36Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nI'd like to report a bug.\r\n\r\n**What is the current behavior?**\r\n\r\nFirst of all, thanks for the great work on fixing https://github.com/facebook/react/issues/14807. However there is still an issue with the current implementation.\r\n\r\n`React.memo` does not forward displayName for tests. In snapshots, components display as `<Component />` and string assertions such as `.find('MyMemoizedComponent')` won't work.\r\n\r\n**What is the expected behavior?**\r\n\r\n`React.memo` should forward displayName for the test renderer.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n* React 16.8.5\r\n* Jest 24.5.0\r\n* enzyme 3.9.0\r\n* enzyme-adapter-react-16 1.11.2\r\n\r\n---\r\n\r\nN.B. - Potentially related to https://github.com/facebook/react/issues/14319, but this is related to the more recent changes to support `memo` in the test renderer. Please close if needed, I'm quite new here!\r\n\r\nI'd be happy to submit a PR if the issue is not too complex to look into :smile: ",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/15188",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/15188/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/15188/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/15188/events",
    "html_url": "https://github.com/facebook/react/issues/15188",
    "id": 424082507,
    "node_id": "MDU6SXNzdWU0MjQwODI1MDc=",
    "number": 15188,
    "title": "useEffect can very quickly consume free quotas or cost money when used with 3rd party services",
    "user": {
      "login": "PutziSan",
      "id": 13392042,
      "node_id": "MDQ6VXNlcjEzMzkyMDQy",
      "avatar_url": "https://avatars1.githubusercontent.com/u/13392042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PutziSan",
      "html_url": "https://github.com/PutziSan",
      "followers_url": "https://api.github.com/users/PutziSan/followers",
      "following_url": "https://api.github.com/users/PutziSan/following{/other_user}",
      "gists_url": "https://api.github.com/users/PutziSan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PutziSan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PutziSan/subscriptions",
      "organizations_url": "https://api.github.com/users/PutziSan/orgs",
      "repos_url": "https://api.github.com/users/PutziSan/repos",
      "events_url": "https://api.github.com/users/PutziSan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PutziSan/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710375792,
        "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2019-03-22T07:40:58Z",
    "updated_at": "2019-03-23T16:00:25Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nFeature / Documentation-Request\r\n\r\n**What is the current behavior?**\r\nWhen I developed my app last week with useEffect and firebase firestore, it happened to me that my effect used up the 20k-write limit within about 20 seconds. Of course this was a bug introduced by myself, but if I had been in a pay-as-you-go plan it could have cost me some money. I now use a custom hook as useEffect, which counts in development whether a hook is executed too often in 500ms and if so, it throws an error.\r\n\r\n**What is the expected behavior?**\r\nI'm not sure how you could solve this on your side. Of course you could do the check in development-mode, but that would probably trigger existing projects too much. However, a small hint in the documentation would be good that you should take care during development that useEffect can quickly lead to this behavior and that you should be careful when using other 3rd-party services that have a quota or have to be paid.\r\n\r\nI just wanted to share my experiences while developing a \"real\" app. If you can't or won't do anything here, you are welcome to close the issue.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/15187",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/15187/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/15187/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/15187/events",
    "html_url": "https://github.com/facebook/react/issues/15187",
    "id": 423987986,
    "node_id": "MDU6SXNzdWU0MjM5ODc5ODY=",
    "number": 15187,
    "title": "Edge 18 & IE 11 server mismatch with SVG icons",
    "user": {
      "login": "oliviertassinari",
      "id": 3165635,
      "node_id": "MDQ6VXNlcjMxNjU2MzU=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/3165635?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/oliviertassinari",
      "html_url": "https://github.com/oliviertassinari",
      "followers_url": "https://api.github.com/users/oliviertassinari/followers",
      "following_url": "https://api.github.com/users/oliviertassinari/following{/other_user}",
      "gists_url": "https://api.github.com/users/oliviertassinari/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/oliviertassinari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/oliviertassinari/subscriptions",
      "organizations_url": "https://api.github.com/users/oliviertassinari/orgs",
      "repos_url": "https://api.github.com/users/oliviertassinari/repos",
      "events_url": "https://api.github.com/users/oliviertassinari/events{/privacy}",
      "received_events_url": "https://api.github.com/users/oliviertassinari/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710332294,
        "node_id": "MDU6TGFiZWw3MTAzMzIyOTQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Server%20Rendering",
        "name": "Component: Server Rendering",
        "color": "d4c5f9",
        "default": false,
        "description": null
      },
      {
        "id": 710722093,
        "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
        "name": "Type: Needs Investigation",
        "color": "fbca04",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 8,
    "created_at": "2019-03-21T23:43:04Z",
    "updated_at": "2020-07-14T03:40:15Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nbug\r\n\r\n**What is the current behavior?**\r\n\r\nReact raises a warning:\r\n\r\n![Capture d’écran 2019-03-22 à 00 40 00](https://user-images.githubusercontent.com/3165635/54791630-0c05d100-4c3b-11e9-8426-4ea1ebb6e3f4.png)\r\n\r\nhttps://codesandbox.io/s/k91nr3xzy5\r\n\r\n```jsx\r\nimport React from \"react\";\r\n\r\nexport default () => (\r\n  <div>\r\n    2\r\n    <svg>\r\n      <path d=\"M0 0h24v24H0z\" />\r\n    </svg>\r\n  </div>\r\n);\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nNo warning\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact: 16.8.4\r\nBrowser: Edge 18",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/15176",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/15176/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/15176/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/15176/events",
    "html_url": "https://github.com/facebook/react/issues/15176",
    "id": 423641735,
    "node_id": "MDU6SXNzdWU0MjM2NDE3MzU=",
    "number": 15176,
    "title": "React callback ref cleanup function",
    "user": {
      "login": "k15a",
      "id": 20357450,
      "node_id": "MDQ6VXNlcjIwMzU3NDUw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/20357450?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/k15a",
      "html_url": "https://github.com/k15a",
      "followers_url": "https://api.github.com/users/k15a/followers",
      "following_url": "https://api.github.com/users/k15a/following{/other_user}",
      "gists_url": "https://api.github.com/users/k15a/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/k15a/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/k15a/subscriptions",
      "organizations_url": "https://api.github.com/users/k15a/orgs",
      "repos_url": "https://api.github.com/users/k15a/repos",
      "events_url": "https://api.github.com/users/k15a/events{/privacy}",
      "received_events_url": "https://api.github.com/users/k15a/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710375792,
        "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 12,
    "created_at": "2019-03-21T09:44:36Z",
    "updated_at": "2020-03-02T10:20:42Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "At the time React added callback refs the main use case for them was to replace string refs. A lot of the callback refs looked like this:\r\n\r\n```jsx\r\n<div ref={node => this.node = node} />\r\n```\r\n\r\nWith the introduction of `createRef` and `useRef` this use case is pretty much replaced by these alternatives so the use case of callback refs will shift to advanced use cases like [measuring DOM nodes](https://reactjs.org/docs/hooks-faq.html#how-can-i-measure-a-dom-node).\r\n\r\nIt would be nice if you could return a cleanup function from the callback ref which is called instead of the callback with null. This way it will behave more like the `useEffect` API.\r\n\r\n```jsx\r\n<div ref={node => {\r\n  // Normal ref callback\r\n\r\n  return () => {\r\n    // Cleanup function which is called when the ref is removed\r\n  }\r\n}} />\r\n```\r\n\r\nThis will be super helpful when you need to set up a Resize-, Intersection- or  MutationObserver.\r\n\r\n```jsx\r\nfunction useDimensions() {\r\n  const [entry, setEntry] = useState()\r\n  \r\n  const targetRef = useCallback((node) => {\r\n    const observer = new ResizeObserver(([entry]) => {\r\n      setEntry(entry)\r\n    })\r\n\r\n    observer.observe(node)\r\n\r\n    return () => {\r\n      observer.disconnect()\r\n    }\r\n  }, [])\r\n\r\n  return [entry, targetRef]\r\n}\r\n\r\nfunction Comp() {\r\n  const [dimensions, targetRef] = useDimensions()\r\n\r\n  return (\r\n    <pre ref={targetRef}>\r\n      {JSON.stringify(dimensions, null, 2)}\r\n    </pre>\r\n  )\r\n}\r\n```\r\n\r\nCurrently, if you want to implement something like this you need to save the observer into a ref and then if the callback ref is called with null you have to clean up the observer from the ref.\r\n\r\nTo be 99% backward compatible we could call both the callback ref with null and the cleanup function. The only case where it isn't backward compatible is if currently someone is returning a function and doesn't expect the function to be called.\r\n\r\n```jsx\r\nfunction ref(node) {\r\n  if (node === null) {\r\n    return\r\n  }\r\n\r\n  // Do something\r\n\r\n  return () => {\r\n    // Cleanup something\r\n  }\r\n}\r\n```",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/15171",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/15171/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/15171/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/15171/events",
    "html_url": "https://github.com/facebook/react/issues/15171",
    "id": 423460223,
    "node_id": "MDU6SXNzdWU0MjM0NjAyMjM=",
    "number": 15171,
    "title": "dangerouslySetInnerHTML is left empty on client render on top of bad server markup when rendering HTML",
    "user": {
      "login": "petetnt",
      "id": 7641760,
      "node_id": "MDQ6VXNlcjc2NDE3NjA=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7641760?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petetnt",
      "html_url": "https://github.com/petetnt",
      "followers_url": "https://api.github.com/users/petetnt/followers",
      "following_url": "https://api.github.com/users/petetnt/following{/other_user}",
      "gists_url": "https://api.github.com/users/petetnt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petetnt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petetnt/subscriptions",
      "organizations_url": "https://api.github.com/users/petetnt/orgs",
      "repos_url": "https://api.github.com/users/petetnt/repos",
      "events_url": "https://api.github.com/users/petetnt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petetnt/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 40929151,
        "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
        "name": "Type: Bug",
        "color": "b60205",
        "default": false,
        "description": null
      },
      {
        "id": 710722093,
        "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
        "name": "Type: Needs Investigation",
        "color": "fbca04",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2019-03-20T20:35:18Z",
    "updated_at": "2020-09-04T21:52:27Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "This seems to be an edge case of https://github.com/facebook/react/issues/11789 fixed in https://github.com/facebook/react/pull/13353/files.\r\n\r\nI ran into this when trying to hydrate content rendered with https://github.com/prismicio/prismic-dom `asHtml` method.\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug? I think. \r\n\r\n**What is the current behavior?**\r\n\r\nCurrent behavior:\r\n\r\n1. Server-side stuff comes in from server and contains the things we need\r\n2. Hydration mismatch happens\r\n3. dangerouslySetInnerHTML is called with correct value but an empty string gets rendered instead\r\n\r\nI tried to replicate the issue on https://codesandbox.io/s/2xojk10jln but failed.\r\n\r\nThe following testcase for `packages/react-dom/src/__tests__/ReactDOMServerIntegrationElements-test.js` produces the same result (I tried it first with the same PrismicDOM.RichText.asHtml(obj) call I have in the app) but I am not sure if it's correct:\r\n\r\n  ```js\r\n\r\n# test case\r\n    itRenders(\r\n      'a div with dangerouslySetInnerHTML set to html inserted',\r\n      async render => {\r\n        const obj = '<li>bar</li>';\r\n        const e = await render(\r\n          <div dangerouslySetInnerHTML={{__html: obj }} />,\r\n        );\r\n        expect(e.childNodes.length).toBe(1);\r\n        expect(e.firstChild.tagName).toBe('LI');\r\n        expect(e.firstChild.childNodes.length).toBe(1);\r\n      },\r\n    );\r\n```\r\n\r\n```bash\r\n      ✓ renders a div with dangerouslySetInnerHTML set to html return value of function called with server string render (190ms)\r\n      ✓ renders a div with dangerouslySetInnerHTML set to html return value of function called with server stream render (52ms)\r\n      ✓ renders a div with dangerouslySetInnerHTML set to html return value of function called with clean client render (37ms)\r\n      ✓ renders a div with dangerouslySetInnerHTML set to html return value of function called with client render on top of good server markup (74ms)\r\n      ✕ renders a div with dangerouslySetInnerHTML set to html return value of function called with client render on top of bad server markup (34ms)\r\n\r\n  ● ReactDOMServerIntegration › ... › renders a div with dangerouslySetInnerHTML set to html return value of function called with client render on top of bad server markup\r\n\r\n    expect(received).toBe(expected) // Object.is equality\r\n\r\n    Expected: \"bar\"\r\n    Received: \"\"\r\n```\r\n\r\n\r\n**What is the expected behavior?**\r\n\r\nThe client render would have rendered `<li>bar</li>`\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\ncommit c05b4b8  (latest master) and >16.8.\r\n\r\nSorry for a bit vague bug report.\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/15154",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/15154/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/15154/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/15154/events",
    "html_url": "https://github.com/facebook/react/issues/15154",
    "id": 422874408,
    "node_id": "MDU6SXNzdWU0MjI4NzQ0MDg=",
    "number": 15154,
    "title": "Effect memoization and immutable data structures",
    "user": {
      "login": "roman01la",
      "id": 1355501,
      "node_id": "MDQ6VXNlcjEzNTU1MDE=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1355501?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/roman01la",
      "html_url": "https://github.com/roman01la",
      "followers_url": "https://api.github.com/users/roman01la/followers",
      "following_url": "https://api.github.com/users/roman01la/following{/other_user}",
      "gists_url": "https://api.github.com/users/roman01la/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/roman01la/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/roman01la/subscriptions",
      "organizations_url": "https://api.github.com/users/roman01la/orgs",
      "repos_url": "https://api.github.com/users/roman01la/repos",
      "events_url": "https://api.github.com/users/roman01la/events{/privacy}",
      "received_events_url": "https://api.github.com/users/roman01la/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710375792,
        "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 16,
    "created_at": "2019-03-19T17:58:05Z",
    "updated_at": "2019-03-22T16:07:08Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "Current design of `useEffect` requires dependencies to be either primitive values or references to the same object, because shallow equality check relies on `Object.is` which is an identity check for objects.\r\n\r\nThe above means that there's no way to perform structural comparison, which is needed for immutable data structures when identity check fails.\r\n\r\nTo maintain backwards compatibility a comparator function could be provided as the third argument to `useEffect`:\r\n```js\r\nuseEffect(fn, deps, depsComparator);\r\n```\r\n\r\nThe goal here is to preserve an ease of use of the API with immutable data structures in order to provide an idiomatic usage of `useEffect` in ClojureScript and other environments that rely on immutability e.g. Immutable.js\r\n\r\ncc @mhuebert @Lokeh @orestis",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/15153",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/15153/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/15153/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/15153/events",
    "html_url": "https://github.com/facebook/react/issues/15153",
    "id": 422872651,
    "node_id": "MDU6SXNzdWU0MjI4NzI2NTE=",
    "number": 15153,
    "title": "eslint-plugin-react-hooks - autofix useCallback/useMemo behaviour",
    "user": {
      "login": "RedTn",
      "id": 3923164,
      "node_id": "MDQ6VXNlcjM5MjMxNjQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3923164?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RedTn",
      "html_url": "https://github.com/RedTn",
      "followers_url": "https://api.github.com/users/RedTn/followers",
      "following_url": "https://api.github.com/users/RedTn/following{/other_user}",
      "gists_url": "https://api.github.com/users/RedTn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RedTn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RedTn/subscriptions",
      "organizations_url": "https://api.github.com/users/RedTn/orgs",
      "repos_url": "https://api.github.com/users/RedTn/repos",
      "events_url": "https://api.github.com/users/RedTn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RedTn/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1249821345,
        "node_id": "MDU6TGFiZWwxMjQ5ODIxMzQ1",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20ESLint%20Rules",
        "name": "Component: ESLint Rules",
        "color": "f7afdb",
        "default": false,
        "description": ""
      },
      {
        "id": 710375792,
        "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-03-19T17:54:16Z",
    "updated_at": "2019-03-19T18:21:32Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nDiscussion for new feature\r\n\r\n**What is the current behavior?**\r\n\r\nuseCallback/useMemo hook's do nothing when there is no second argument provided for deps. The eslint plugin reports this but does not autofix\r\n\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.8.4\r\n\r\n**PR to implement:** \r\n\r\nhttps://github.com/facebook/react/pull/15146\r\n\r\n&nbsp;\r\n\r\nCurrently, the eslint plugin does not autofix useCallback/useMemo to infer deps if there isn't a second argument provided to the hook. We can autofix it to infer deps if needed, or autofix to remove the hook altogether if there no deps needed (according to https://reactjs.org/docs/hooks-reference.html#usememo, if no second argument is provided it behaves as if the hook doesn't exist anyways).\r\n\r\nWhat would be the best way to implement this autofix? In my opinion, linting shouldn't be breaking functionality on an autofix, so autofixing to remove the hook is the safest to implement. Autofixing to infer deps will change behavior in code so I was thinking of having a config option the dev needs to specify so that linting changes that is affecting behavior is explicit.\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/15129",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/15129/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/15129/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/15129/events",
    "html_url": "https://github.com/facebook/react/issues/15129",
    "id": 421845605,
    "node_id": "MDU6SXNzdWU0MjE4NDU2MDU=",
    "number": 15129,
    "title": "Hooks - unmount and didUpdate",
    "user": {
      "login": "lichstam",
      "id": 34944192,
      "node_id": "MDQ6VXNlcjM0OTQ0MTky",
      "avatar_url": "https://avatars2.githubusercontent.com/u/34944192?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lichstam",
      "html_url": "https://github.com/lichstam",
      "followers_url": "https://api.github.com/users/lichstam/followers",
      "following_url": "https://api.github.com/users/lichstam/following{/other_user}",
      "gists_url": "https://api.github.com/users/lichstam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lichstam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lichstam/subscriptions",
      "organizations_url": "https://api.github.com/users/lichstam/orgs",
      "repos_url": "https://api.github.com/users/lichstam/repos",
      "events_url": "https://api.github.com/users/lichstam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lichstam/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710375792,
        "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2019-03-16T19:50:01Z",
    "updated_at": "2019-03-18T14:33:18Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "I'm opening this up at Dan's request from a twitter discussion:\r\nhttps://twitter.com/lichstam/status/1106995545938247682\r\n\r\nFrom Twitter:\r\n\r\nI can fill in on this. The first example I would like to point to is a debouncing hook I've created that looks something like this:\r\n  \r\n```javascript\r\nuseEffect(() => {\r\n  const debounced = setTimeout(() => setDebounced(steps), 500);\r\n  return () => clearTimeout(debounced);\r\n}, [steps])\r\n```\r\n\r\nand then I have another one, that actually performs the request:\r\n\r\n```javascript\r\nuseEffect(request, [debounced])\r\n```\r\n\r\nAnd it all works fine, apart from when the component is mounted and unmounted.\r\nIn the class model I was able to make sure it never runs the first time and on unmounting I could clear the timeout and, if the state value differs from prop (yes I know, you shouldn't mirror your props but I have to debounce somewhere), I could just perform a last request before I unmount. \r\nFurthermore, `componentDidUpdate` really made it easy preventing this from running the first time. I'm not quite sure how to approach this with hooks.\r\nPerhaps I'm doing it all wrong but to Patrick's point, the class way was more straight forward.\r\n\r\nAnother example: I code in RN and use the Animated API a lot. I have cases that translates into something like this:\r\n\r\n```javascript\r\nuseEffect(() => {\r\n  if (inAddStage) moveAndShowStep(); // Animate with Animated API\r\n}, [inAddStage]);\r\n```\r\n\r\nThis works well but it does perform an unnecessary initial run which makes me wonder if I've missed the point with hooks (again, to Patrick's point, it seems a bit more complex sometimes). Why isn't there a hook that **doesn't** run the first time btw? Again, with the old lifecycles it was much clearer how to prevent this from happening (using `componentDidUpdate`).\r\n\r\nOn a last note, I just want to say that I'm very fond of the idea and wholeheartedly support the functional approach and I really like the concept of hooks being \"state observers\", that react only when the specified attributes change - which basically makes the whole code more declarative.\r\nI've just started using them so I'll probably figure things out along the way but I thought I could give you something since you didn't get any answer :)",
    "performed_via_github_app": null
  }
]