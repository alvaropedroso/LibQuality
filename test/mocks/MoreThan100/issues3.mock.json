[
  {
    "url": "https://api.github.com/repos/facebook/react/issues/18940",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/18940/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/18940/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/18940/events",
    "html_url": "https://github.com/facebook/react/issues/18940",
    "id": 619680574,
    "node_id": "MDU6SXNzdWU2MTk2ODA1NzQ=",
    "number": 18940,
    "title": "Feature Request: <input type=\"textarea\" .../> ",
    "user": {
      "login": "JasonWoof",
      "id": 31515,
      "node_id": "MDQ6VXNlcjMxNTE1",
      "avatar_url": "https://avatars3.githubusercontent.com/u/31515?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JasonWoof",
      "html_url": "https://github.com/JasonWoof",
      "followers_url": "https://api.github.com/users/JasonWoof/followers",
      "following_url": "https://api.github.com/users/JasonWoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/JasonWoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JasonWoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JasonWoof/subscriptions",
      "organizations_url": "https://api.github.com/users/JasonWoof/orgs",
      "repos_url": "https://api.github.com/users/JasonWoof/repos",
      "events_url": "https://api.github.com/users/JasonWoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JasonWoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 155984160,
        "node_id": "MDU6TGFiZWwxNTU5ODQxNjA=",
        "url": "https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed",
        "name": "Status: Unconfirmed",
        "color": "d4c5f9",
        "default": false,
        "description": "A potential issue that we haven't yet confirmed as a bug"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-05-17T11:41:47Z",
    "updated_at": "2020-08-16T11:12:11Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "I'm delighted that you made it so `<textarea>` can take `value=` and `defaultValue=...` but what I really want is `<input type=\"textarea\">`.\r\n\r\nThat would make this use case more fun:\r\n\r\n    <input type={field.type} ...\r\n\r\nNo explanation necessary if you decide not to implement this. I've already made a wrapper class to solve my problem at hand.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/18939",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/18939/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/18939/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/18939/events",
    "html_url": "https://github.com/facebook/react/pull/18939",
    "id": 619626684,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NDE5MDcwNTI4",
    "number": 18939,
    "title": "Enable Context Menu on Chrome to inspect React Component",
    "user": {
      "login": "asheshvidyut7",
      "id": 19382572,
      "node_id": "MDQ6VXNlcjE5MzgyNTcy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/19382572?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/asheshvidyut7",
      "html_url": "https://github.com/asheshvidyut7",
      "followers_url": "https://api.github.com/users/asheshvidyut7/followers",
      "following_url": "https://api.github.com/users/asheshvidyut7/following{/other_user}",
      "gists_url": "https://api.github.com/users/asheshvidyut7/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/asheshvidyut7/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/asheshvidyut7/subscriptions",
      "organizations_url": "https://api.github.com/users/asheshvidyut7/orgs",
      "repos_url": "https://api.github.com/users/asheshvidyut7/repos",
      "events_url": "https://api.github.com/users/asheshvidyut7/events{/privacy}",
      "received_events_url": "https://api.github.com/users/asheshvidyut7/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "bvaughn",
      "id": 29597,
      "node_id": "MDQ6VXNlcjI5NTk3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bvaughn",
      "html_url": "https://github.com/bvaughn",
      "followers_url": "https://api.github.com/users/bvaughn/followers",
      "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
      "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
      "organizations_url": "https://api.github.com/users/bvaughn/orgs",
      "repos_url": "https://api.github.com/users/bvaughn/repos",
      "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bvaughn/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "bvaughn",
        "id": 29597,
        "node_id": "MDQ6VXNlcjI5NTk3",
        "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bvaughn",
        "html_url": "https://github.com/bvaughn",
        "followers_url": "https://api.github.com/users/bvaughn/followers",
        "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
        "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
        "organizations_url": "https://api.github.com/users/bvaughn/orgs",
        "repos_url": "https://api.github.com/users/bvaughn/repos",
        "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bvaughn/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-05-17T06:52:55Z",
    "updated_at": "2020-10-23T12:34:47Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/18939",
      "html_url": "https://github.com/facebook/react/pull/18939",
      "diff_url": "https://github.com/facebook/react/pull/18939.diff",
      "patch_url": "https://github.com/facebook/react/pull/18939.patch"
    },
    "body": "Towards https://github.com/facebook/react/issues/18822\r\n \r\nThis PR adds a context menu on chrome. Clicking on the menu, react component is selected on Components tab.  \r\n\r\nIt is my first PR, will need guidance. \r\n\r\n![TrimmedVideo](https://user-images.githubusercontent.com/19382572/82529980-cfdd4180-9b59-11ea-93fa-acd9820c83a7.gif)\r\n\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/18928",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/18928/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/18928/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/18928/events",
    "html_url": "https://github.com/facebook/react/pull/18928",
    "id": 618822172,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NDE4NDczNDk1",
    "number": 18928,
    "title": "Fix lazy not to throw undefined objects",
    "user": {
      "login": "b4h0-c4t",
      "id": 22951237,
      "node_id": "MDQ6VXNlcjIyOTUxMjM3",
      "avatar_url": "https://avatars2.githubusercontent.com/u/22951237?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/b4h0-c4t",
      "html_url": "https://github.com/b4h0-c4t",
      "followers_url": "https://api.github.com/users/b4h0-c4t/followers",
      "following_url": "https://api.github.com/users/b4h0-c4t/following{/other_user}",
      "gists_url": "https://api.github.com/users/b4h0-c4t/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/b4h0-c4t/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/b4h0-c4t/subscriptions",
      "organizations_url": "https://api.github.com/users/b4h0-c4t/orgs",
      "repos_url": "https://api.github.com/users/b4h0-c4t/repos",
      "events_url": "https://api.github.com/users/b4h0-c4t/events{/privacy}",
      "received_events_url": "https://api.github.com/users/b4h0-c4t/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2020-05-15T09:15:49Z",
    "updated_at": "2020-08-30T16:56:44Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/18928",
      "html_url": "https://github.com/facebook/react/pull/18928",
      "diff_url": "https://github.com/facebook/react/pull/18928.diff",
      "patch_url": "https://github.com/facebook/react/pull/18928.patch"
    },
    "body": "## Summary\r\nfixed #18768\r\nThis issue has two problems.\r\n\r\n### First problem\r\n`React.lazy` did not perform an undefined check for `moduleObject`.\r\n\r\ninput\r\n```js\r\nconst Async = lazy(async () => {});\r\n```\r\n\r\ncurrent\r\n```\r\nUncaught undefined\r\n```\r\n\r\nfixed\r\n```\r\nWarning: lazy: Expected the result of a dynamic import() call. Instead received: undefined\r\n\r\nYour code should look like: \r\n  const MyComponent = lazy(() => import('./MyComponent'))\r\n```\r\n\r\n### Second problem\r\n`React.lazy` didn't check if the result of executing the argument was thenable.\r\ninput\r\n\r\n```js\r\nconst Async = lazy(() => ({}));\r\n```\r\n\r\ncurrent\r\n```\r\nUncaught {}\r\n```\r\n\r\nfixed\r\n```\r\nlazy: Expects to receive an async function.\r\n```\r\n\r\n## Test Plan\r\n`yarn test ReactLazy`",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/18908",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/18908/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/18908/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/18908/events",
    "html_url": "https://github.com/facebook/react/issues/18908",
    "id": 617522365,
    "node_id": "MDU6SXNzdWU2MTc1MjIzNjU=",
    "number": 18908,
    "title": "Show better warning when <React.Fragment> is missing a key",
    "user": {
      "login": "jtrost",
      "id": 1156272,
      "node_id": "MDQ6VXNlcjExNTYyNzI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1156272?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtrost",
      "html_url": "https://github.com/jtrost",
      "followers_url": "https://api.github.com/users/jtrost/followers",
      "following_url": "https://api.github.com/users/jtrost/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtrost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtrost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtrost/subscriptions",
      "organizations_url": "https://api.github.com/users/jtrost/orgs",
      "repos_url": "https://api.github.com/users/jtrost/repos",
      "events_url": "https://api.github.com/users/jtrost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtrost/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 155984160,
        "node_id": "MDU6TGFiZWwxNTU5ODQxNjA=",
        "url": "https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed",
        "name": "Status: Unconfirmed",
        "color": "d4c5f9",
        "default": false,
        "description": "A potential issue that we haven't yet confirmed as a bug"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-05-13T14:59:21Z",
    "updated_at": "2020-09-03T13:03:05Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "React version: 16.9.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Take an array of data, and render each item inside of `<React.Fragment></React.Fragment>`\r\n2. Load the page to and see the topmost line in the backtrace: `in Fragment (at App.js:6)`\r\n\r\nLink to code example: https://codesandbox.io/s/icy-rgb-wyuyk?file=/src/App.js\r\n\r\n## The current behavior\r\nThe warning says that a `<Fragment>` tag needs a key, but `<React.Fragment>` is the tag that actually needs a key.\r\n\r\n## The expected behavior\r\nAny line in this backtrace that's a `<React.Fragment>` should say `in React.Fragment` for clarity.\r\n\r\nI am suggesting this change because I have a component named `Fragment`, so when I saw a `<Fragment>` tag in the backtrace I thought my `<Fragment>` tag needed a key. But it turns out that `<React.Fragment>` needed a key. Since React does not prevent you from naming a component `Fragment`, it should correctly name `React.Fragment` in the backtrace.\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/18906",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/18906/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/18906/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/18906/events",
    "html_url": "https://github.com/facebook/react/issues/18906",
    "id": 617492031,
    "node_id": "MDU6SXNzdWU2MTc0OTIwMzE=",
    "number": 18906,
    "title": "Bug: IE11 with Suspense doesn't support direct child with inline display: flex style",
    "user": {
      "login": "AdrianoRuberto",
      "id": 17402643,
      "node_id": "MDQ6VXNlcjE3NDAyNjQz",
      "avatar_url": "https://avatars3.githubusercontent.com/u/17402643?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AdrianoRuberto",
      "html_url": "https://github.com/AdrianoRuberto",
      "followers_url": "https://api.github.com/users/AdrianoRuberto/followers",
      "following_url": "https://api.github.com/users/AdrianoRuberto/following{/other_user}",
      "gists_url": "https://api.github.com/users/AdrianoRuberto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AdrianoRuberto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AdrianoRuberto/subscriptions",
      "organizations_url": "https://api.github.com/users/AdrianoRuberto/orgs",
      "repos_url": "https://api.github.com/users/AdrianoRuberto/repos",
      "events_url": "https://api.github.com/users/AdrianoRuberto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AdrianoRuberto/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1109407645,
        "node_id": "MDU6TGFiZWwxMTA5NDA3NjQ1",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Suspense",
        "name": "Component: Suspense",
        "color": "8ffcd6",
        "default": false,
        "description": ""
      },
      {
        "id": 710722093,
        "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
        "name": "Type: Needs Investigation",
        "color": "fbca04",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-05-13T14:22:39Z",
    "updated_at": "2020-10-19T14:00:25Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nIf the direct children of `<React.Suspense />` have an inline `display: flex` style, when `Suspense` will be resolved it will NOT remove `display: none !important`, thus there will be a blank page.\r\n\r\nThis bug is only on the last version of IE11 and only with inline style of `display: flex`.\r\n\r\nReact version: 16.13.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. Add <React.Suspense /> \r\n2. Add a direct child with an inline style as `display: flex`\r\n3. Lazy load something\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://github.com/AdrianoRuberto/ie11-suspense-bug\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nA blank page with IE11\r\n\r\n## The expected behavior\r\nThe loaded page.\r\n\r\n## Workarounds\r\nBasically, remove the inline style with `display: flex` to be the direct child of `<React.Suspense />` does the trick, such as:\r\n1. Add a div between the `React.Suspense` and the `<div style={{display: \"flex\"}}>`\r\n2. Use a `className` and move the inline style inside the stylesheet.\r\n\r\n\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/18883",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/18883/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/18883/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/18883/events",
    "html_url": "https://github.com/facebook/react/issues/18883",
    "id": 615439457,
    "node_id": "MDU6SXNzdWU2MTU0Mzk0NTc=",
    "number": 18883,
    "title": "Feature proposal(eslint-react-hooks): Recursive dependencies scanning for exhaustive-deps",
    "user": {
      "login": "Telokis",
      "id": 6382729,
      "node_id": "MDQ6VXNlcjYzODI3Mjk=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/6382729?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Telokis",
      "html_url": "https://github.com/Telokis",
      "followers_url": "https://api.github.com/users/Telokis/followers",
      "following_url": "https://api.github.com/users/Telokis/following{/other_user}",
      "gists_url": "https://api.github.com/users/Telokis/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Telokis/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Telokis/subscriptions",
      "organizations_url": "https://api.github.com/users/Telokis/orgs",
      "repos_url": "https://api.github.com/users/Telokis/repos",
      "events_url": "https://api.github.com/users/Telokis/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Telokis/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-05-10T17:37:06Z",
    "updated_at": "2020-08-08T18:10:01Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "## Context\r\n\r\nAfter reading https://github.com/facebook/react/issues/14920 (not 100% of it, I admit), I decided to refactor my codebase in order to be more resilient against potential mistakes.  \r\nDuring this conversion, I converted a ton of callbacks to `useCallback` and made extensive use of the array dependencies for `useCallback` and `useEffect` everywhere.  \r\nHowever, I often stumbled upon the following pattern:\r\n\r\n```js\r\nconst myCallback = useCallback(() => {\r\n  // Do something with value.\r\n}, [value]);\r\n\r\nconst myOtherCallback = useCallback(() => {\r\n  const result = myCallback();\r\n\r\n  // Do something with BOTH value and result.\r\n}, [value, myCallback ]);\r\n\r\nuseEffect(() => {\r\n  // Do something with myCallback, myOtherCallback and value, independently.\r\n}, [value, myCallback, myOtherCallback ])\r\n```\r\n\r\n[Basic CodeSandBox with this example](https://codesandbox.io/s/goofy-thunder-2y4s9)\r\n\r\nFor the sake of argument, let's say that this code can't \"move\" callbacks around: I can't declare `myCallback` and/or `myOtherCallback` because they are used below in the main scope.\r\n\r\n## Problem\r\n\r\nWith the above example, we can conclude the following statements:\r\n- `myCallback` will change if `value` changes\r\n- `myOtherCallback` will change if `value` or `myCallback` changes\r\n- The `useEffect` will rerun if `myCallback`, `value` or `myOtherCallback` changes\r\n\r\nWe can instantly notice there is a lot of redundancy right there:\r\n\r\nIf `value` changes, `myCallback` will change so I only need to specify `myCallback` as a dependency for `myOtherCallback` even though I also use `value` directly.  \r\nThe same reasoning can be applied to the dependencies of `useEffect`.\r\n\r\nAs a human, I could omit `value` from the dependencies of `myOtherCallback` and be 100% absolutely guaranteed that the behavior would be strictly identical as per the hooks very own specifications.  \r\nBut if I do so, the `react-hooks/exhaustive-deps` eslint rule will complain that I'm missing some dependencies from the array.\r\n\r\n## Proposal\r\n\r\nIf I understood properly, the rule does some kind of dependency traversal in order to attempt to recognize infinite loops.  \r\nI think it would be nice for it to also be able to detect this kind of dependency redundancies.  \r\nEven better, it should be able to take it into account when suggesting changes/reporting errors.  \r\n\r\n## Benefits\r\n\r\nFrom reading the [issue](https://github.com/facebook/react/issues/14920) I mentionned at the top of this post, there is a fair amout of people who are not happy with the clutter the rule forces us to have in the codebase.  \r\nMyself, I'm fairly hesitant and sometimes find myself thinking \"I shouldn't need to specify this dep\".  \r\nImplementing the proposal mentionned above would be extremely beneficial regarding the readability of the code by totally preventing redundancy of dependencies.\r\n\r\n## Drawbacks\r\n\r\nI can see two potential issues with this proposal:\r\n\r\n#### Performance impact\r\n\r\nRequiring the rule to recursively assess dependencies may have a performance impact on the linting.  \r\n\r\nI'm not sure if this is the case since the rule does a similar check to try to avoid infinite loop. (Maybe I'm wrong and it's not the same thing).  \r\nIf this is too much of an impact, I think it could be opt-in behind a config flag.  \r\nThis would allow people to decide for themselves if the impact is worth it.\r\n\r\n#### Less obvious dependencies\r\n\r\nNot explicitely specifying every used dependency may make it harder to assess the real update impact.  \r\nFrom the above example, I know that my `useEffect` depends on `value`. If it weren't there, I would have to mentally climb up the dependencies myself.  \r\n\r\nI think this is a fake drawback since I always need to climb up the dependencies tree to REALLY know what could cause my effect (or other) to be triggered.  \r\nI would even argue that this proposal makes this mental parsing easier because I don't have any redundancy when reading the dependencies: every variable I see in a dependency array is specified exactly once. (Well, there may be exceptions when it comes to diverging dependencies but it's even more of an improvement in such a situation.)\r\n\r\n## Conclusion\r\n\r\nThis proposal seems to be entirely positive from my point of view. The drawbacks are quite small and an opt-in design may make them even more manageable.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/18873",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/18873/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/18873/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/18873/events",
    "html_url": "https://github.com/facebook/react/issues/18873",
    "id": 615083701,
    "node_id": "MDU6SXNzdWU2MTUwODM3MDE=",
    "number": 18873,
    "title": "Deprecate SyntheticKeyboardEvent.{charCode,keyCode,which}",
    "user": {
      "login": "japgolly",
      "id": 202935,
      "node_id": "MDQ6VXNlcjIwMjkzNQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/202935?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/japgolly",
      "html_url": "https://github.com/japgolly",
      "followers_url": "https://api.github.com/users/japgolly/followers",
      "following_url": "https://api.github.com/users/japgolly/following{/other_user}",
      "gists_url": "https://api.github.com/users/japgolly/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/japgolly/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/japgolly/subscriptions",
      "organizations_url": "https://api.github.com/users/japgolly/orgs",
      "repos_url": "https://api.github.com/users/japgolly/repos",
      "events_url": "https://api.github.com/users/japgolly/events{/privacy}",
      "received_events_url": "https://api.github.com/users/japgolly/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 155984160,
        "node_id": "MDU6TGFiZWwxNTU5ODQxNjA=",
        "url": "https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed",
        "name": "Status: Unconfirmed",
        "color": "d4c5f9",
        "default": false,
        "description": "A potential issue that we haven't yet confirmed as a bug"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-05-09T03:48:45Z",
    "updated_at": "2020-08-08T12:03:12Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "The following `KeyboardEvent` properties have been officially deprecated:\r\n\r\n* https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/charCode\r\n* https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode\r\n* https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/which\r\n\r\nReact should probably mark these as deprecated too, and issue warnings in development mode.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/18865",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/18865/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/18865/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/18865/events",
    "html_url": "https://github.com/facebook/react/pull/18865",
    "id": 614417755,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NDE0OTc5MjYz",
    "number": 18865,
    "title": "Add Mounting/Unmounting Effects/Refs to Offscreen Component",
    "user": {
      "login": "lunaruan",
      "id": 2735514,
      "node_id": "MDQ6VXNlcjI3MzU1MTQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/2735514?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lunaruan",
      "html_url": "https://github.com/lunaruan",
      "followers_url": "https://api.github.com/users/lunaruan/followers",
      "following_url": "https://api.github.com/users/lunaruan/following{/other_user}",
      "gists_url": "https://api.github.com/users/lunaruan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lunaruan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lunaruan/subscriptions",
      "organizations_url": "https://api.github.com/users/lunaruan/orgs",
      "repos_url": "https://api.github.com/users/lunaruan/repos",
      "events_url": "https://api.github.com/users/lunaruan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lunaruan/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-05-08T00:07:21Z",
    "updated_at": "2020-05-08T03:58:14Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/18865",
      "html_url": "https://github.com/facebook/react/pull/18865",
      "diff_url": "https://github.com/facebook/react/pull/18865.diff",
      "patch_url": "https://github.com/facebook/react/pull/18865.patch"
    },
    "body": "This PR expands on #18729 by introducing an `Offscreen` component. This component will eventually be used to hide or unhide children and mount/unmount all effects in the Offscreen subtree. This PR also changes the behavior of effects and refs in the Offscreen component when components are hidden. Previously, when a component is hidden, its effects and refs do not unmount. This PR changes this so that whenever a component is hidden, its effects and ref do unmount. Layout effects and refs will always be unmounted on hide. Passive effects currently do not unmount by default (though there is a mode in which they do unmount), but we are still deciding what the default behavior should be. \r\n\r\nNote: This PR does yet not modify behavior for the current Suspense implementation. This will be added in a subsequent PR.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/18861",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/18861/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/18861/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/18861/events",
    "html_url": "https://github.com/facebook/react/pull/18861",
    "id": 614359855,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NDE0OTMyNTM5",
    "number": 18861,
    "title": "Proposal: react-hooks/exhaustive-deps: a more customizable additionalHooks",
    "user": {
      "login": "dvoytenko",
      "id": 726049,
      "node_id": "MDQ6VXNlcjcyNjA0OQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/726049?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dvoytenko",
      "html_url": "https://github.com/dvoytenko",
      "followers_url": "https://api.github.com/users/dvoytenko/followers",
      "following_url": "https://api.github.com/users/dvoytenko/following{/other_user}",
      "gists_url": "https://api.github.com/users/dvoytenko/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dvoytenko/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dvoytenko/subscriptions",
      "organizations_url": "https://api.github.com/users/dvoytenko/orgs",
      "repos_url": "https://api.github.com/users/dvoytenko/repos",
      "events_url": "https://api.github.com/users/dvoytenko/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dvoytenko/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 20,
    "created_at": "2020-05-07T21:35:18Z",
    "updated_at": "2020-10-28T15:00:19Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/18861",
      "html_url": "https://github.com/facebook/react/pull/18861",
      "diff_url": "https://github.com/facebook/react/pull/18861.diff",
      "patch_url": "https://github.com/facebook/react/pull/18861.patch"
    },
    "body": "## Summary\r\n\r\nThe current `additionalHooks` in the react-hooks/exhaustive-deps eslint plugin accepts a regular expression to match hook names. It always assumes the following format:\r\n\r\n```\r\nfunction useCustomHook(callback, deps) {}\r\n```\r\n\r\nHowever, this format is not always convenient when other arguments are available in the hook's signature, because the set of dependencies could potentially be large. In those cases, it'd be more convenient to place callback and deps as the last two arguments. For instance, the standard `useImperativeHandle` has an additional first argument:\r\n\r\n```\r\nfunction useImperativeHandle(ref, callback, deps) {}\r\n```\r\n\r\nTo enable this, the proposal adds a new property: `additionalHooksMap` that takes a map keyed by a hook name and value specifying `callback` argument offset.\r\n\r\nAn example:\r\n```\r\n[{additionalHooksMap: {\r\n    'useCustomEffect': 1,\r\n    'useAnotherCustomEffect': 2,\r\n    ...\r\n}}]\r\n```\r\n\r\n## Test Plan\r\n\r\nAdded new tests for the new format to the eslint tests.\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/18859",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/18859/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/18859/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/18859/events",
    "html_url": "https://github.com/facebook/react/issues/18859",
    "id": 614073602,
    "node_id": "MDU6SXNzdWU2MTQwNzM2MDI=",
    "number": 18859,
    "title": "Error: \"Commit tree already contains fiber 19587. This is a bug in React DevTools.\"",
    "user": {
      "login": "phoenisx",
      "id": 11786283,
      "node_id": "MDQ6VXNlcjExNzg2Mjgz",
      "avatar_url": "https://avatars1.githubusercontent.com/u/11786283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/phoenisx",
      "html_url": "https://github.com/phoenisx",
      "followers_url": "https://api.github.com/users/phoenisx/followers",
      "following_url": "https://api.github.com/users/phoenisx/following{/other_user}",
      "gists_url": "https://api.github.com/users/phoenisx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/phoenisx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/phoenisx/subscriptions",
      "organizations_url": "https://api.github.com/users/phoenisx/orgs",
      "repos_url": "https://api.github.com/users/phoenisx/repos",
      "events_url": "https://api.github.com/users/phoenisx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/phoenisx/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710573595,
        "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
        "name": "Component: Developer Tools",
        "color": "fbca04",
        "default": false,
        "description": null
      },
      {
        "id": 620368407,
        "node_id": "MDU6TGFiZWw2MjAzNjg0MDc=",
        "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information",
        "name": "Resolution: Needs More Information",
        "color": "fffde7",
        "default": false,
        "description": null
      },
      {
        "id": 40929151,
        "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
        "name": "Type: Bug",
        "color": "b60205",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-05-07T13:49:45Z",
    "updated_at": "2020-05-14T15:57:18Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Describe what you were doing when the bug occurred:\r\n1. I did profiling on a list, that gets updated on each pagination api call.\r\n2. Once the profiling was done, I moved around in the Profiler to view the Flamegraph\r\n3. Moving to second capture, the Profiler crashed.\r\n\r\n\r\n**DevTools version**: 4.6.0-6cceaeb67\r\n\r\n```\r\nComponent stack: in ec\r\n    in div\r\n    in div\r\n    in div\r\n    in So\r\n    in Unknown\r\n    in n\r\n    in Unknown\r\n    in div\r\n    in div\r\n    in rl\r\n    in Ze\r\n    in fn\r\n    in Ga\r\n    in _s\r\n```",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/18857",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/18857/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/18857/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/18857/events",
    "html_url": "https://github.com/facebook/react/issues/18857",
    "id": 613941449,
    "node_id": "MDU6SXNzdWU2MTM5NDE0NDk=",
    "number": 18857,
    "title": "[eslint-plugin-react-hooks] just mark react's implemented hooks as invalid in classes",
    "user": {
      "login": "DoubleU23",
      "id": 5007050,
      "node_id": "MDQ6VXNlcjUwMDcwNTA=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/5007050?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DoubleU23",
      "html_url": "https://github.com/DoubleU23",
      "followers_url": "https://api.github.com/users/DoubleU23/followers",
      "following_url": "https://api.github.com/users/DoubleU23/following{/other_user}",
      "gists_url": "https://api.github.com/users/DoubleU23/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DoubleU23/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DoubleU23/subscriptions",
      "organizations_url": "https://api.github.com/users/DoubleU23/orgs",
      "repos_url": "https://api.github.com/users/DoubleU23/repos",
      "events_url": "https://api.github.com/users/DoubleU23/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DoubleU23/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 155984160,
        "node_id": "MDU6TGFiZWwxNTU5ODQxNjA=",
        "url": "https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed",
        "name": "Status: Unconfirmed",
        "color": "d4c5f9",
        "default": false,
        "description": "A potential issue that we haven't yet confirmed as a bug"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-05-07T10:19:52Z",
    "updated_at": "2020-07-17T11:11:06Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "## The current behavior\r\n`react-hooks/rules-of-hooks` marks custom hooks to be invalid in classes\r\n\r\n## The expected behavior\r\nimho this rules should only mark react's implemented hooks as invalid in classes\r\n\r\n__as the rule states:__\r\n\"React Hook \"useTranslation\" cannot be called in a class component.  \r\nReact Hooks must be called in a React function component __or a custom React Hook function__.\"\r\n\r\n__so it is allowed to use custom hook functions in classes?__ (at least it works)\r\n\r\nif that's wrong (usage of custom hooks), then:\r\n* why does it work\r\n* the rule statement should be changed\r\n\r\n__BTW:__ altought it might be no classical custom hook, maybe just a function using a hook,\r\n__but it should not be marked as hook, just because of the prefix?__\r\n\r\n\r\n## The alternative way\r\n__support a whitelist for that rule?__\r\n\r\nrelated to #15227, #14791, #17636",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/18841",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/18841/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/18841/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/18841/events",
    "html_url": "https://github.com/facebook/react/issues/18841",
    "id": 613294659,
    "node_id": "MDU6SXNzdWU2MTMyOTQ2NTk=",
    "number": 18841,
    "title": "Bug: Error in useEffect is caught in ErrorBoundary, but still logs uncaught error to console in tests",
    "user": {
      "login": "mpeyper",
      "id": 23029903,
      "node_id": "MDQ6VXNlcjIzMDI5OTAz",
      "avatar_url": "https://avatars0.githubusercontent.com/u/23029903?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mpeyper",
      "html_url": "https://github.com/mpeyper",
      "followers_url": "https://api.github.com/users/mpeyper/followers",
      "following_url": "https://api.github.com/users/mpeyper/following{/other_user}",
      "gists_url": "https://api.github.com/users/mpeyper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mpeyper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mpeyper/subscriptions",
      "organizations_url": "https://api.github.com/users/mpeyper/orgs",
      "repos_url": "https://api.github.com/users/mpeyper/repos",
      "events_url": "https://api.github.com/users/mpeyper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mpeyper/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 155984160,
        "node_id": "MDU6TGFiZWwxNTU5ODQxNjA=",
        "url": "https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed",
        "name": "Status: Unconfirmed",
        "color": "d4c5f9",
        "default": false,
        "description": "A potential issue that we haven't yet confirmed as a bug"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-05-06T12:50:33Z",
    "updated_at": "2020-09-06T11:50:42Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 16.13.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. Create a component with a useEffect hook\r\n2. Render the component in an error boundary using `react-test-renderer`\r\n3. Throw an error synchronously in the effect callback (i.e. not in a promise callback)\r\n4. Observe the error in the console\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://github.com/mpeyper/error-boundary-error-repro\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\n> **When you first clone the repo, all the tests are being skipped.  This is to reduce the noise when observing the output.  Please remove the `.skip` from the tests to see the output.**\r\n>\r\n> Note that I have also used `react-error-boundary` for creating the error boundaries in the example repo to simplify the setup, but if you believe this is interfering with test, I'm happy to hand roll an error boundary instead.\r\n\r\nGiven the following two components, the way in which the error is being handled is inconsistent when using `react-test-renderer` vs. `react-dom` (via `@testing-library/react` in my example):\r\n\r\n```jsx\r\nexport function HasErrorInRender() {\r\n  throw Error(\"This error was expected\")\r\n}\r\n\r\nexport function HasErrorInEffect() {\r\n  useEffect(() => {\r\n    throw Error(\"This error was expected\")\r\n  })\r\n\r\n  return <p>This component has an error in an effect</p>\r\n}\r\n```\r\n\r\nWhen rendering with `react-dom`, both [the following tests](https://github.com/mpeyper/error-boundary-error-repro/blob/master/src/HasError.test.js#L7) pass, and produce the same output in the console:\r\n\r\n```jsx\r\ndescribe('@testing-library/react', () => {\r\n  test('should catch error in render', () => {\r\n    let err = null\r\n    function Fallback({ error }) {\r\n      err = error\r\n      return <p>An error was thrown</p>\r\n    }\r\n\r\n    render((\r\n      <ErrorBoundary FallbackComponent={Fallback}>\r\n        <HasErrorInRender />\r\n      </ErrorBoundary>\r\n    ))\r\n\r\n    expect(err).toEqual(Error(\"This error was expected\"))\r\n  })\r\n\r\n  test('should catch error in effect', () => {\r\n    let err = null\r\n    function Fallback({ error }) {\r\n      err = error\r\n      return <p>An error was thrown</p>\r\n    }\r\n\r\n    render((\r\n      <ErrorBoundary FallbackComponent={Fallback}>\r\n        <HasErrorInEffect />\r\n      </ErrorBoundary>\r\n    ))\r\n\r\n    expect(err).toEqual(Error(\"This error was expected\"))\r\n  })\r\n})\r\n```\r\n\r\nThe output they produce is:\r\n\r\n```txt\r\n  console.error node_modules/jsdom/lib/jsdom/virtual-console.js:29\r\n    Error: Uncaught [Error: This error was expected]\r\n        at reportException (/<REDACTED>/error-boundary-error-repro/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)\r\n        at invokeEventListeners (/<REDACTED>/error-boundary-error-repro/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:209:9)\r\n        at HTMLUnknownElementImpl._dispatch (/<REDACTED>/error-boundary-error-repro/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:119:9)\r\n        at HTMLUnknownElementImpl.dispatchEvent (/<REDACTED>/error-boundary-error-repro/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:82:17)\r\n        at HTMLUnknownElementImpl.dispatchEvent (/<REDACTED>/error-boundary-error-repro/node_modules/jsdom/lib/jsdom/living/nodes/HTMLElement-impl.js:30:27)\r\n        at HTMLUnknownElement.dispatchEvent (/<REDACTED>/error-boundary-error-repro/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:157:21)\r\n        at Object.invokeGuardedCallbackDev (/<REDACTED>/error-boundary-error-repro/node_modules/react-dom/cjs/react-dom.development.js:237:16)\r\n        at invokeGuardedCallback (/<REDACTED>/error-boundary-error-repro/node_modules/react-dom/cjs/react-dom.development.js:292:31)\r\n        at beginWork$1 (/<REDACTED>/error-boundary-error-repro/node_modules/react-dom/cjs/react-dom.development.js:23203:7)\r\n        at performUnitOfWork (/<REDACTED>/error-boundary-error-repro/node_modules/react-dom/cjs/react-dom.development.js:22157:12) Error: This error was expected\r\n        at HasErrorInRender (/<REDACTED>/error-boundary-error-repro/src/HasError.js:4:9)\r\n        at renderWithHooks (/<REDACTED>/error-boundary-error-repro/node_modules/react-dom/cjs/react-dom.development.js:14803:18)\r\n        at mountIndeterminateComponent (/<REDACTED>/error-boundary-error-repro/node_modules/react-dom/cjs/react-dom.development.js:17482:13)\r\n        at beginWork (/<REDACTED>/error-boundary-error-repro/node_modules/react-dom/cjs/react-dom.development.js:18596:16)\r\n        at HTMLUnknownElement.callCallback (/<REDACTED>/error-boundary-error-repro/node_modules/react-dom/cjs/react-dom.development.js:188:14)\r\n        at invokeEventListeners (/<REDACTED>/error-boundary-error-repro/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:193:27)\r\n        at HTMLUnknownElementImpl._dispatch (/<REDACTED>/error-boundary-error-repro/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:119:9)\r\n        at HTMLUnknownElementImpl.dispatchEvent (/<REDACTED>/error-boundary-error-repro/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:82:17)\r\n        at HTMLUnknownElementImpl.dispatchEvent (/<REDACTED>/error-boundary-error-repro/node_modules/jsdom/lib/jsdom/living/nodes/HTMLElement-impl.js:30:27)\r\n        at HTMLUnknownElement.dispatchEvent (/<REDACTED>/error-boundary-error-repro/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:157:21)\r\n        at Object.invokeGuardedCallbackDev (/<REDACTED>/error-boundary-error-repro/node_modules/react-dom/cjs/react-dom.development.js:237:16)\r\n        at invokeGuardedCallback (/<REDACTED>/error-boundary-error-repro/node_modules/react-dom/cjs/react-dom.development.js:292:31)\r\n        at beginWork$1 (/<REDACTED>/error-boundary-error-repro/node_modules/react-dom/cjs/react-dom.development.js:23203:7)\r\n        at performUnitOfWork (/<REDACTED>/error-boundary-error-repro/node_modules/react-dom/cjs/react-dom.development.js:22157:12)\r\n        at workLoopSync (/<REDACTED>/error-boundary-error-repro/node_modules/react-dom/cjs/react-dom.development.js:22130:22)\r\n        at performSyncWorkOnRoot (/<REDACTED>/error-boundary-error-repro/node_modules/react-dom/cjs/react-dom.development.js:21756:9)\r\n        at scheduleUpdateOnFiber (/<REDACTED>/error-boundary-error-repro/node_modules/react-dom/cjs/react-dom.development.js:21188:7)\r\n        at updateContainer (/<REDACTED>/error-boundary-error-repro/node_modules/react-dom/cjs/react-dom.development.js:24373:3)\r\n        at /<REDACTED>/error-boundary-error-repro/node_modules/react-dom/cjs/react-dom.development.js:24758:7\r\n        at unbatchedUpdates (/<REDACTED>/error-boundary-error-repro/node_modules/react-dom/cjs/react-dom.development.js:21903:12)\r\n        at legacyRenderSubtreeIntoContainer (/<REDACTED>/error-boundary-error-repro/node_modules/react-dom/cjs/react-dom.development.js:24757:5)\r\n        at Object.render (/<REDACTED>/error-boundary-error-repro/node_modules/react-dom/cjs/react-dom.development.js:24840:10)\r\n        at /<REDACTED>/error-boundary-error-repro/node_modules/@testing-library/react/dist/pure.js:86:25\r\n        at batchedUpdates$1 (/<REDACTED>/error-boundary-error-repro/node_modules/react-dom/cjs/react-dom.development.js:21856:12)\r\n        at act (/<REDACTED>/error-boundary-error-repro/node_modules/react-dom/cjs/react-dom-test-utils.development.js:929:14)\r\n        at render (/<REDACTED>/error-boundary-error-repro/node_modules/@testing-library/react/dist/pure.js:82:26)\r\n        at Object.<anonymous> (/<REDACTED>/error-boundary-error-repro/src/HasError.test.js:15:5)\r\n        at Object.asyncJestTest (/<REDACTED>/error-boundary-error-repro/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:102:37)\r\n        at /<REDACTED>/error-boundary-error-repro/node_modules/jest-jasmine2/build/queueRunner.js:43:12\r\n        at new Promise (<anonymous>)\r\n        at mapper (/<REDACTED>/error-boundary-error-repro/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\r\n        at /<REDACTED>/error-boundary-error-repro/node_modules/jest-jasmine2/build/queueRunner.js:73:41\r\n        at processTicksAndRejections (internal/process/task_queues.js:97:5)\r\n\r\n  console.error node_modules/react-dom/cjs/react-dom.development.js:19527\r\n    The above error occurred in the <HasErrorInRender> component:\r\n        in HasErrorInRender (at HasError.test.js:17)\r\n        in ErrorBoundary (at HasError.test.js:16)\r\n    \r\n    React will try to recreate this component tree from scratch using the error boundary you provided, ErrorBoundary.\r\n```\r\n\r\nThis is somewhat expected when using `react-dom` and reflects the output one would see in the browser console if the some components were rendered in an app (you can run `npm start` in the example repo if you would like to observe this).\r\n\r\nHowever, where things start to get a bit strange is when the renderer is [replaced with `react-test-renderer`](https://github.com/mpeyper/error-boundary-error-repro/blob/master/src/HasError.test.js#L41) and the same tests are run:\r\n\r\n```jsx\r\ndescribe('react-test-renderer', () => {\r\n  test('should catch error in render', () => {\r\n    let err = null\r\n    function Fallback({ error }) {\r\n      err = error\r\n      return <p>An error was thrown</p>\r\n    }\r\n\r\n    act(() => {\r\n      create((\r\n        <ErrorBoundary FallbackComponent={Fallback}>\r\n          <HasErrorInRender />\r\n        </ErrorBoundary>\r\n      ))\r\n    })\r\n\r\n    expect(err).toEqual(Error(\"This error was expected\"))\r\n  })\r\n\r\n  test('should catch error in effect', () => {\r\n    let err = null\r\n    function Fallback({ error }) {\r\n      err = error\r\n      return <p>An error was thrown</p>\r\n    }\r\n\r\n    act(() => {\r\n      create((\r\n        <ErrorBoundary FallbackComponent={Fallback}>\r\n          <HasErrorInEffect />\r\n        </ErrorBoundary>\r\n      ))\r\n    })\r\n\r\n    expect(err).toEqual(Error(\"This error was expected\"))\r\n  })\r\n})\r\n```\r\n\r\nAgain both tests here do pass, but the output they produce is not the same.  When the first test (error in the `render` function) is run, it only produces the following output:\r\n\r\n```txt\r\n  console.error node_modules/react-test-renderer/cjs/react-test-renderer.development.js:10141\r\n    The above error occurred in the <HasErrorInRender> component:\r\n        in HasErrorInRender (at HasError.test.js:52)\r\n        in ErrorBoundary (at HasError.test.js:51)\r\n    \r\n    React will try to recreate this component tree from scratch using the error boundary you provided, ErrorBoundary.\r\n```\r\n\r\nAs you can see, the [frustratingly difficult to suppress](https://github.com/facebook/react/issues/15520) error log from the error boundary is present, but the long stack trace from the uncaught error that is present in the `react-dom` output is not.\r\n\r\nWhen the second test (error in the `useEffect` callback) is run, the output is:\r\n\r\n```txt\r\n  console.error node_modules/jsdom/lib/jsdom/virtual-console.js:29\r\n    Error: Uncaught [Error: This error was expected]\r\n        at reportException (/<REDACTED>/error-boundary-error-repro/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:66:24)\r\n        at invokeEventListeners (/<REDACTED>/error-boundary-error-repro/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:209:9)\r\n        at HTMLUnknownElementImpl._dispatch (/<REDACTED>/error-boundary-error-repro/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:119:9)\r\n        at HTMLUnknownElementImpl.dispatchEvent (/<REDACTED>/error-boundary-error-repro/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:82:17)\r\n        at HTMLUnknownElementImpl.dispatchEvent (/<REDACTED>/error-boundary-error-repro/node_modules/jsdom/lib/jsdom/living/nodes/HTMLElement-impl.js:30:27)\r\n        at HTMLUnknownElement.dispatchEvent (/<REDACTED>/error-boundary-error-repro/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:157:21)\r\n        at Object.invokeGuardedCallbackDev (/<REDACTED>/error-boundary-error-repro/node_modules/react-test-renderer/cjs/react-test-renderer.development.js:10021:16)\r\n        at invokeGuardedCallback (/<REDACTED>/error-boundary-error-repro/node_modules/react-test-renderer/cjs/react-test-renderer.development.js:10073:31)\r\n        at flushPassiveEffectsImpl (/<REDACTED>/error-boundary-error-repro/node_modules/react-test-renderer/cjs/react-test-renderer.development.js:13345:9)\r\n        at unstable_runWithPriority (/<REDACTED>/error-boundary-error-repro/node_modules/scheduler/cjs/scheduler.development.js:653:12) Error: This error was expected\r\n        at /<REDACTED>/error-boundary-error-repro/src/HasError.js:9:11\r\n        at commitHookEffectListMount (/<REDACTED>/error-boundary-error-repro/node_modules/react-test-renderer/cjs/react-test-renderer.development.js:10345:26)\r\n        at commitPassiveHookEffects (/<REDACTED>/error-boundary-error-repro/node_modules/react-test-renderer/cjs/react-test-renderer.development.js:10383:11)\r\n        at HTMLUnknownElement.callCallback (/<REDACTED>/error-boundary-error-repro/node_modules/react-test-renderer/cjs/react-test-renderer.development.js:9972:14)\r\n        at invokeEventListeners (/<REDACTED>/error-boundary-error-repro/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:193:27)\r\n        at HTMLUnknownElementImpl._dispatch (/<REDACTED>/error-boundary-error-repro/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:119:9)\r\n        at HTMLUnknownElementImpl.dispatchEvent (/<REDACTED>/error-boundary-error-repro/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:82:17)\r\n        at HTMLUnknownElementImpl.dispatchEvent (/<REDACTED>/error-boundary-error-repro/node_modules/jsdom/lib/jsdom/living/nodes/HTMLElement-impl.js:30:27)\r\n        at HTMLUnknownElement.dispatchEvent (/<REDACTED>/error-boundary-error-repro/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:157:21)\r\n        at Object.invokeGuardedCallbackDev (/<REDACTED>/error-boundary-error-repro/node_modules/react-test-renderer/cjs/react-test-renderer.development.js:10021:16)\r\n        at invokeGuardedCallback (/<REDACTED>/error-boundary-error-repro/node_modules/react-test-renderer/cjs/react-test-renderer.development.js:10073:31)\r\n        at flushPassiveEffectsImpl (/<REDACTED>/error-boundary-error-repro/node_modules/react-test-renderer/cjs/react-test-renderer.development.js:13345:9)\r\n        at unstable_runWithPriority (/<REDACTED>/error-boundary-error-repro/node_modules/scheduler/cjs/scheduler.development.js:653:12)\r\n        at runWithPriority (/<REDACTED>/error-boundary-error-repro/node_modules/react-test-renderer/cjs/react-test-renderer.development.js:1775:10)\r\n        at flushPassiveEffects (/<REDACTED>/error-boundary-error-repro/node_modules/react-test-renderer/cjs/react-test-renderer.development.js:13312:12)\r\n        at Object.<anonymous>.flushWork (/<REDACTED>/error-boundary-error-repro/node_modules/react-test-renderer/cjs/react-test-renderer.development.js:14883:10)\r\n        at act (/<REDACTED>/error-boundary-error-repro/node_modules/react-test-renderer/cjs/react-test-renderer.development.js:15001:9)\r\n        at Object.<anonymous> (/<REDACTED>/error-boundary-error-repro/src/HasError.test.js:67:5)\r\n        at Object.asyncJestTest (/<REDACTED>/error-boundary-error-repro/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:102:37)\r\n        at /<REDACTED>/error-boundary-error-repro/node_modules/jest-jasmine2/build/queueRunner.js:43:12\r\n        at new Promise (<anonymous>)\r\n        at mapper (/<REDACTED>/error-boundary-error-repro/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\r\n        at /<REDACTED>/error-boundary-error-repro/node_modules/jest-jasmine2/build/queueRunner.js:73:41\r\n        at processTicksAndRejections (internal/process/task_queues.js:97:5)\r\n\r\n  console.error node_modules/react-test-renderer/cjs/react-test-renderer.development.js:10141\r\n    The above error occurred in the <HasErrorInEffect> component:\r\n        in HasErrorInEffect (at HasError.test.js:70)\r\n        in ErrorBoundary (at HasError.test.js:69)\r\n    \r\n    React will try to recreate this component tree from scratch using the error boundary you provided, ErrorBoundary.\r\n```\r\n\r\nNow, the uncaught error message is back, which is not what I would have expected.  Even more confusingly, when inspecting the stacktrace of the uncaught error, it has references to `jsdom` which I was of the belief was not a dependency of `react-test-renderer`.  I suspect that there is some `jest` and/or `jsdom` trickery going on to report the uncaught error, rather than `react-test-renderer` using it in some way, but I'm not familiar enough with any of them to know for certain.\r\n\r\nThe part that's has me the most perplexed is how the error boundary can intercept the error to pass into it's handler callbacks (surfaced in my example in `react-error-boundary`'s `FallbackComponent`) without catching the error, unless it is throwing it again after catching it, but then both tests would be producing the uncaught error output, right?\r\n\r\n## The expected behavior\r\n\r\nMy expected (and preferred) behaviour here would be for the the `react-test-renderer` test to only produce the error boundary error log and not have any additional uncaught error output.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/18836",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/18836/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/18836/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/18836/events",
    "html_url": "https://github.com/facebook/react/pull/18836",
    "id": 612959558,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NDEzODA1NjE5",
    "number": 18836,
    "title": "[WIP] SuspenseList should do a second pass if all children are dehydrated",
    "user": {
      "login": "sebmarkbage",
      "id": 63648,
      "node_id": "MDQ6VXNlcjYzNjQ4",
      "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sebmarkbage",
      "html_url": "https://github.com/sebmarkbage",
      "followers_url": "https://api.github.com/users/sebmarkbage/followers",
      "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
      "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
      "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
      "repos_url": "https://api.github.com/users/sebmarkbage/repos",
      "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-05-05T23:40:05Z",
    "updated_at": "2020-05-07T06:57:06Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/18836",
      "html_url": "https://github.com/facebook/react/pull/18836",
      "diff_url": "https://github.com/facebook/react/pull/18836.diff",
      "patch_url": "https://github.com/facebook/react/pull/18836.patch"
    },
    "body": "SuspenseList doesn't trigger the \"together\" mode when all children are client rendered.\r\n\r\nThe issue here is that we have an optimization to figure out if the list might be suspended:\r\nhttps://github.com/facebook/react/blob/master/packages/react-reconciler/src/ReactFiberCompleteWork.old.js#L1033\r\n\r\nThis doesn't trigger when we're hitting client-rendered boundaries that are still in fallback states because we leave them behind so they don't \"suspend\" this pass.\r\n\r\nOne fix could be triggering renderDidSuspend in this case. It might not be the right fix because there's no need to suspend *this* commit really. Maybe it could be a different flag. It also causes a second pass over the list which delays actually getting to the client rendering.\r\n\r\nThis fix reveals three other bugs that are already observable in other scenarios:\r\n\r\n- [ ] Doing a second pass over the list causes hydration state to get confused so we forget about the content we already hydrated and never delete them. Leaving us with duplicate loading states, forever.\r\n- [ ] In the old reconciler, this causes an infinite loop because suspending means that we try the scheduled work for the dehydrated boundary to unblock, which schedules more work etc.\r\n- [x] ~In the new reconciler, this causes the real content to never commit. It just stays at the fallback for some reason. Not sure why.~ This is not a bug. The test error reflects a behavior change, that we probably don't want.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/18835",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/18835/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/18835/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/18835/events",
    "html_url": "https://github.com/facebook/react/issues/18835",
    "id": 612934072,
    "node_id": "MDU6SXNzdWU2MTI5MzQwNzI=",
    "number": 18835,
    "title": "useMutableSource: Release version snapshots once hydration is finished",
    "user": {
      "login": "bvaughn",
      "id": 29597,
      "node_id": "MDQ6VXNlcjI5NTk3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bvaughn",
      "html_url": "https://github.com/bvaughn",
      "followers_url": "https://api.github.com/users/bvaughn/followers",
      "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
      "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
      "organizations_url": "https://api.github.com/users/bvaughn/orgs",
      "repos_url": "https://api.github.com/users/bvaughn/repos",
      "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bvaughn/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "bvaughn",
      "id": 29597,
      "node_id": "MDQ6VXNlcjI5NTk3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bvaughn",
      "html_url": "https://github.com/bvaughn",
      "followers_url": "https://api.github.com/users/bvaughn/followers",
      "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
      "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
      "organizations_url": "https://api.github.com/users/bvaughn/orgs",
      "repos_url": "https://api.github.com/users/bvaughn/repos",
      "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bvaughn/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "bvaughn",
        "id": 29597,
        "node_id": "MDQ6VXNlcjI5NTk3",
        "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bvaughn",
        "html_url": "https://github.com/bvaughn",
        "followers_url": "https://api.github.com/users/bvaughn/followers",
        "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
        "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
        "organizations_url": "https://api.github.com/users/bvaughn/orgs",
        "repos_url": "https://api.github.com/users/bvaughn/repos",
        "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bvaughn/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-05-05T22:28:47Z",
    "updated_at": "2020-05-05T22:29:47Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "Follow up for #18183 and PR #18771.\r\n\r\nDecide when to clear `mutableSourceEagerHydrationData`. We don't currently have a way to detect when all outstanding hydration work is finished. (It may never finish.) This means that in use cases where the version is the entire sore (e.g. an immutable store without a version \"number\") we would retain a reference to that store, preventing it from being GCed.\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/18822",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/18822/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/18822/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/18822/events",
    "html_url": "https://github.com/facebook/react/issues/18822",
    "id": 612218315,
    "node_id": "MDU6SXNzdWU2MTIyMTgzMTU=",
    "number": 18822,
    "title": "Add devtools \"Inspect React component\" to right-click menu",
    "user": {
      "login": "sophiebits",
      "id": 6820,
      "node_id": "MDQ6VXNlcjY4MjA=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/6820?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sophiebits",
      "html_url": "https://github.com/sophiebits",
      "followers_url": "https://api.github.com/users/sophiebits/followers",
      "following_url": "https://api.github.com/users/sophiebits/following{/other_user}",
      "gists_url": "https://api.github.com/users/sophiebits/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sophiebits/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sophiebits/subscriptions",
      "organizations_url": "https://api.github.com/users/sophiebits/orgs",
      "repos_url": "https://api.github.com/users/sophiebits/repos",
      "events_url": "https://api.github.com/users/sophiebits/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sophiebits/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710573595,
        "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
        "name": "Component: Developer Tools",
        "color": "fbca04",
        "default": false,
        "description": null
      },
      {
        "id": 121709921,
        "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
        "name": "Type: Feature Request",
        "color": "c7def8",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-05-04T22:50:47Z",
    "updated_at": "2020-09-02T13:04:48Z",
    "closed_at": null,
    "author_association": "COLLABORATOR",
    "active_lock_reason": null,
    "body": "Noticed today that Vue's devtools have an awesome \"Inspect Vue component\" option when right-clicking on a webpage (added in https://github.com/vuejs/vue-devtools/pull/479).\r\n\r\nThe React devtools should have the same feature! It would be useful when debugging for sure.\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/18818",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/18818/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/18818/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/18818/events",
    "html_url": "https://github.com/facebook/react/issues/18818",
    "id": 612059866,
    "node_id": "MDU6SXNzdWU2MTIwNTk4NjY=",
    "number": 18818,
    "title": "Bug: devtools profiler flamegraph \"rendered at\" tooltip equal for all entries",
    "user": {
      "login": "eps1lon",
      "id": 12292047,
      "node_id": "MDQ6VXNlcjEyMjkyMDQ3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/12292047?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eps1lon",
      "html_url": "https://github.com/eps1lon",
      "followers_url": "https://api.github.com/users/eps1lon/followers",
      "following_url": "https://api.github.com/users/eps1lon/following{/other_user}",
      "gists_url": "https://api.github.com/users/eps1lon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eps1lon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eps1lon/subscriptions",
      "organizations_url": "https://api.github.com/users/eps1lon/orgs",
      "repos_url": "https://api.github.com/users/eps1lon/repos",
      "events_url": "https://api.github.com/users/eps1lon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eps1lon/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710573595,
        "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
        "name": "Component: Developer Tools",
        "color": "fbca04",
        "default": false,
        "description": null
      },
      {
        "id": 1775957182,
        "node_id": "MDU6TGFiZWwxNzc1OTU3MTgy",
        "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale",
        "name": "Resolution: Stale",
        "color": "e6e6e6",
        "default": false,
        "description": "Automatically closed due to inactivity"
      },
      {
        "id": 155984160,
        "node_id": "MDU6TGFiZWwxNTU5ODQxNjA=",
        "url": "https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed",
        "name": "Status: Unconfirmed",
        "color": "d4c5f9",
        "default": false,
        "description": "A potential issue that we haven't yet confirmed as a bug"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-05-04T17:58:37Z",
    "updated_at": "2020-10-12T01:57:08Z",
    "closed_at": null,
    "author_association": "COLLABORATOR",
    "active_lock_reason": null,
    "body": "\r\n\r\nReact version: 16.13.1\r\ndevtools version: 4.6.0 (3/26/2020). Created from revision 6cceaeb67 on 3/26/2020.\r\n\r\n## Steps To Reproduce\r\n\r\n1. Record profiling session\r\n2. Goto flamegraph\r\n3. Hover over individual bars\r\n\r\nLink to code example: https://codesandbox.io/s/cocky-rain-uuoi8?file=/src/index.js\r\n\r\n## The current behavior\r\n\r\n\"rendered at\" uses the value from the root component\r\n\r\n![Screenshot from 2020-05-04 19-56-13](https://user-images.githubusercontent.com/12292047/80997253-5519e400-8e41-11ea-870b-9ed4a8311a30.png)\r\n\r\n\r\n\r\n\r\n## The expected behavior\r\n\r\nit should use the value from the component hovered. Otherwise I don't see much value in displaying it since I could just read the value directly from the root. I thought it was intended for very dense flamegraphs e.g.\r\n![Screenshot from 2020-05-04 19-53-53](https://user-images.githubusercontent.com/12292047/80996992-02402c80-8e41-11ea-9396-f3777c01cf4d.png)\r\n\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/18814",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/18814/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/18814/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/18814/events",
    "html_url": "https://github.com/facebook/react/pull/18814",
    "id": 611930398,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NDEyOTk1MjY3",
    "number": 18814,
    "title": "[Memory Leaks] Detach Fibers from nodes with refs",
    "user": {
      "login": "gaearon",
      "id": 810438,
      "node_id": "MDQ6VXNlcjgxMDQzOA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gaearon",
      "html_url": "https://github.com/gaearon",
      "followers_url": "https://api.github.com/users/gaearon/followers",
      "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
      "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
      "organizations_url": "https://api.github.com/users/gaearon/orgs",
      "repos_url": "https://api.github.com/users/gaearon/repos",
      "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gaearon/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2020-05-04T14:43:37Z",
    "updated_at": "2020-10-09T17:03:47Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/18814",
      "html_url": "https://github.com/facebook/react/pull/18814",
      "diff_url": "https://github.com/facebook/react/pull/18814.diff",
      "patch_url": "https://github.com/facebook/react/pull/18814.patch"
    },
    "body": "A more restrained alternative to https://github.com/facebook/react/pull/18690.\r\nAddresses @sebmarkbage's proposal in https://github.com/facebook/react/issues/16087:\r\n\r\n> If a handle on a DOM node is leaked, it takes the React tree with it. This is a fairly easy mistake to make and the effect is pretty high. What we would do here is special case DOM nodes with refs on them, and always detach their back pointer to the React Fiber, if it was ever fully mounted. We currently traverse these trees anyway when they get deleted. We want to stop doing this for most things but for nodes with a ref it seems minor to special case since they typically need to be invoked with null anyway.\r\n\r\nNote: this does not fix any memory leak **in React**; it just makes the impact of **userland** memory leaks less severe.\r\n\r\n**[View without whitespace](https://github.com/facebook/react/compare/master...gaearon:detach-ref?w=1)**\r\n\r\nI checked that this works manually:\r\n\r\n<img width=\"602\" alt=\"Screenshot 2020-05-04 at 15 37 12\" src=\"https://user-images.githubusercontent.com/810438/80978901-90ef8200-8e1e-11ea-9200-e88f81c62ee7.png\">\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/18807",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/18807/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/18807/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/18807/events",
    "html_url": "https://github.com/facebook/react/pull/18807",
    "id": 611469996,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NDEyNjQwOTEx",
    "number": 18807,
    "title": "[Not to be landed] Allow stack to be prepared manually",
    "user": {
      "login": "sebmarkbage",
      "id": 63648,
      "node_id": "MDQ6VXNlcjYzNjQ4",
      "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sebmarkbage",
      "html_url": "https://github.com/sebmarkbage",
      "followers_url": "https://api.github.com/users/sebmarkbage/followers",
      "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
      "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
      "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
      "repos_url": "https://api.github.com/users/sebmarkbage/repos",
      "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-05-03T17:58:07Z",
    "updated_at": "2020-05-03T18:04:33Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/18807",
      "html_url": "https://github.com/facebook/react/pull/18807",
      "diff_url": "https://github.com/facebook/react/pull/18807.diff",
      "patch_url": "https://github.com/facebook/react/pull/18807.patch"
    },
    "body": "I experimented with making it so that custom prepareStackTrace could be used with our stacks.\r\n\r\nIt didn't really pan out all that well because they need an Error object and sometimes prepend the error message etc. where as our stacks don't do that.\r\n\r\nI'm also not sure it's worth the code because this is not cross-browser compatible.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/18790",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/18790/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/18790/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/18790/events",
    "html_url": "https://github.com/facebook/react/issues/18790",
    "id": 610206261,
    "node_id": "MDU6SXNzdWU2MTAyMDYyNjE=",
    "number": 18790,
    "title": "Memory Leak - React DOM keeps references to stale child components when using the Container/Pure component pattern",
    "user": {
      "login": "jzworkman",
      "id": 7489458,
      "node_id": "MDQ6VXNlcjc0ODk0NTg=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/7489458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jzworkman",
      "html_url": "https://github.com/jzworkman",
      "followers_url": "https://api.github.com/users/jzworkman/followers",
      "following_url": "https://api.github.com/users/jzworkman/following{/other_user}",
      "gists_url": "https://api.github.com/users/jzworkman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jzworkman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jzworkman/subscriptions",
      "organizations_url": "https://api.github.com/users/jzworkman/orgs",
      "repos_url": "https://api.github.com/users/jzworkman/repos",
      "events_url": "https://api.github.com/users/jzworkman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jzworkman/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 13,
    "created_at": "2020-04-30T16:16:52Z",
    "updated_at": "2020-10-01T21:14:55Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Do you want to request a feature or report a bug?**\r\nReport a bug.\r\n\r\n**What is the current behavior?**\r\nReactDOM keeps references to previous states/props/children when component gets updated. All in all consuming three times as much memory as it really needed.\r\n\r\nWe are seeing this as a significant issue when using Redux and container components. When our container componet(that is connected to redux store) passes props to the child components, and then the redux store updates. The child component props are being stranded in the dom with old reference(seen in the heap after forcing a garbage collection cycle). This is causing huge amounts of memory bloat when on a page that is connected to signalR for real time collaboration between users(as each redux update creates hundreds of stranded object references in the child components).\r\n\r\nI have verified that this is the cause by instead having all of the previously \"dumb\" pure child components be converted to Connected components and pull their props from redux instead of having the container component pattern control all of the store connections. this then correctly all references the single redux store object and garbage collection works as expected without stranded references.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nLink to the example below (using production versions of react and react-dom):\r\nhttps://codesandbox.io/s/epic-bartik-pvgqx.\r\n\r\nConsider following example:\r\n\r\n```\r\nimport * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\n\r\nlet dataInstanceCount = 0;\r\nclass MyBigData {\r\n  constructor() {\r\n    const id = `my-big-data:${dataInstanceCount++}`;\r\n    this.getMyDataId = () => id;\r\n    this.data = new Array(100000).fill('');\r\n  }\r\n}\r\n\r\nlet componentInstanceCount = 0;\r\nclass MyItem extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this._myItemId = `my-item:${componentInstanceCount++}`;\r\n    this.state = {list: []};\r\n  }\r\n\r\n  render() {\r\n    return this.props.item.getMyDataId();\r\n  }\r\n}\r\n\r\nclass MyApp extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {list: []};\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.updateList(() => {\r\n      this.updateList(() => {\r\n        this.updateList();\r\n      });\r\n    });\r\n  }\r\n\r\n  updateList(callback) {\r\n    this.setState({\r\n      list: [new MyBigData()]\r\n    }, callback);\r\n  }\r\n\r\n  render() {\r\n    return this.state.list.map((item) => (\r\n      <MyItem key={item.getMyDataId()} item={item} />\r\n    ));\r\n  }\r\n}\r\n\r\nconst rootElement = document.getElementById('root');\r\nReactDOM.render(\r\n  <MyApp />,\r\n  rootElement\r\n);\r\n\r\nsetTimeout(() => {\r\n  console.log(\r\n    rootElement._reactRootContainer._internalRoot.current.alternate.firstEffect.memoizedProps.item.getMyDataId(),\r\n    rootElement._reactRootContainer._internalRoot.current.alternate.firstEffect.stateNode._myItemId\r\n  );\r\n  // > my-big-data:0, my-item:0\r\n  console.log(\r\n    rootElement._reactRootContainer._internalRoot.current.firstEffect.memoizedProps.item.getMyDataId(),\r\n    rootElement._reactRootContainer._internalRoot.current.firstEffect.stateNode._myItemId\r\n  );\r\n  // > my-big-data:1, my-item:1\r\n  console.log(\r\n    rootElement._reactRootContainer._internalRoot.current.lastEffect.memoizedProps.item.getMyDataId(),\r\n    rootElement._reactRootContainer._internalRoot.current.lastEffect.stateNode._myItemId\r\n  );\r\n  // > my-big-data:2, my-item:2\r\n}, 1000);\r\n```\r\nI expect only one MyBigObject and one MyItem component to be in the memory. But instead I can see three of each in memory heap snapshot.\r\n\r\n**UPDATE**\r\nAs shown in the updated example the references to these objects and components can be accessed in the sub-properties of the root DOM element.\r\n\r\n**What is the expected behavior?**\r\nThere's no justifiable reason to keep in memory unmounted components and previous states/props of component after it was updated.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact 16.9.0, ReactDOM 16.9.0 (Production versions)\r\nMac/Win\r\n\r\nThis info was gathered from the follow issue that was marked stale, but is still definitely an issue with Redux and passing store props to Pure Child unconnected components: https://github.com/facebook/react/issues/16138 ",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/18789",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/18789/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/18789/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/18789/events",
    "html_url": "https://github.com/facebook/react/pull/18789",
    "id": 610128735,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NDExNjE5NzQ1",
    "number": 18789,
    "title": "[Blocks] Cancellation",
    "user": {
      "login": "gaearon",
      "id": 810438,
      "node_id": "MDQ6VXNlcjgxMDQzOA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gaearon",
      "html_url": "https://github.com/gaearon",
      "followers_url": "https://api.github.com/users/gaearon/followers",
      "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
      "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
      "organizations_url": "https://api.github.com/users/gaearon/orgs",
      "repos_url": "https://api.github.com/users/gaearon/repos",
      "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gaearon/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-04-30T15:15:38Z",
    "updated_at": "2020-05-03T18:15:43Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/18789",
      "html_url": "https://github.com/facebook/react/pull/18789",
      "diff_url": "https://github.com/facebook/react/pull/18789.diff",
      "patch_url": "https://github.com/facebook/react/pull/18789.patch"
    },
    "body": "This is just the initial wiring. I don't know if it actually makes sense yet. I don't understand *where* and *when* we should cancel. My first naïve approach was to cancel in the reducer, but that doesn't work because I can't read from the same cache anymore. So I think I'm missing something in how this relates to Here/There. But posting anyway because it might be easier to discuss in code.\r\n\r\nMaybe it would help to change my example app to a more traditional navigation model. E.g. master/detail with links.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/18777",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/18777/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/18777/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/18777/events",
    "html_url": "https://github.com/facebook/react/issues/18777",
    "id": 608964695,
    "node_id": "MDU6SXNzdWU2MDg5NjQ2OTU=",
    "number": 18777,
    "title": "Bug: Stop browser hanging on Maximum update depth exceeded ",
    "user": {
      "login": "laclance",
      "id": 10835285,
      "node_id": "MDQ6VXNlcjEwODM1Mjg1",
      "avatar_url": "https://avatars2.githubusercontent.com/u/10835285?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laclance",
      "html_url": "https://github.com/laclance",
      "followers_url": "https://api.github.com/users/laclance/followers",
      "following_url": "https://api.github.com/users/laclance/following{/other_user}",
      "gists_url": "https://api.github.com/users/laclance/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laclance/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laclance/subscriptions",
      "organizations_url": "https://api.github.com/users/laclance/orgs",
      "repos_url": "https://api.github.com/users/laclance/repos",
      "events_url": "https://api.github.com/users/laclance/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laclance/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 155984160,
        "node_id": "MDU6TGFiZWwxNTU5ODQxNjA=",
        "url": "https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed",
        "name": "Status: Unconfirmed",
        "color": "d4c5f9",
        "default": false,
        "description": "A potential issue that we haven't yet confirmed as a bug"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-04-29T11:01:30Z",
    "updated_at": "2020-07-29T16:20:20Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "React version: 16.13.1\r\nOS: Windows 10\r\nBrowser: Google chrome 81.0.4044.122\r\n\r\nWhenever I incorrectly use useEffect hook and get the Maximum update depth exceeded error the chrome tab hangs and I have to force close using task manager and reopen chrome again in order to close the tab. This makes debugging the cause very time consuming and annoying, is there a way to avoid this? like for example stop rendering after 100 renders.\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/18768",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/18768/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/18768/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/18768/events",
    "html_url": "https://github.com/facebook/react/issues/18768",
    "id": 608397761,
    "node_id": "MDU6SXNzdWU2MDgzOTc3NjE=",
    "number": 18768,
    "title": "Bug: `React.lazy` throws undefined instead of an `Error` object",
    "user": {
      "login": "mischnic",
      "id": 4586894,
      "node_id": "MDQ6VXNlcjQ1ODY4OTQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/4586894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mischnic",
      "html_url": "https://github.com/mischnic",
      "followers_url": "https://api.github.com/users/mischnic/followers",
      "following_url": "https://api.github.com/users/mischnic/following{/other_user}",
      "gists_url": "https://api.github.com/users/mischnic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mischnic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mischnic/subscriptions",
      "organizations_url": "https://api.github.com/users/mischnic/orgs",
      "repos_url": "https://api.github.com/users/mischnic/repos",
      "events_url": "https://api.github.com/users/mischnic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mischnic/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 40929151,
        "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
        "name": "Type: Bug",
        "color": "b60205",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-04-28T15:13:02Z",
    "updated_at": "2020-05-22T02:49:29Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "React version: 16.13.1\r\n\r\n## Steps To Reproduce\r\n\r\n```js\r\nimport React, { Suspense, lazy } from \"react\";\r\n\r\nconst Async = lazy(() => {}); // <------\r\n\r\nlet App = () => {\r\n\treturn (\r\n\t\t<Suspense fallback={\"Loading\"}>\r\n\t\t\t<Async />\r\n\t\t</Suspense>\r\n\t);\r\n};\r\n\r\nexport default App;\r\n```\r\n\r\nLink to code example: https://codesandbox.io/s/elegant-fermi-bxwtb\r\n\r\nMight be related to https://github.com/facebook/react/issues/15019, https://github.com/facebook/react/pull/15222\r\n\r\n## Context\r\n\r\nI know that this is incorrect code, but `lazy(() => {import(...)})` is a rather easy typo to make.\r\nThe main reason why I'm bringing this is up is that other tools (like JSDOM and Codesandbox with the link above) expect an `Error` object to be thrown. \r\n\r\n## The current behavior\r\n\r\n\r\n**Input**: `const Async = lazy(async () => ({}));`\r\n**Error**: (this is correct)\r\n```\r\nWarning: lazy: Expected the result of a dynamic import() call. Instead received: [object Object]\r\n\r\nYour code should look like: \r\n  const MyComponent = lazy(() => import('./MyComponent'))\r\n```\r\n\r\n**Input**: `const Async = lazy(() => ({}));`\r\n**Error**: (the exception is not an `Error` object)\r\n```\r\nUncaught {}\r\n```\r\n\r\n**Input**: `const Async = lazy(() => {});`\r\n**Error**:  (the exception is not an `Error` object)\r\n```\r\nUncaught undefined\r\n```\r\n\r\n\r\n## The expected behavior\r\n\r\n**Input**: `const Async = lazy(async () => ({}));`\r\n**Error**:\r\n```\r\nWarning: lazy: Expected the result of a dynamic import() call. Instead received: [object Object]\r\n\r\nYour code should look like: \r\n  const MyComponent = lazy(() => import('./MyComponent'))\r\n```\r\n\r\n**Input**: `const Async = lazy(() => ({}));`\r\n**Error**:\r\n```\r\nWarning: lazy: Expected the result of a dynamic import() call. Instead received: undefined\r\n\r\nYour code should look like: \r\n  const MyComponent = lazy(() => import('./MyComponent'))\r\n```\r\n\r\n**Input**: `const Async = lazy(() => {});`\r\n**Error**:\r\n```\r\nWarning: lazy: Expected the result of a dynamic import() call. Instead received: [object Object]\r\n\r\nYour code should look like: \r\n  const MyComponent = lazy(() => import('./MyComponent'))\r\n```",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/18758",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/18758/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/18758/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/18758/events",
    "html_url": "https://github.com/facebook/react/issues/18758",
    "id": 607852922,
    "node_id": "MDU6SXNzdWU2MDc4NTI5MjI=",
    "number": 18758,
    "title": "Jest: Cannot assign to read only property '...' of object '...'",
    "user": {
      "login": "bvaughn",
      "id": 29597,
      "node_id": "MDQ6VXNlcjI5NTk3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bvaughn",
      "html_url": "https://github.com/bvaughn",
      "followers_url": "https://api.github.com/users/bvaughn/followers",
      "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
      "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
      "organizations_url": "https://api.github.com/users/bvaughn/orgs",
      "repos_url": "https://api.github.com/users/bvaughn/repos",
      "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bvaughn/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": true,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 11,
    "created_at": "2020-04-27T21:05:31Z",
    "updated_at": "2020-08-21T17:38:30Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": "off-topic",
    "body": "Right now in the React repo this test...\r\n```js\r\nfit('blah', () => {\r\n  expect(document.createElement('div')).toBe(document.createElement('div'));\r\n});\r\n```\r\n...fails with the following meaningless error message:\r\n> TypeError: Cannot assign to read only property 'Symbol(impl)' of object '[object DOMImplementation]'\r\n\r\n<img width=\"628\" alt=\"Screen Shot 2020-04-27 at 2 04 19 PM\" src=\"https://user-images.githubusercontent.com/29597/80420721-12c83400-8890-11ea-919f-e1b10b6fc561.png\">\r\n\r\nApparently @trueadm mentions that this broke sometime recently because of a change we made. (I don't have details.) Its a pretty confusing behavior though.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/18752",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/18752/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/18752/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/18752/events",
    "html_url": "https://github.com/facebook/react/issues/18752",
    "id": 607468212,
    "node_id": "MDU6SXNzdWU2MDc0NjgyMTI=",
    "number": 18752,
    "title": "Bug: <iframe /> onLoad is not getting triggered after the reload triggered by moving the DOM Node",
    "user": {
      "login": "adamziel",
      "id": 205419,
      "node_id": "MDQ6VXNlcjIwNTQxOQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/205419?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamziel",
      "html_url": "https://github.com/adamziel",
      "followers_url": "https://api.github.com/users/adamziel/followers",
      "following_url": "https://api.github.com/users/adamziel/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamziel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamziel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamziel/subscriptions",
      "organizations_url": "https://api.github.com/users/adamziel/orgs",
      "repos_url": "https://api.github.com/users/adamziel/repos",
      "events_url": "https://api.github.com/users/adamziel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamziel/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710722093,
        "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
        "name": "Type: Needs Investigation",
        "color": "fbca04",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2020-04-27T11:26:46Z",
    "updated_at": "2020-07-21T22:53:59Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "When an `<iframe />` DOM Node is moved to a different place in the tree, Chrome triggers a reload. That reload does not notify event handlers registered via `onLoad=`. In other words:\r\n\r\n* If there is an event handler registered via `onLoad={myCallback}`, it **will not** be fired.\r\n* If there is an event handler registered via `iframe.addEventListener(\"load\", myCallback, false)`, it **will** be fired.\r\n\r\nReact version: 16.13.1\r\n\r\n## Steps To Reproduce\r\n\r\nOpen a code example below and move the iframe **down** using arrow button next to it.\r\n\r\nhttps://codesandbox.io/s/serverless-surf-k1ypg?file=/src/App.js\r\n\r\n## The current behavior\r\n\r\nThe iframe does not say \"Initialized\" anymore.\r\n\r\n## The expected behavior\r\n\r\nThe iframe should say \"Initialized\".\r\n\r\n## Other notes\r\n\r\nIf you move `setIframeContent(e.currentTarget);` to `nativeLoad` and repeat the steps above, it works as expected. The bug does not occur in Firefox.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/18746",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/18746/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/18746/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/18746/events",
    "html_url": "https://github.com/facebook/react/pull/18746",
    "id": 607026219,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NDA5MDkzMzUw",
    "number": 18746,
    "title": "DevTools: Keyboard arrow-key navigation for the flamegraph view",
    "user": {
      "login": "ChrisDobby",
      "id": 434389,
      "node_id": "MDQ6VXNlcjQzNDM4OQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/434389?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ChrisDobby",
      "html_url": "https://github.com/ChrisDobby",
      "followers_url": "https://api.github.com/users/ChrisDobby/followers",
      "following_url": "https://api.github.com/users/ChrisDobby/following{/other_user}",
      "gists_url": "https://api.github.com/users/ChrisDobby/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ChrisDobby/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ChrisDobby/subscriptions",
      "organizations_url": "https://api.github.com/users/ChrisDobby/orgs",
      "repos_url": "https://api.github.com/users/ChrisDobby/repos",
      "events_url": "https://api.github.com/users/ChrisDobby/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ChrisDobby/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-04-26T14:30:21Z",
    "updated_at": "2020-08-16T11:03:17Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/18746",
      "html_url": "https://github.com/facebook/react/pull/18746",
      "diff_url": "https://github.com/facebook/react/pull/18746.diff",
      "patch_url": "https://github.com/facebook/react/pull/18746.patch"
    },
    "body": "<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n\r\nFixes #16472\r\n\r\nSelected node now displays with a diagonal hatch.\r\n\r\nUp arrow moves to parent, left/right move to previous/next sibling and wrap at the end/beginning of the row.\r\n\r\n## Test Plan\r\n\r\n<!-- Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface. -->\r\n![flamegraph-keyboard](https://user-images.githubusercontent.com/434389/80310458-cb2fa280-87d2-11ea-908e-91369f74bdc5.gif)\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/18721",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/18721/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/18721/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/18721/events",
    "html_url": "https://github.com/facebook/react/pull/18721",
    "id": 605862048,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NDA4MTg4NTY1",
    "number": 18721,
    "title": "Bug/Test: Add fuzzing tests for React.Suspense",
    "user": {
      "login": "dubzzz",
      "id": 5300235,
      "node_id": "MDQ6VXNlcjUzMDAyMzU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/5300235?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dubzzz",
      "html_url": "https://github.com/dubzzz",
      "followers_url": "https://api.github.com/users/dubzzz/followers",
      "following_url": "https://api.github.com/users/dubzzz/following{/other_user}",
      "gists_url": "https://api.github.com/users/dubzzz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dubzzz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dubzzz/subscriptions",
      "organizations_url": "https://api.github.com/users/dubzzz/orgs",
      "repos_url": "https://api.github.com/users/dubzzz/repos",
      "events_url": "https://api.github.com/users/dubzzz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dubzzz/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 17,
    "created_at": "2020-04-23T20:50:32Z",
    "updated_at": "2020-10-28T20:05:07Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/18721",
      "html_url": "https://github.com/facebook/react/pull/18721",
      "diff_url": "https://github.com/facebook/react/pull/18721.diff",
      "patch_url": "https://github.com/facebook/react/pull/18721.patch"
    },
    "body": "\r\n<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n\r\nThis PR introduces a new test for `React.Suspense`. The suggested test is fully based on fuzzing and relies on fast-check library to handle fuzzing and shrinking. It reported the following error - _after shrinking_ - on my side:\r\n```\r\n[Scheduler`\r\n      -> [task#2] sequence::Scheduling \"8\" with priority 3 resolved\r\n      -> [task#1] promise::Request for \"447b0ed\" resolved with value \"resolved 447b0ed!\"`,\"447b0ed\",[{\"priority\":3,\"text\":\"8\"}],<function :: [\"447b0ed\"] => true, [\"8\"] => true>]\r\n```\r\nReproduced by https://codesandbox.io/s/strange-frost-d4ujl?file=/src/App.js\r\n\r\nIssue related to #18669\r\n\r\n**As adding a new library into React might be problematic, feel free to close this PR if it does not make sense or is not useful anymore.** Not adding this library would require to develop a scheduler like the one offered by fast-check in the test suite of react.\r\n\r\n## Test Plan\r\n\r\n<!-- Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface. -->\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/18690",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/18690/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/18690/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/18690/events",
    "html_url": "https://github.com/facebook/react/pull/18690",
    "id": 604119835,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NDA2NzczNjYz",
    "number": 18690,
    "title": "Clear fiber field from host instance on unmount",
    "user": {
      "login": "trueadm",
      "id": 1519870,
      "node_id": "MDQ6VXNlcjE1MTk4NzA=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1519870?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/trueadm",
      "html_url": "https://github.com/trueadm",
      "followers_url": "https://api.github.com/users/trueadm/followers",
      "following_url": "https://api.github.com/users/trueadm/following{/other_user}",
      "gists_url": "https://api.github.com/users/trueadm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/trueadm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/trueadm/subscriptions",
      "organizations_url": "https://api.github.com/users/trueadm/orgs",
      "repos_url": "https://api.github.com/users/trueadm/repos",
      "events_url": "https://api.github.com/users/trueadm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/trueadm/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-04-21T16:37:26Z",
    "updated_at": "2020-05-04T13:10:59Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/18690",
      "html_url": "https://github.com/facebook/react/pull/18690",
      "diff_url": "https://github.com/facebook/react/pull/18690.diff",
      "patch_url": "https://github.com/facebook/react/pull/18690.patch"
    },
    "body": "Given we're still seeing memory leaks internally and that we already traverse each host component when we detach its fiber – let's also clear the fiber field from the host instance. I did some quick checks and didn't notice any performance runtime implications, in fact I noticed that overall memory consumed was lower from this change (testing internally)!",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/18681",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/18681/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/18681/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/18681/events",
    "html_url": "https://github.com/facebook/react/pull/18681",
    "id": 603535283,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NDA2MzAyNTgz",
    "number": 18681,
    "title": "Warn when textarea switches between controlled and uncontrolled",
    "user": {
      "login": "bl00mber",
      "id": 16987322,
      "node_id": "MDQ6VXNlcjE2OTg3MzIy",
      "avatar_url": "https://avatars1.githubusercontent.com/u/16987322?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bl00mber",
      "html_url": "https://github.com/bl00mber",
      "followers_url": "https://api.github.com/users/bl00mber/followers",
      "following_url": "https://api.github.com/users/bl00mber/following{/other_user}",
      "gists_url": "https://api.github.com/users/bl00mber/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bl00mber/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bl00mber/subscriptions",
      "organizations_url": "https://api.github.com/users/bl00mber/orgs",
      "repos_url": "https://api.github.com/users/bl00mber/repos",
      "events_url": "https://api.github.com/users/bl00mber/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bl00mber/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2020-04-20T21:06:32Z",
    "updated_at": "2020-07-17T12:25:51Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/18681",
      "html_url": "https://github.com/facebook/react/pull/18681",
      "diff_url": "https://github.com/facebook/react/pull/18681.diff",
      "patch_url": "https://github.com/facebook/react/pull/18681.patch"
    },
    "body": "resolve #16342",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/18674",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/18674/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/18674/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/18674/events",
    "html_url": "https://github.com/facebook/react/pull/18674",
    "id": 602543520,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NDA1NTU0ODU0",
    "number": 18674,
    "title": "Repro bug Nested SuspenseList may display fallbacks while the component is loaded on re-render",
    "user": {
      "login": "dubzzz",
      "id": 5300235,
      "node_id": "MDQ6VXNlcjUzMDAyMzU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/5300235?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dubzzz",
      "html_url": "https://github.com/dubzzz",
      "followers_url": "https://api.github.com/users/dubzzz/followers",
      "following_url": "https://api.github.com/users/dubzzz/following{/other_user}",
      "gists_url": "https://api.github.com/users/dubzzz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dubzzz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dubzzz/subscriptions",
      "organizations_url": "https://api.github.com/users/dubzzz/orgs",
      "repos_url": "https://api.github.com/users/dubzzz/repos",
      "events_url": "https://api.github.com/users/dubzzz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dubzzz/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-04-18T20:20:41Z",
    "updated_at": "2020-07-19T17:30:32Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/18674",
      "html_url": "https://github.com/facebook/react/pull/18674",
      "diff_url": "https://github.com/facebook/react/pull/18674.diff",
      "patch_url": "https://github.com/facebook/react/pull/18674.patch"
    },
    "body": "<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n\r\nAs asked by @gaearon on the issue #18661, here is a simple unit test to reproduce the issue: _Nested SuspenseList may display fallbacks while the component is loaded on re-render_.\r\n\r\nAs the bug is still there today, the test is red (as expected).\r\n\r\n## Test Plan\r\n\r\n<!-- Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface. -->\r\n\r\n\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/18670",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/18670/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/18670/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/18670/events",
    "html_url": "https://github.com/facebook/react/pull/18670",
    "id": 602460119,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NDA1NDk5MTk1",
    "number": 18670,
    "title": "Repro bug for Google Closure Compiler",
    "user": {
      "login": "trueadm",
      "id": 1519870,
      "node_id": "MDQ6VXNlcjE1MTk4NzA=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1519870?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/trueadm",
      "html_url": "https://github.com/trueadm",
      "followers_url": "https://api.github.com/users/trueadm/followers",
      "following_url": "https://api.github.com/users/trueadm/following{/other_user}",
      "gists_url": "https://api.github.com/users/trueadm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/trueadm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/trueadm/subscriptions",
      "organizations_url": "https://api.github.com/users/trueadm/orgs",
      "repos_url": "https://api.github.com/users/trueadm/repos",
      "events_url": "https://api.github.com/users/trueadm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/trueadm/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-04-18T13:25:45Z",
    "updated_at": "2020-05-04T14:37:57Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/18670",
      "html_url": "https://github.com/facebook/react/pull/18670",
      "diff_url": "https://github.com/facebook/react/pull/18670.diff",
      "patch_url": "https://github.com/facebook/react/pull/18670.patch"
    },
    "body": "This strange set of changes causes our ReactDOM Prod bundle to have broken JS. \r\n\r\nRun these commands to see the error:\r\n\r\n`yarn build --type=NODE_PROD`\r\n\r\n`yarn test-prod-build ReactDOMServerIntegrationTextarea`\r\n\r\nYou'll see this error:\r\n\r\n`TypeError: Cannot read property 'focusedElem' of null`\r\n\r\nIt seems to be related to `JSCompiler_inline_result`. Which incorrectly gets re-used from a `null` value.\r\n\r\nIssue reported:  google/closure-compiler#3588",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/18661",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/18661/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/18661/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/18661/events",
    "html_url": "https://github.com/facebook/react/issues/18661",
    "id": 602267255,
    "node_id": "MDU6SXNzdWU2MDIyNjcyNTU=",
    "number": 18661,
    "title": "Bug: Nested SuspenseList may display fallbacks while the component is loaded on re-render",
    "user": {
      "login": "dubzzz",
      "id": 5300235,
      "node_id": "MDQ6VXNlcjUzMDAyMzU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/5300235?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dubzzz",
      "html_url": "https://github.com/dubzzz",
      "followers_url": "https://api.github.com/users/dubzzz/followers",
      "following_url": "https://api.github.com/users/dubzzz/following{/other_user}",
      "gists_url": "https://api.github.com/users/dubzzz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dubzzz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dubzzz/subscriptions",
      "organizations_url": "https://api.github.com/users/dubzzz/orgs",
      "repos_url": "https://api.github.com/users/dubzzz/repos",
      "events_url": "https://api.github.com/users/dubzzz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dubzzz/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1205087127,
        "node_id": "MDU6TGFiZWwxMjA1MDg3MTI3",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Concurrent%20Mode",
        "name": "Component: Concurrent Mode",
        "color": "ffccd3",
        "default": false,
        "description": ""
      },
      {
        "id": 710722093,
        "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
        "name": "Type: Needs Investigation",
        "color": "fbca04",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 12,
    "created_at": "2020-04-17T22:29:35Z",
    "updated_at": "2020-05-22T08:47:00Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\n**React version:** 0.0.0-experimental-e5d06e34b\r\n\r\nHoping this can be helpful for you. Here is what looks to be a bug with concurrent mode and nested SuspenseList.\r\n\r\n## Steps To Reproduce\r\n\r\n_In concurrent mode only_\r\n\r\n0. Setup\r\n\r\nLet's suppose we have three components `<A />` (**not** lazy loaded), `<B />` (**not** lazy loaded) and `<C />` (lazy loaded).\r\n\r\nIn other words:\r\n\r\n```jsx\r\nimport A from './A';\r\nimport B from './B';\r\nconst C = React.lazy(() => import('./C'));\r\n```\r\n\r\n1. Render\r\n\r\n```jsx\r\nrender(\r\n  <SuspenseList key=\"1\" revealOrder=\"forwards\">\r\n    <SuspenseList key=\"1.1\" revealOrder=\"forwards\">\r\n      <Suspense key=\"1.1.a\" fallback={<div>Loading A</div>}>\r\n        <A />\r\n      </Suspense>\r\n    </SuspenseList>\r\n  </SuspenseList>\r\n)\r\n```\r\n\r\n2. Update the component (component now shows A, B, and C)\r\n\r\n```jsx\r\nrender(\r\n  <SuspenseList key=\"1\" revealOrder=\"forwards\">\r\n    <SuspenseList key=\"1.1\" revealOrder=\"forwards\">\r\n      <Suspense key=\"1.1.a\" fallback={<div>Loading A</div>}>\r\n        <A />\r\n      </Suspense>\r\n      <Suspense key=\"1.1.b\" fallback={<div>Loading B</div>}>\r\n        <B />\r\n      </Suspense>\r\n      <Suspense key=\"1.1.c\" fallback={<div>Loading C</div>}>\r\n        <C />\r\n      </Suspense>\r\n    </SuspenseList>\r\n  </SuspenseList>\r\n)\r\n```\r\n\r\n3. Output is: `A / Loading B / Loading C`. While `B` has already been loaded (not lazy loaded). If I understand well the behaviour of `forwards` I would have expect to have `A / B / Loading C` instead.\r\n\r\nPlease note that the behaviour is not the same if I do not use nested `<SuspenseList />`.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nCodeSandbox: https://codesandbox.io/s/mutable-rain-3ikor\r\nGitHub pages repro: https://dubzzz.github.io/react-suspenselist-bug/build/\r\nGitHub pages source code: https://github.com/dubzzz/react-suspenselist-bug\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\nOutput is: `A / Loading B / Loading C` with nested `SuspenseList`\r\n\r\n## The expected behavior\r\n\r\nOutput is: `A / B / Loading C` with nested `SuspenseList`\r\n\r\n**How did I found this bug?**\r\n\r\nThis _potential bug_ has been discovered while I was trying to run property based tests based on [fast-check](https://github.com/dubzzz/fast-check/) against React library.\r\n\r\nSee https://github.com/dubzzz/react/commit/e2cb4776ea3634fab2021d83cb8259bde03c0f3a\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/18658",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/18658/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/18658/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/18658/events",
    "html_url": "https://github.com/facebook/react/pull/18658",
    "id": 602183947,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NDA1MzAwNTE5",
    "number": 18658,
    "title": "Fall back to LowPriority rather than Idle",
    "user": {
      "login": "gaearon",
      "id": 810438,
      "node_id": "MDQ6VXNlcjgxMDQzOA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gaearon",
      "html_url": "https://github.com/gaearon",
      "followers_url": "https://api.github.com/users/gaearon/followers",
      "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
      "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
      "organizations_url": "https://api.github.com/users/gaearon/orgs",
      "repos_url": "https://api.github.com/users/gaearon/repos",
      "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gaearon/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-04-17T19:23:01Z",
    "updated_at": "2020-04-17T19:23:39Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/18658",
      "html_url": "https://github.com/facebook/react/pull/18658",
      "diff_url": "https://github.com/facebook/react/pull/18658.diff",
      "patch_url": "https://github.com/facebook/react/pull/18658.patch"
    },
    "body": "There wasn't a particular case motivating this, but opening so we don't forget to come back to it. This fails a bunch of tests. I haven't looked at them yet.\r\n\r\nI guess this would also need to update the \"new\" one.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/18652",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/18652/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/18652/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/18652/events",
    "html_url": "https://github.com/facebook/react/issues/18652",
    "id": 601806594,
    "node_id": "MDU6SXNzdWU2MDE4MDY1OTQ=",
    "number": 18652,
    "title": "[Flight] Make react-flight works between UI thread and webworkers",
    "user": {
      "login": "csr632",
      "id": 18747423,
      "node_id": "MDQ6VXNlcjE4NzQ3NDIz",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18747423?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/csr632",
      "html_url": "https://github.com/csr632",
      "followers_url": "https://api.github.com/users/csr632/followers",
      "following_url": "https://api.github.com/users/csr632/following{/other_user}",
      "gists_url": "https://api.github.com/users/csr632/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/csr632/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/csr632/subscriptions",
      "organizations_url": "https://api.github.com/users/csr632/orgs",
      "repos_url": "https://api.github.com/users/csr632/repos",
      "events_url": "https://api.github.com/users/csr632/events{/privacy}",
      "received_events_url": "https://api.github.com/users/csr632/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 2192194047,
        "node_id": "MDU6TGFiZWwyMTkyMTk0MDQ3",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Flight",
        "name": "Component: Flight",
        "color": "c4523e",
        "default": false,
        "description": ""
      },
      {
        "id": 710375792,
        "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-04-17T08:44:25Z",
    "updated_at": "2020-07-09T13:00:43Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "I am really exited about [react flight](https://github.com/facebook/react/tree/master/packages/react-server) that you are working on right now. But I notice you are focusing on UI cooperation between client and server. How about also make it works **between UI thread and webworkers**?\r\n\r\nSo, instead of:\r\n- react-server\r\n- react-client\r\n\r\nWe should probably rename them into:\r\n- react-producer. Used by producer of UI data. For example, server, webworker.\r\n- react-consumer. Used by consumer of UI data. For example, UI thread consume UI data and render it to DOM. In complex situations, a producer could also consume another UI data stream, so the UI data flow like this: `producer1 -> producer2 -> main thread`. Main thread don't notice the existence of producer1, which is a beautiful abstraction nature.\r\n\r\nSo we abstract the idea of \"react-flight\" into \"**UI transmission and cooperation between diffetent threads**\". **This idea is basically \"parallel rendering\", which is a beautiful evolution from \"concurrent rendering\"!**\r\nThis could really unlock the power of webworkers. Formerly, we can only yield \"heavy calculate work\" to webworkers. But it is inconvenient to seperate \"how to calcuate data\" from \"how to calcuate UI\". In the other hand, since one of the react philosophy is \"UI is just data\", it is not necessary to make a distinction between them! \r\nIf react is able to do \"parallel rendering\", we can achieve truly \"UI is just data\". **We could run react inside a webworker to calculate the UI(which is just data), and send it back to UI thread to render into DOM. This could really unlock the power of webworkers!**\r\n\r\n# How it works\r\nHere is my guess about how react-flight works. Correct me if I am wrong!\r\n- Consumer(react-client) request producer(react-server) for a UI stream.\r\n- Producer render UI as virtual dom. Serialize it. Send it back to consumer. producer could throw an error(which will serialized into a special signal) to make consumer suspend.\r\n- When dom event happens in client, the event is sent to producer. Producer locate the event target and trigger event capture/bubble. So event handler will be called inside producer.\r\n-  Event handler inside producer can call `setState()`, which will trigger re-render and send the new UI to consumer. consumer will render the new UI into DOM.\r\n\r\nI guess this is how you guys are plainning to implement react-flight between client and server. This model should also work between UI thread and webworkers.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/18640",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/18640/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/18640/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/18640/events",
    "html_url": "https://github.com/facebook/react/issues/18640",
    "id": 601216337,
    "node_id": "MDU6SXNzdWU2MDEyMTYzMzc=",
    "number": 18640,
    "title": "Allow opting out of invokeGuardedCallbackDev",
    "user": {
      "login": "spectras",
      "id": 5879675,
      "node_id": "MDQ6VXNlcjU4Nzk2NzU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/5879675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/spectras",
      "html_url": "https://github.com/spectras",
      "followers_url": "https://api.github.com/users/spectras/followers",
      "following_url": "https://api.github.com/users/spectras/following{/other_user}",
      "gists_url": "https://api.github.com/users/spectras/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/spectras/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/spectras/subscriptions",
      "organizations_url": "https://api.github.com/users/spectras/orgs",
      "repos_url": "https://api.github.com/users/spectras/repos",
      "events_url": "https://api.github.com/users/spectras/events{/privacy}",
      "received_events_url": "https://api.github.com/users/spectras/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 139734344,
        "node_id": "MDU6TGFiZWwxMzk3MzQzNDQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Test%20Utils",
        "name": "Component: Test Utils",
        "color": "eb6420",
        "default": false,
        "description": null
      },
      {
        "id": 1775957182,
        "node_id": "MDU6TGFiZWwxNzc1OTU3MTgy",
        "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale",
        "name": "Resolution: Stale",
        "color": "e6e6e6",
        "default": false,
        "description": "Automatically closed due to inactivity"
      },
      {
        "id": 121709921,
        "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
        "name": "Type: Feature Request",
        "color": "c7def8",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-04-16T16:13:34Z",
    "updated_at": "2020-10-12T01:57:07Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "At the moment, when in development mode, React uses a special workflow for callbacks, to avoid using `try...catch`.\r\n\r\nIt works well. So well that several testing frameworks also get their uncaught exception handling triggered.\r\n\r\n**Example with mocha:**\r\n```js\r\nimport React from 'react';\r\nimport { render } from '@testing-library/react';\r\n\r\nfunction MyComponent({ doThrow }) {\r\n    if (doThrow) { throw new Error('I'm bad'); }\r\n    return <div></div>;\r\n}\r\n\r\nit('should throw', function () {\r\n    expect(() => {\r\n        render(<MyComponent doThrow/>);\r\n    }).to.throw();\r\n});\r\n```\r\n**Behavior:**\r\n- When running the test with the production build of react/react-dom, the test passes (with the usual warning of act being unsupported in prod build).\r\n- When running the test with the development build of react-/react-dom, the test fails with `Error: Uncaught Error: I'm bad`.\r\n\r\nThe root cause is `invokeGuardedCallbackDev` runs the callback in an event to avoid using a `try...catch` block… and trips Mocha.js uncaught exception detector.\r\n\r\n*Note: I am aware of error boundaries, I removed it from the example because the behavior is identical with it.*\r\n\r\n*Note: I used testing-library for clarity, but using `act` and `RenderDOM` manually yields the same result.*\r\n\r\n**Expected behavior:**\r\n- Either make it work out of the box, or have the possibility to opt out of `invokeGuardedCallbackDev` and force the use of the regular `try...catch` implementation in development too.\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/18616",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/18616/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/18616/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/18616/events",
    "html_url": "https://github.com/facebook/react/issues/18616",
    "id": 600537991,
    "node_id": "MDU6SXNzdWU2MDA1Mzc5OTE=",
    "number": 18616,
    "title": "Bug: window as new portal will break event delegation",
    "user": {
      "login": "hanq08",
      "id": 11851678,
      "node_id": "MDQ6VXNlcjExODUxNjc4",
      "avatar_url": "https://avatars1.githubusercontent.com/u/11851678?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hanq08",
      "html_url": "https://github.com/hanq08",
      "followers_url": "https://api.github.com/users/hanq08/followers",
      "following_url": "https://api.github.com/users/hanq08/following{/other_user}",
      "gists_url": "https://api.github.com/users/hanq08/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hanq08/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hanq08/subscriptions",
      "organizations_url": "https://api.github.com/users/hanq08/orgs",
      "repos_url": "https://api.github.com/users/hanq08/repos",
      "events_url": "https://api.github.com/users/hanq08/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hanq08/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710375792,
        "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-04-15T19:32:36Z",
    "updated_at": "2020-07-13T12:50:45Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: any?\r\n\r\n## Steps To Reproduce\r\n\r\n1. Button attach to a window portal with window.open\r\n2. Event not triggering\r\n\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n```javascript\r\nconst { useState, useEffect } = React;\r\n\r\n\r\nfunction WindowPortal({ children }) {\r\n  const [container, setContainer] = useState(document.createElement('div'));\r\n  useEffect(() => { \r\n    const newWindow = window.open('', '', 'width=600,height=400,left=200,top=200');\r\n    newWindow.document.body.appendChild(container);\r\n  });\r\n  return ReactDOM.createPortal(children, container);\r\n}\r\nfunction App() {\r\n  const [value, setValue] = useState('unclicked');\r\n  const handleClick = () => setValue('clicked'); \r\n  return (\r\n    <div>\r\n      <div>Portal Test</div>\r\n      <WindowPortal>\r\n        <button onClick={handleClick}>{value}</button>\r\n      </WindowPortal>\r\n    </div>\r\n  );\r\n}\r\n\r\nReactDOM.render(\r\n  React.createElement(App),\r\n  document.getElementById('root')\r\n);\r\n```\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\nAny event in the new window will not be triggered since all events are bind to the original window. I think react can support a new mode for using native event binding rather than event delegation if it makes sense. [Preact](https://github.com/preactjs/preact) actually uses native browser event and don't use react event delegation system.\r\n## The current behavior\r\nEvent not trigger for components in new window\r\n\r\n## The expected behavior\r\nEvent will trigger",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/18612",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/18612/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/18612/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/18612/events",
    "html_url": "https://github.com/facebook/react/pull/18612",
    "id": 599912895,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NDAzNDU3OTI5",
    "number": 18612,
    "title": "Lanes",
    "user": {
      "login": "acdlite",
      "id": 3624098,
      "node_id": "MDQ6VXNlcjM2MjQwOTg=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3624098?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/acdlite",
      "html_url": "https://github.com/acdlite",
      "followers_url": "https://api.github.com/users/acdlite/followers",
      "following_url": "https://api.github.com/users/acdlite/following{/other_user}",
      "gists_url": "https://api.github.com/users/acdlite/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/acdlite/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/acdlite/subscriptions",
      "organizations_url": "https://api.github.com/users/acdlite/orgs",
      "repos_url": "https://api.github.com/users/acdlite/repos",
      "events_url": "https://api.github.com/users/acdlite/events{/privacy}",
      "received_events_url": "https://api.github.com/users/acdlite/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-04-14T23:12:07Z",
    "updated_at": "2020-05-01T02:48:16Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/18612",
      "html_url": "https://github.com/facebook/react/pull/18612",
      "diff_url": "https://github.com/facebook/react/pull/18612.diff",
      "patch_url": "https://github.com/facebook/react/pull/18612.patch"
    },
    "body": "## Not for Merge\r\n\r\nStack of changes related to a refactor of React's internal concurrency and scheduling architecture.\r\n\r\nI'm using this draft PR so I can push to something and kick off CI checks. It's not for review, but I'll accept feedback regardless.\r\n\r\nThis is very large set of changes, and many of the incremental steps aren't that impactful except to unblock later ones. I may shuffle and re-arrange things as new blockers emerge.\r\n\r\n**When I'm ready for something to be reviewed for merge, I will open separate PRs.**",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/18610",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/18610/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/18610/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/18610/events",
    "html_url": "https://github.com/facebook/react/issues/18610",
    "id": 599818733,
    "node_id": "MDU6SXNzdWU1OTk4MTg3MzM=",
    "number": 18610,
    "title": "Bug: ReactArt-test fails with node <= 12.9",
    "user": {
      "login": "eps1lon",
      "id": 12292047,
      "node_id": "MDQ6VXNlcjEyMjkyMDQ3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/12292047?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eps1lon",
      "html_url": "https://github.com/eps1lon",
      "followers_url": "https://api.github.com/users/eps1lon/followers",
      "following_url": "https://api.github.com/users/eps1lon/following{/other_user}",
      "gists_url": "https://api.github.com/users/eps1lon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eps1lon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eps1lon/subscriptions",
      "organizations_url": "https://api.github.com/users/eps1lon/orgs",
      "repos_url": "https://api.github.com/users/eps1lon/repos",
      "events_url": "https://api.github.com/users/eps1lon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eps1lon/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-04-14T19:51:22Z",
    "updated_at": "2020-09-04T04:35:47Z",
    "closed_at": null,
    "author_association": "COLLABORATOR",
    "active_lock_reason": null,
    "body": "## Steps To Reproduce\r\n\r\n0. Use node 10\r\n1. git checkout master\r\n2. yarn test ReactArt\r\n\r\n## The current behavior\r\n\r\nThe following tests fail with `in <anonymous> (at **)` as the stack instead of the full component stack:\r\n- ReactARTComponents › should warn if radius is missing on a Circle component\r\n- ReactARTComponents › should warn if width/height is missing on a Rectangle component\r\n- ReactARTComponents › should warn if outerRadius/startAngle/endAngle is missing on a Wedge component\r\n\r\n## The expected behavior\r\n\r\nI'm not familiar with `react-art` so it's unclear whether node 12 needs to be used for local development (`.nvmrc` should be updated) or whether react-art should work with node 10.\r\n\r\n## Context\r\n\r\nBisecting leads to 98d410f5005988644d01c9ec79b7181c3dd6c847 which got introduced in #18561. /cc @sebmarkbage \r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/18595",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/18595/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/18595/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/18595/events",
    "html_url": "https://github.com/facebook/react/issues/18595",
    "id": 599218576,
    "node_id": "MDU6SXNzdWU1OTkyMTg1NzY=",
    "number": 18595,
    "title": "Delay setting useTransition isPending to true until JND",
    "user": {
      "login": "subhero24",
      "id": 1171150,
      "node_id": "MDQ6VXNlcjExNzExNTA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1171150?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/subhero24",
      "html_url": "https://github.com/subhero24",
      "followers_url": "https://api.github.com/users/subhero24/followers",
      "following_url": "https://api.github.com/users/subhero24/following{/other_user}",
      "gists_url": "https://api.github.com/users/subhero24/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/subhero24/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/subhero24/subscriptions",
      "organizations_url": "https://api.github.com/users/subhero24/orgs",
      "repos_url": "https://api.github.com/users/subhero24/repos",
      "events_url": "https://api.github.com/users/subhero24/events{/privacy}",
      "received_events_url": "https://api.github.com/users/subhero24/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1205087127,
        "node_id": "MDU6TGFiZWwxMjA1MDg3MTI3",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Concurrent%20Mode",
        "name": "Component: Concurrent Mode",
        "color": "ffccd3",
        "default": false,
        "description": ""
      },
      {
        "id": 40929153,
        "node_id": "MDU6TGFiZWw0MDkyOTE1Mw==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
        "name": "Type: Enhancement",
        "color": "84b6eb",
        "default": false,
        "description": null
      },
      {
        "id": 710722093,
        "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
        "name": "Type: Needs Investigation",
        "color": "fbca04",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2020-04-14T00:41:05Z",
    "updated_at": "2020-07-09T01:30:32Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Do you want to request a feature or report a bug?**\r\nMaybe a feature?\r\n\r\nWhen using Suspense and useTransition, the isPending of useTransition is immediately set to true.\r\nI want to show a spinner when a transition is still pending, but showing it immediately results in a flashing spinner when the underlying promise resolves very fast. This is not a nice experience. \r\n\r\nIs there a useTransition suspense option to delay the isPending indicator? I want to prevent the spinner from showing if the transition completes in for example 100ms.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/18594",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/18594/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/18594/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/18594/events",
    "html_url": "https://github.com/facebook/react/issues/18594",
    "id": 599159112,
    "node_id": "MDU6SXNzdWU1OTkxNTkxMTI=",
    "number": 18594,
    "title": "feat: allow multiple opaque identifiers in HTML attributes",
    "user": {
      "login": "eps1lon",
      "id": 12292047,
      "node_id": "MDQ6VXNlcjEyMjkyMDQ3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/12292047?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eps1lon",
      "html_url": "https://github.com/eps1lon",
      "followers_url": "https://api.github.com/users/eps1lon/followers",
      "following_url": "https://api.github.com/users/eps1lon/following{/other_user}",
      "gists_url": "https://api.github.com/users/eps1lon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eps1lon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eps1lon/subscriptions",
      "organizations_url": "https://api.github.com/users/eps1lon/orgs",
      "repos_url": "https://api.github.com/users/eps1lon/repos",
      "events_url": "https://api.github.com/users/eps1lon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eps1lon/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 127893911,
        "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
        "name": "Component: DOM",
        "color": "fef2c0",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2020-04-13T21:54:33Z",
    "updated_at": "2020-08-02T18:15:43Z",
    "closed_at": null,
    "author_association": "COLLABORATOR",
    "active_lock_reason": null,
    "body": "react version: #17322\r\nOriginal: https://github.com/facebook/react/pull/17322#issuecomment-613104823\r\n\r\nCurrently only a single value from `useOpaqueIdentifier` (unreleased) can be passed to HTML attributes. However, there are HTML attributes which support multiple ids (IDREFS) like `aria-labelledby`. This can be used to implement various patterns such as: \r\n```jsx\r\nexport default function App() {\r\n  const taxpayerId = React.unstable_useOpaqueIdentifier();\r\n  const spouseId = React.unstable_useOpaqueIdentifier();\r\n  const w2GrossId = React.unstable_useOpaqueIdentifier();\r\n  const dividendsId = React.unstable_useOpaqueIdentifier();\r\n  return (\r\n    <table>\r\n      <tbody>\r\n        <tr>\r\n          <td />\r\n          <th id={taxpayerId}>Taxpayer</th>\r\n          <th id={spouseId}>Spouse</th>\r\n        </tr>\r\n\r\n        <tr>\r\n          <th id={w2GrossId}>W2 Gross</th>\r\n          <td>\r\n            <input type=\"text\" aria-labelledby={[taxpayerId, w2GrossId]} />\r\n          </td>\r\n          <td>\r\n            <input type=\"text\" aria-labelledby={[spouseId, w2GrossId]} />\r\n          </td>\r\n        </tr>\r\n\r\n        <tr>\r\n          <th id={dividendsId}>Dividends</th>\r\n          <td>\r\n            <input type=\"text\" aria-labelledby={[taxpayerId, dividendsId]} />\r\n          </td>\r\n          <td>\r\n            <input type=\"text\" aria-labelledby={[spouseId, dividendsId]} />\r\n          </td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  );\r\n}\r\n````\r\n-- https://codesandbox.io/s/useopaqueidentifier-for-idrefs-ocnm4\r\n\r\nThis example is from https://www.w3.org/WAI/GL/wiki/Using_aria-labelledby_to_concatenate_a_label_from_several_text_nodes\r\n\r\nThis currently almost works but it concatenates the ids with `\",\"` (default toString of arrays) instead of `\" \"`.\r\n\r\n`<button aria-labelledby={[opaqueIdentifier1, opaqueIdentifier1]} />` is to me the most intuitive one since we're passing a list of ids. \r\n\r\nEdit:\r\nRemoved the collapsible listbox example since that pattern has some a11y issue.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/18591",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/18591/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/18591/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/18591/events",
    "html_url": "https://github.com/facebook/react/issues/18591",
    "id": 599026915,
    "node_id": "MDU6SXNzdWU1OTkwMjY5MTU=",
    "number": 18591,
    "title": "Bug: Bubbled onFocus handler that triggers an update prevents onChange handler in createRoot",
    "user": {
      "login": "hamlim",
      "id": 5579638,
      "node_id": "MDQ6VXNlcjU1Nzk2Mzg=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/5579638?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hamlim",
      "html_url": "https://github.com/hamlim",
      "followers_url": "https://api.github.com/users/hamlim/followers",
      "following_url": "https://api.github.com/users/hamlim/following{/other_user}",
      "gists_url": "https://api.github.com/users/hamlim/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hamlim/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hamlim/subscriptions",
      "organizations_url": "https://api.github.com/users/hamlim/orgs",
      "repos_url": "https://api.github.com/users/hamlim/repos",
      "events_url": "https://api.github.com/users/hamlim/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hamlim/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1205087127,
        "node_id": "MDU6TGFiZWwxMjA1MDg3MTI3",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Concurrent%20Mode",
        "name": "Component: Concurrent Mode",
        "color": "ffccd3",
        "default": false,
        "description": ""
      },
      {
        "id": 710722093,
        "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
        "name": "Type: Needs Investigation",
        "color": "fbca04",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-04-13T17:40:05Z",
    "updated_at": "2020-09-23T22:14:14Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: I think any experimental version. \r\nTested using:\r\n* `0.0.0-experimental-5faf377df` and\r\n* `0.0.0-experimental-e5d06e34b` at least.\r\n\r\n## Steps To Reproduce\r\n\r\n1. Open CodeSandbox: https://codesandbox.io/s/createroot-broken-focus-onchange-ysrut?file=/src/App.js\r\n2. Attempt to click on the label text for the checkbox in the createRoot section\r\n3. Notice that the checkbox **won't** check - `onChange` isn't called\r\n2. Attempt to click on the label text for the checkbox in the render section\r\n3. Notice that the checkbox **will** check - `onChange` is called\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://codesandbox.io/s/createroot-broken-focus-onchange-ysrut?file=/src/App.js\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\nWhen rendering using `createRoot`:\r\n\r\n* `onFocus` is called\r\n* `onChange` **is not** called\r\n\r\nWhen rendering using `render`:\r\n\r\n* `onFocus` is called\r\n* `onChange` **is** called\r\n\r\nMy coworker and I spent a bit of time debugging this, if we at all schedule the `onFocus` setState handler (using `setTimeout`, or `requestAnimationFrame` for example), then `onChange` is always called from the input.\r\n\r\ne.g.\r\n\r\n```jsx\r\nhandleFocus = () => {\r\n  setTimeout(() => this.setState({ isHovered: true }), 0)\r\n  // or\r\n  requestAnimationFrame(() => this.setState({ isHovered: true }))\r\n}\r\n```\r\n\r\nAdditionally, if the label is a sibling to the input:\r\n\r\n```jsx\r\nreturn (\r\n  <>\r\n    <input id=\"id\" onChange={} type=\"checkbox\" checked={} />\r\n    <label htmlFor=\"id\" onFocus={}>\r\n      label text\r\n    </label>\r\n  </>\r\n)\r\n```\r\n\r\nthen the `onChange` handler **will** be called as well (Note: `onFocus` **won't** be called in this case because there isn't a focusable element within it).\r\n\r\nAlso worth noting, re-implementing the checkbox component using hooks will still run into the same bug - no differences between using classes vs hooks.\r\n\r\n## The expected behavior\r\n\r\nCalling `setState` in `onFocus` **shouldn't** prevent `onChange` on a nested input element to be called. Both `onFocus` and `onChange` should be called.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/18565",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/18565/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/18565/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/18565/events",
    "html_url": "https://github.com/facebook/react/issues/18565",
    "id": 597605011,
    "node_id": "MDU6SXNzdWU1OTc2MDUwMTE=",
    "number": 18565,
    "title": "useOpaqueIdentifier and multiple React cases",
    "user": {
      "login": "theKashey",
      "id": 582410,
      "node_id": "MDQ6VXNlcjU4MjQxMA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/582410?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theKashey",
      "html_url": "https://github.com/theKashey",
      "followers_url": "https://api.github.com/users/theKashey/followers",
      "following_url": "https://api.github.com/users/theKashey/following{/other_user}",
      "gists_url": "https://api.github.com/users/theKashey/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theKashey/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theKashey/subscriptions",
      "organizations_url": "https://api.github.com/users/theKashey/orgs",
      "repos_url": "https://api.github.com/users/theKashey/repos",
      "events_url": "https://api.github.com/users/theKashey/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theKashey/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710332294,
        "node_id": "MDU6TGFiZWw3MTAzMzIyOTQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Server%20Rendering",
        "name": "Component: Server Rendering",
        "color": "d4c5f9",
        "default": false,
        "description": null
      },
      {
        "id": 710375792,
        "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2020-04-09T23:12:06Z",
    "updated_at": "2020-04-16T23:52:37Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "React version: experimental\r\n\r\nThis is a theoretical issue, and is not proven to be a real issue. Written after #17322\r\n\r\n## Steps To Reproduce\r\n\r\n1. Use multiple independent version of react\r\n2. Get a clash of `id`s\r\n\r\n## The current behavior\r\n\r\nEvery React instance is generating `ids` based on a single counter, which increments every time new `id` is generated.\r\nThat `counter` is stored inside `react-dom` and it's lifetime is bound to React instance lifetime causing:\r\n- `undefined behaviour` in tests/mocks, which might clear nodejs module cache by different reasons.\r\n- `unpredictable` results with `lambda` as a backend, as long as many different renderers are working in a parallel, and their lifetime is limited.\r\n- potentially `broken` state when more than one lambda is used to generate server response (multiple roots during SSR to speedup/parallelise rendering)\r\n- guaranteed `broken` state on the client, with multiple react roots using different React instances, which could occur when the host application is not written in react, or when those \"multiple\" root as self-contained (aka widgets) and modules resolution is not hoisting a single React version to the top (for example parent application is just \"old\").\r\n\r\n## The expected behavior\r\n\r\nLet's imagine a static site generator. \r\n- You run it once and got 1000 HTML files. \r\n- You run it twice, and all those 1000 files got updated. \r\n- 🙀, you haven't changed anything!\r\n\r\n👉 So the expected behavior  is to get the same result no matter on server up time. This means that `counter` should be \"per-render\", or \"per-react-root\".\r\n\r\n--- \r\n\r\nLet's imagine there is a old legacy Java site, and we are adding two (non iframe based) widgets to it, both are self-contained (ie just \"bundled\"), and both are using the same React version.\r\nThen they would generate the same `ids` in the same order.\r\n\r\n👉 this is purely frontend issue, and both React instances, even if separated, are living in the same DOM/window. They should somehow talk to eachother, and probably prefix their `ids` with some `uuid`s\r\n\r\n---\r\n\r\nLet's image the microfrontend, but old (or new, aka fragment cache) SSR-only application. For example I do have one very old, initially php-based application, where  every \"block\" is generated by a subsequent network request. Nowadays some of those \"blocks\" are using React, just for a better SSR experience (because, well, I am not using php that much for last 10years). \r\n👉 every time you render App it shall produce the same Ids, to mend static site generators, however, what if different apps could prefix their `ids` differently?\r\n\r\n---\r\n\r\nTo be honest - there 3 points sounds like CAP theorem - you never gonna have all 3 at once.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/18502",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/18502/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/18502/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/18502/events",
    "html_url": "https://github.com/facebook/react/issues/18502",
    "id": 594991753,
    "node_id": "MDU6SXNzdWU1OTQ5OTE3NTM=",
    "number": 18502,
    "title": "Bug: Server hydration mistmatch and radio group with defaultChecked",
    "user": {
      "login": "leoasis",
      "id": 328001,
      "node_id": "MDQ6VXNlcjMyODAwMQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/328001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/leoasis",
      "html_url": "https://github.com/leoasis",
      "followers_url": "https://api.github.com/users/leoasis/followers",
      "following_url": "https://api.github.com/users/leoasis/following{/other_user}",
      "gists_url": "https://api.github.com/users/leoasis/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/leoasis/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/leoasis/subscriptions",
      "organizations_url": "https://api.github.com/users/leoasis/orgs",
      "repos_url": "https://api.github.com/users/leoasis/repos",
      "events_url": "https://api.github.com/users/leoasis/events{/privacy}",
      "received_events_url": "https://api.github.com/users/leoasis/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 127893911,
        "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
        "name": "Component: DOM",
        "color": "fef2c0",
        "default": false,
        "description": null
      },
      {
        "id": 710332294,
        "node_id": "MDU6TGFiZWw3MTAzMzIyOTQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Server%20Rendering",
        "name": "Component: Server Rendering",
        "color": "d4c5f9",
        "default": false,
        "description": null
      },
      {
        "id": 40929151,
        "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
        "name": "Type: Bug",
        "color": "b60205",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-04-06T10:24:24Z",
    "updated_at": "2020-10-07T03:24:31Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\nWhen hydrating from the server, whenever there's a mismatch in the initially checked input in a radio button group and the inputs use `defaultChecked` (uncontrolled), there is no warning of that mismatch and the component behaves in a buggy way for the input that was initially selected in the server payload (the `onChange` callback prop is not fired for the input that was marked as selected in the initial html, when selecting it).\r\n\r\nWorth noting that using a controlled input (using `checked`) makes the bug go away.\r\n\r\nReact version: 16.13.1\r\n\r\n## Steps To Reproduce\r\n\r\n1. In the example provided below, make sure you refresh the browser within Code Sandbox.\r\n2. Check the first radio button. Verify that the radio is checked, but the text next to it still shows as \"not checked\" (which means the onChange prop was not triggered)\r\n3. Attempt to select any other option (works fine), and then back the first one (works fine too).\r\n4. Refreshing the page again, choosing any other option other than the first works fine.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://codesandbox.io/s/affectionate-stonebraker-3wj68\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\nI know that using hydrate doesn't guarantee fixing the mismatches, but it says that it should warn about them in development (https://reactjs.org/docs/react-dom.html#hydrate). In this case, React doesn't warn about the mismatch, and the behavior is buggy, as shown in the example and steps to repro.\r\n\r\n## The expected behavior\r\n\r\nReact should ideally work without the issue, but given that it's not guaranteed to be fixed according to the documentation, it should at least warn about the mismatch.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/18499",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/18499/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/18499/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/18499/events",
    "html_url": "https://github.com/facebook/react/issues/18499",
    "id": 594614832,
    "node_id": "MDU6SXNzdWU1OTQ2MTQ4MzI=",
    "number": 18499,
    "title": "Provide a renderer-agnostic equivalent of setNativeProps()",
    "user": {
      "login": "drcmda",
      "id": 2223602,
      "node_id": "MDQ6VXNlcjIyMjM2MDI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/2223602?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/drcmda",
      "html_url": "https://github.com/drcmda",
      "followers_url": "https://api.github.com/users/drcmda/followers",
      "following_url": "https://api.github.com/users/drcmda/following{/other_user}",
      "gists_url": "https://api.github.com/users/drcmda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/drcmda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/drcmda/subscriptions",
      "organizations_url": "https://api.github.com/users/drcmda/orgs",
      "repos_url": "https://api.github.com/users/drcmda/repos",
      "events_url": "https://api.github.com/users/drcmda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/drcmda/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710375792,
        "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false,
        "description": null
      },
      {
        "id": 121709921,
        "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
        "name": "Type: Feature Request",
        "color": "c7def8",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 15,
    "created_at": "2020-04-05T19:50:35Z",
    "updated_at": "2020-06-28T03:43:47Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Dan asked me to open up an issue: https://twitter.com/dan_abramov/status/1246883821477339139\r\n\r\nMy proposal is to extend React with a small hook that allows us to mutate nodes without causing render:\r\n\r\n```jsx\r\nimport React, { useMutation }\r\n\r\nfunction A() {\r\n  const [specialRef, set] = useMutation()\r\n\r\n  useEffect(() => {\r\n    // the following would execute sync and without causing render\r\n    // going through the same channel as a regular props update with all\r\n    // the internal interpolation (100 --> \"100px\")\r\n    set({ style: { left: 100 } })\r\n  }, [])\r\n\r\n  return <div ref={specialRef} ... />\r\n```\r\n\r\nThis would make the react eco system essentially cross platform in one strike. It uses the fact that reconcilers know how to handle props, something we don't know in userland unless we cause render to set fresh props, which is not at all optimal for animation or anything frame based. react-dom for instance knows what `margin: 3px` is, react-three-fiber knows what `position: [1,2,3]` is, and so on. These details are defined in the reconciler:\r\n\r\n```jsx\r\n  commitUpdate(instance: any, updatePayload: any, type: string, oldProps: any, newProps: any, fiber: Reconciler.Fiber)\r\n```\r\n\r\nIf libraries could use this knowledge from outside they could deal with any platform. Animation libraries like react-spring or framer-motion could animate everything: dom nodes, react native views, meshes, hardware diodes. We could finally write libraries that are not reliant on platforms.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/18493",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/18493/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/18493/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/18493/events",
    "html_url": "https://github.com/facebook/react/pull/18493",
    "id": 594106015,
    "node_id": "MDExOlB1bGxSZXF1ZXN0Mzk4NzY2MDY5",
    "number": 18493,
    "title": "Provide error handling for non-extensible ref assignment",
    "user": {
      "login": "bl00mber",
      "id": 16987322,
      "node_id": "MDQ6VXNlcjE2OTg3MzIy",
      "avatar_url": "https://avatars1.githubusercontent.com/u/16987322?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bl00mber",
      "html_url": "https://github.com/bl00mber",
      "followers_url": "https://api.github.com/users/bl00mber/followers",
      "following_url": "https://api.github.com/users/bl00mber/following{/other_user}",
      "gists_url": "https://api.github.com/users/bl00mber/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bl00mber/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bl00mber/subscriptions",
      "organizations_url": "https://api.github.com/users/bl00mber/orgs",
      "repos_url": "https://api.github.com/users/bl00mber/repos",
      "events_url": "https://api.github.com/users/bl00mber/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bl00mber/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2020-04-04T21:22:55Z",
    "updated_at": "2020-10-23T12:37:55Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/18493",
      "html_url": "https://github.com/facebook/react/pull/18493",
      "diff_url": "https://github.com/facebook/react/pull/18493.diff",
      "patch_url": "https://github.com/facebook/react/pull/18493.patch"
    },
    "body": "fix #16365, related #7136",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/18460",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/18460/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/18460/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/18460/events",
    "html_url": "https://github.com/facebook/react/issues/18460",
    "id": 592240088,
    "node_id": "MDU6SXNzdWU1OTIyNDAwODg=",
    "number": 18460,
    "title": "Bug: Suspense fallbacks potentially never showing due to a race",
    "user": {
      "login": "gaearon",
      "id": 810438,
      "node_id": "MDQ6VXNlcjgxMDQzOA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gaearon",
      "html_url": "https://github.com/gaearon",
      "followers_url": "https://api.github.com/users/gaearon/followers",
      "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
      "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
      "organizations_url": "https://api.github.com/users/gaearon/orgs",
      "repos_url": "https://api.github.com/users/gaearon/repos",
      "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gaearon/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1109407645,
        "node_id": "MDU6TGFiZWwxMTA5NDA3NjQ1",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Suspense",
        "name": "Component: Suspense",
        "color": "8ffcd6",
        "default": false,
        "description": ""
      },
      {
        "id": 40929151,
        "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
        "name": "Type: Bug",
        "color": "b60205",
        "default": false,
        "description": null
      },
      {
        "id": 710722093,
        "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
        "name": "Type: Needs Investigation",
        "color": "fbca04",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-04-01T22:25:36Z",
    "updated_at": "2020-04-01T22:25:50Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "See https://github.com/facebook/react/pull/16632. I haven't verified but it seems plausible.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/18434",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/18434/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/18434/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/18434/events",
    "html_url": "https://github.com/facebook/react/issues/18434",
    "id": 590193182,
    "node_id": "MDU6SXNzdWU1OTAxOTMxODI=",
    "number": 18434,
    "title": "Bug: SuspenseList revealOrder=\"backwards\"  is not consistent without tail props",
    "user": {
      "login": "velusgautam",
      "id": 8556085,
      "node_id": "MDQ6VXNlcjg1NTYwODU=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/8556085?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/velusgautam",
      "html_url": "https://github.com/velusgautam",
      "followers_url": "https://api.github.com/users/velusgautam/followers",
      "following_url": "https://api.github.com/users/velusgautam/following{/other_user}",
      "gists_url": "https://api.github.com/users/velusgautam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/velusgautam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/velusgautam/subscriptions",
      "organizations_url": "https://api.github.com/users/velusgautam/orgs",
      "repos_url": "https://api.github.com/users/velusgautam/repos",
      "events_url": "https://api.github.com/users/velusgautam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/velusgautam/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1109407645,
        "node_id": "MDU6TGFiZWwxMTA5NDA3NjQ1",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Suspense",
        "name": "Component: Suspense",
        "color": "8ffcd6",
        "default": false,
        "description": ""
      },
      {
        "id": 710722093,
        "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
        "name": "Type: Needs Investigation",
        "color": "fbca04",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-03-30T10:53:39Z",
    "updated_at": "2020-04-06T17:51:36Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 0.0.0-experimental-aae83a4b9\r\n\r\n## Steps To Reproduce\r\n\r\n1. If `<SuspenseList revealOrder=\"backwards\">` is expected to show last component to load first if it loads early but it waits for the top components. If `tail` prop is set it works fine. \r\n2. if `<SuspenseList revealOrder=\"backwards\" tail=\"collapsed\">` is given everything works as expected\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n```\r\n<SuspenseList revealOrder=\"backwards\">\r\n      <ProfileDetails resource={resource} />\r\n      <ErrorBoundary fallback={null}>\r\n        <Suspense fallback={<h2>Loading posts...</h2>}>\r\n          <ProfileTimeline resource={resource} />\r\n        </Suspense>\r\n      </ErrorBoundary>\r\n      <Suspense fallback={<h2>Loading fun facts...</h2>}>\r\n        <ProfileTrivia resource={resource} />\r\n      </Suspense>\r\n </SuspenseList>\r\n```\r\n\r\nworks fine when added tail\r\n```\r\n<SuspenseList revealOrder=\"backwards\" tail=\"hidden\">\r\n      <ProfileDetails resource={resource} />\r\n      <ErrorBoundary fallback={null}>\r\n        <Suspense fallback={<h2>Loading posts...</h2>}>\r\n          <ProfileTimeline resource={resource} />\r\n        </Suspense>\r\n      </ErrorBoundary>\r\n      <Suspense fallback={<h2>Loading fun facts...</h2>}>\r\n        <ProfileTrivia resource={resource} />\r\n      </Suspense>\r\n </SuspenseList>\r\n```\r\nLink to code example: [https://codesandbox.io/s/bug-suspenselist-revealordertogether-and-error-boundaries-18429-1oky8](https://codesandbox.io/s/bug-suspenselist-revealordertogether-and-error-boundaries-18429-1oky8)\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n`<SuspenseList revealOrder=\"backwards\">` waits for the top elements to load unless tail props is set.\r\n\r\n## The expected behavior\r\n It is expected to work backwards order is last component is loaded in suspense without tail prop being set or not.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/18416",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/18416/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/18416/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/18416/events",
    "html_url": "https://github.com/facebook/react/issues/18416",
    "id": 589609189,
    "node_id": "MDU6SXNzdWU1ODk2MDkxODk=",
    "number": 18416,
    "title": "Bug: dragenter on text node contains parent node in event.target in Firefox",
    "user": {
      "login": "avandecreme",
      "id": 465389,
      "node_id": "MDQ6VXNlcjQ2NTM4OQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/465389?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/avandecreme",
      "html_url": "https://github.com/avandecreme",
      "followers_url": "https://api.github.com/users/avandecreme/followers",
      "following_url": "https://api.github.com/users/avandecreme/following{/other_user}",
      "gists_url": "https://api.github.com/users/avandecreme/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/avandecreme/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/avandecreme/subscriptions",
      "organizations_url": "https://api.github.com/users/avandecreme/orgs",
      "repos_url": "https://api.github.com/users/avandecreme/repos",
      "events_url": "https://api.github.com/users/avandecreme/events{/privacy}",
      "received_events_url": "https://api.github.com/users/avandecreme/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1775957182,
        "node_id": "MDU6TGFiZWwxNzc1OTU3MTgy",
        "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale",
        "name": "Resolution: Stale",
        "color": "e6e6e6",
        "default": false,
        "description": "Automatically closed due to inactivity"
      },
      {
        "id": 155984160,
        "node_id": "MDU6TGFiZWwxNTU5ODQxNjA=",
        "url": "https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed",
        "name": "Status: Unconfirmed",
        "color": "d4c5f9",
        "default": false,
        "description": "A potential issue that we haven't yet confirmed as a bug"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-03-28T16:21:05Z",
    "updated_at": "2020-10-12T01:57:10Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 16.13.1\r\n\r\n## Steps To Reproduce\r\n\r\nDrag a file over text in Firefox\r\nSee this fiddle as example: https://jsfiddle.net/wqcsg2un/2/\r\n![firefox-react-drag](https://user-images.githubusercontent.com/465389/77827796-04172180-7118-11ea-8400-c667b432bebd.gif)\r\n\r\nHere is a fiddle showing the behavior without react: https://jsfiddle.net/493wmzvL/2/\r\n![firefox-drag](https://user-images.githubusercontent.com/465389/77827816-18f3b500-7118-11ea-8e16-230d88d422bd.gif)\r\n\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\n\r\n## The current behavior\r\n`event.target` contains the target's parent node instead of the target itself for text nodes\r\n\r\n## The expected behavior\r\n`event.target` should contain the target itself even for text nodes",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/18413",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/18413/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/18413/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/18413/events",
    "html_url": "https://github.com/facebook/react/issues/18413",
    "id": 589559997,
    "node_id": "MDU6SXNzdWU1ODk1NTk5OTc=",
    "number": 18413,
    "title": "Bug: Editing context in react-devtools",
    "user": {
      "login": "eps1lon",
      "id": 12292047,
      "node_id": "MDQ6VXNlcjEyMjkyMDQ3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/12292047?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eps1lon",
      "html_url": "https://github.com/eps1lon",
      "followers_url": "https://api.github.com/users/eps1lon/followers",
      "following_url": "https://api.github.com/users/eps1lon/following{/other_user}",
      "gists_url": "https://api.github.com/users/eps1lon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eps1lon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eps1lon/subscriptions",
      "organizations_url": "https://api.github.com/users/eps1lon/orgs",
      "repos_url": "https://api.github.com/users/eps1lon/repos",
      "events_url": "https://api.github.com/users/eps1lon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eps1lon/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710573595,
        "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
        "name": "Component: Developer Tools",
        "color": "fbca04",
        "default": false,
        "description": null
      },
      {
        "id": 121709921,
        "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
        "name": "Type: Feature Request",
        "color": "c7def8",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-03-28T11:37:38Z",
    "updated_at": "2020-09-15T22:41:41Z",
    "closed_at": null,
    "author_association": "COLLABORATOR",
    "active_lock_reason": null,
    "body": "React version: 16.13 and `0.0.0-experimental-aae83a4b9\r\n\r\n## Steps To Reproduce\r\n\r\n1. Goto https://codesandbox.io/s/xenodochial-field-rfdjz\r\n2. Try editing value of `MessageListContext.Provider`\r\n\r\nLink to code example: https://codesandbox.io/s/xenodochial-field-rfdjz\r\n\r\n## The current behavior\r\n\r\nContext from `createContext` can't be edited in the current devtools (provider, consumer, hooks)\r\n\r\n## The expected behavior\r\n\r\nContext value should be editable. I already proposed an implementation for [Provider](https://github.com/facebook/react/pull/18255) and [Consumer](https://github.com/facebook/react/pull/18257).\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/18402",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/18402/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/18402/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/18402/events",
    "html_url": "https://github.com/facebook/react/issues/18402",
    "id": 589059162,
    "node_id": "MDU6SXNzdWU1ODkwNTkxNjI=",
    "number": 18402,
    "title": "Batching makes it difficult to perform imperative actions like focus",
    "user": {
      "login": "astoilkov",
      "id": 884810,
      "node_id": "MDQ6VXNlcjg4NDgxMA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/884810?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/astoilkov",
      "html_url": "https://github.com/astoilkov",
      "followers_url": "https://api.github.com/users/astoilkov/followers",
      "following_url": "https://api.github.com/users/astoilkov/following{/other_user}",
      "gists_url": "https://api.github.com/users/astoilkov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/astoilkov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/astoilkov/subscriptions",
      "organizations_url": "https://api.github.com/users/astoilkov/orgs",
      "repos_url": "https://api.github.com/users/astoilkov/repos",
      "events_url": "https://api.github.com/users/astoilkov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/astoilkov/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710375792,
        "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 25,
    "created_at": "2020-03-27T11:12:19Z",
    "updated_at": "2020-03-29T12:37:32Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "React version: 16.9.5\r\n\r\n## Steps To Reproduce\r\n\r\n1. Overwrite batched updates with the following code: `ReactDOM.unstable_batchedUpdates = callback => callback()`\r\n2. Batched updates aren't actually overwritten.\r\n\r\n## Reasoning\r\n\r\nI recognize that this may not be classified as bug because it isn't a documented feature but I have tried to search for a different solution but to no avail. Fixing this behavior can open a new way of using React. I tried writing on [Stack Overflow](https://stackoverflow.com/questions/60852219/disable-unstable-batchedupdates-on-event-handlers-in-react) and writing to [@gaearon](https://twitter.com/antoniostoilkov/status/1242789762307588097).\r\n\r\nI have a number of arguments which support the disabling of batched updates in event handlers and in effects initialization. If anybody is willing to read a document and consider this scenario I am willing to write an RFC.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/18390",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/18390/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/18390/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/18390/events",
    "html_url": "https://github.com/facebook/react/issues/18390",
    "id": 588020866,
    "node_id": "MDU6SXNzdWU1ODgwMjA4NjY=",
    "number": 18390,
    "title": "Bug: Event handlers on custom elements work on the client but not on the server",
    "user": {
      "login": "esprehn",
      "id": 415779,
      "node_id": "MDQ6VXNlcjQxNTc3OQ==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/415779?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/esprehn",
      "html_url": "https://github.com/esprehn",
      "followers_url": "https://api.github.com/users/esprehn/followers",
      "following_url": "https://api.github.com/users/esprehn/following{/other_user}",
      "gists_url": "https://api.github.com/users/esprehn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/esprehn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/esprehn/subscriptions",
      "organizations_url": "https://api.github.com/users/esprehn/orgs",
      "repos_url": "https://api.github.com/users/esprehn/repos",
      "events_url": "https://api.github.com/users/esprehn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/esprehn/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710332294,
        "node_id": "MDU6TGFiZWw3MTAzMzIyOTQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Server%20Rendering",
        "name": "Component: Server Rendering",
        "color": "d4c5f9",
        "default": false,
        "description": null
      },
      {
        "id": 710722093,
        "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
        "name": "Type: Needs Investigation",
        "color": "fbca04",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-03-25T22:09:40Z",
    "updated_at": "2020-08-28T04:24:26Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 16.13.1\r\n\r\n## Steps To Reproduce\r\n\r\n```js\r\nReactDOMServer.renderToString(<div-x onClick={() => console.log('clicked')} />)\r\n```\r\n\r\nvs\r\n\r\n```js\r\nReactDOM.render(<div-x onClick={() => { console.log('clicked'); }} />, root)\r\n```\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://jsfiddle.net/hsug65x0/2/\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\nCustom element event handlers only work client side. In SSR the code of the event handler becomes an attribute value.\r\n\r\n## The expected behavior\r\n\r\nCustom element event handlers work in SSR.\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/18368",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/18368/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/18368/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/18368/events",
    "html_url": "https://github.com/facebook/react/issues/18368",
    "id": 585647472,
    "node_id": "MDU6SXNzdWU1ODU2NDc0NzI=",
    "number": 18368,
    "title": "May be bug: onChange events don't fire in controlled forms in portals rendered in external window",
    "user": {
      "login": "ZYinMD",
      "id": 32368482,
      "node_id": "MDQ6VXNlcjMyMzY4NDgy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/32368482?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ZYinMD",
      "html_url": "https://github.com/ZYinMD",
      "followers_url": "https://api.github.com/users/ZYinMD/followers",
      "following_url": "https://api.github.com/users/ZYinMD/following{/other_user}",
      "gists_url": "https://api.github.com/users/ZYinMD/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ZYinMD/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ZYinMD/subscriptions",
      "organizations_url": "https://api.github.com/users/ZYinMD/orgs",
      "repos_url": "https://api.github.com/users/ZYinMD/repos",
      "events_url": "https://api.github.com/users/ZYinMD/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ZYinMD/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 127893911,
        "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
        "name": "Component: DOM",
        "color": "fef2c0",
        "default": false,
        "description": null
      },
      {
        "id": 710722093,
        "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
        "name": "Type: Needs Investigation",
        "color": "fbca04",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-03-22T05:13:07Z",
    "updated_at": "2020-04-27T16:57:33Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "React version: 16.13.1\r\n\r\nI may be using Portal in a way that's not intended, which is why I had this bug, but at least it's not mentioned in the doc.\r\n\r\n## Steps To Reproduce\r\n\r\nDemo: [CodeSandbox](https://codesandbox.io/s/kind-morning-t3q9c)\r\n\r\nInspired by [this blogpost](https://medium.com/hackernoon/using-a-react-16-portal-to-do-something-cool-2a2d627b0202), I open a new browser window with `window.open()`, then render a portal in it, so the two windows belong to the same react app, and share states. It works like magic, but I find that the `onChange` events of controlled forms (like `input` or `select`) don't fire.\r\n\r\n## The current behavior\r\nAs shown in the sandbox, my controlled `input` and `select` components work well in normal portals, but same components don't work in portals in external window. \r\n\r\n## The expected behavior\r\nI hope they just work the same.\r\n\r\nIf it can't work, I'll need to use uncontrolled forms.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/18314",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/18314/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/18314/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/18314/events",
    "html_url": "https://github.com/facebook/react/issues/18314",
    "id": 581677939,
    "node_id": "MDU6SXNzdWU1ODE2Nzc5Mzk=",
    "number": 18314,
    "title": "Bug: React-test-renderer error when updating state in act",
    "user": {
      "login": "ahummel25",
      "id": 12643871,
      "node_id": "MDQ6VXNlcjEyNjQzODcx",
      "avatar_url": "https://avatars1.githubusercontent.com/u/12643871?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ahummel25",
      "html_url": "https://github.com/ahummel25",
      "followers_url": "https://api.github.com/users/ahummel25/followers",
      "following_url": "https://api.github.com/users/ahummel25/following{/other_user}",
      "gists_url": "https://api.github.com/users/ahummel25/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ahummel25/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ahummel25/subscriptions",
      "organizations_url": "https://api.github.com/users/ahummel25/orgs",
      "repos_url": "https://api.github.com/users/ahummel25/repos",
      "events_url": "https://api.github.com/users/ahummel25/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ahummel25/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710400704,
        "node_id": "MDU6TGFiZWw3MTA0MDA3MDQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Test%20Renderer",
        "name": "Component: Test Renderer",
        "color": "006b75",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-03-15T13:37:21Z",
    "updated_at": "2020-07-16T15:12:53Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 16.13.0\r\nreact-test-renderer version: 16.13.0\r\n\r\n## Steps To Reproduce\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: [Here](https://codesandbox.io/s/dazzling-kare-nxtfs) is a reproducible link.\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nIt's worth noting this example is using material-ui as a dependency. Regardless, I believe the test should still pass.\r\n\r\n When updating state in my component, a drawer component opens and closes depending on a boolean value. Code works fine in the browser. When running the above test, it fails with a trace error that includes the below.\r\n\r\n```\r\nTypeError: parentInstance.children.indexOf is not a function\r\n    at appendChild (https://psnrk.csb.app/node_modules/react-test-renderer/cjs/react-test-renderer.development.js:720:39)\r\n```\r\n\r\nHere I am drilling down to a child anchor tag to access its `onClick` function. As you'll see in the sandbox example, I am passing it a `mockEvent` because the handler first calls `event.preventDefault`. \r\n\r\nThis does not cause any issues. The error occurs when the `setOpen` hook function gets called. Just wanted to point that out.\r\n```\r\nact(() => {\r\n    tree.root.children[0].props.children.props.children.props.onClick(mockEvent);\r\n});\r\n```\r\n\r\nSame error happens when I try to initiate the `onClose` handler of the `Drawer` component:\r\n\r\n```\r\nact(() => {\r\n    tree.root.children[1].props.onClose(mockEvent);\r\n});\r\n```\r\n\r\n## The expected behavior\r\n\r\nTest should pass. The state should be properly updated in the `onClick` handler or the `onClose` handler and I should be able to make further assertions after that.\r\n\r\nIf this is not the best way to execute a click event with `react-test-renderer` please let me know. I was looking for examples and it seemed like this was the way to do it.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/18290",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/18290/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/18290/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/18290/events",
    "html_url": "https://github.com/facebook/react/issues/18290",
    "id": 579845048,
    "node_id": "MDU6SXNzdWU1Nzk4NDUwNDg=",
    "number": 18290,
    "title": "Bug: IE11 throws error Assignment to read-only properties is not allowed in strict mode",
    "user": {
      "login": "Pinka",
      "id": 5305497,
      "node_id": "MDQ6VXNlcjUzMDU0OTc=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/5305497?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Pinka",
      "html_url": "https://github.com/Pinka",
      "followers_url": "https://api.github.com/users/Pinka/followers",
      "following_url": "https://api.github.com/users/Pinka/following{/other_user}",
      "gists_url": "https://api.github.com/users/Pinka/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Pinka/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Pinka/subscriptions",
      "organizations_url": "https://api.github.com/users/Pinka/orgs",
      "repos_url": "https://api.github.com/users/Pinka/repos",
      "events_url": "https://api.github.com/users/Pinka/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Pinka/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 69105383,
        "node_id": "MDU6TGFiZWw2OTEwNTM4Mw==",
        "url": "https://api.github.com/repos/facebook/react/labels/Browser:%20IE",
        "name": "Browser: IE",
        "color": "c7def8",
        "default": false,
        "description": null
      },
      {
        "id": 155984160,
        "node_id": "MDU6TGFiZWwxNTU5ODQxNjA=",
        "url": "https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed",
        "name": "Status: Unconfirmed",
        "color": "d4c5f9",
        "default": false,
        "description": "A potential issue that we haven't yet confirmed as a bug"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2020-03-12T10:38:37Z",
    "updated_at": "2020-07-31T17:01:08Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "When working in development mode in IE11 error is thrown in file \r\nreact-dom.development.js line 185. \r\n\r\nError: \"Assignment to read-only properties is not allowed in strict mode\"\r\nwindow.event is readOnly variable and IE11 is strict about it.\r\n\r\n![image](https://user-images.githubusercontent.com/5305497/76511927-8509c400-645c-11ea-89c4-9f38a6e0a778.png)\r\n\r\n\r\nReact version: 16.13.0\r\n\r\nIn production build there is no error as this code block is not included.\r\n\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/18229",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/18229/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/18229/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/18229/events",
    "html_url": "https://github.com/facebook/react/issues/18229",
    "id": 576484375,
    "node_id": "MDU6SXNzdWU1NzY0ODQzNzU=",
    "number": 18229,
    "title": "[Feature Request] Allow dependency length to change in hooks",
    "user": {
      "login": "georeith",
      "id": 3090066,
      "node_id": "MDQ6VXNlcjMwOTAwNjY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3090066?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/georeith",
      "html_url": "https://github.com/georeith",
      "followers_url": "https://api.github.com/users/georeith/followers",
      "following_url": "https://api.github.com/users/georeith/following{/other_user}",
      "gists_url": "https://api.github.com/users/georeith/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/georeith/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/georeith/subscriptions",
      "organizations_url": "https://api.github.com/users/georeith/orgs",
      "repos_url": "https://api.github.com/users/georeith/repos",
      "events_url": "https://api.github.com/users/georeith/events{/privacy}",
      "received_events_url": "https://api.github.com/users/georeith/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2020-03-05T19:36:28Z",
    "updated_at": "2020-09-23T10:19:56Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Not allowing dependency lists to change size limits the usefulness of `useMemo` in this particular use case but I imagine there are other similar use cases.\r\n\r\nTo be clear I am talking about the error triggered here:\r\n\r\nhttps://github.com/facebook/react/blob/024a764310e64ef38963df16970364b9942a60cd/packages/react-reconciler/src/ReactFiberHooks.js#L322\r\n\r\nFor instance, in my app I have a bunch of items and the user can select an unlimited amount of them, in another component I want to compute an expensive derived value based on this selection that is relevant only to this component, a good use case for `useMemo`.\r\n\r\nHowever it is not currently possible to use `useMemo` and I am forced to compute this derived data outside of this component even though I am only interested in doing so whilst this component is mounted.\r\n\r\nI don't understand why a change in dependency list length cannot be assumed to be a change in the dependencies itself?\r\n\r\nI believe this can be implemented by changing the above to:\r\n\r\n```js\r\nif (prevDeps.length !== nextDeps.length) {\r\n    return false;\r\n}\r\n```",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/18196",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/18196/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/18196/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/18196/events",
    "html_url": "https://github.com/facebook/react/pull/18196",
    "id": 574087955,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzgyNDc3NzE1",
    "number": 18196,
    "title": "Testing builds",
    "user": {
      "login": "threepointone",
      "id": 18808,
      "node_id": "MDQ6VXNlcjE4ODA4",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18808?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/threepointone",
      "html_url": "https://github.com/threepointone",
      "followers_url": "https://api.github.com/users/threepointone/followers",
      "following_url": "https://api.github.com/users/threepointone/following{/other_user}",
      "gists_url": "https://api.github.com/users/threepointone/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/threepointone/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/threepointone/subscriptions",
      "organizations_url": "https://api.github.com/users/threepointone/orgs",
      "repos_url": "https://api.github.com/users/threepointone/repos",
      "events_url": "https://api.github.com/users/threepointone/events{/privacy}",
      "received_events_url": "https://api.github.com/users/threepointone/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-03-02T16:22:01Z",
    "updated_at": "2020-07-11T13:00:57Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/18196",
      "html_url": "https://github.com/facebook/react/pull/18196",
      "diff_url": "https://github.com/facebook/react/pull/18196.diff",
      "patch_url": "https://github.com/facebook/react/pull/18196.patch"
    },
    "body": "We removed this in https://github.com/facebook/react/pull/18138 to unblock 16.13. This PR brings them back, with some changes -\r\n- testing builds are prefixed with `unstable-`, i.e - `react-dom/unstable-testing`\r\n- added back to `bundles.js`\r\n- introduces the `__TESTING__` global. Not used to generate the actual builds, but is used for test specific logic\r\n- removes the `.testing` forks of `ReactFeatureFlags`\r\n- flushes suspense fallbacks in prod for testing builds\r\n- changes tests in TestUtilsAct to reflect this\r\n- adds a testing build for `react` as well\r\n- and finally removes the testing sigils from prod builds. nice.\r\n- misc test config changes",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/18128",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/18128/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/18128/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/18128/events",
    "html_url": "https://github.com/facebook/react/issues/18128",
    "id": 570670095,
    "node_id": "MDU6SXNzdWU1NzA2NzAwOTU=",
    "number": 18128,
    "title": "Bug: input won't trigger onChange after a chain of setStates",
    "user": {
      "login": "voliva",
      "id": 5365487,
      "node_id": "MDQ6VXNlcjUzNjU0ODc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/5365487?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/voliva",
      "html_url": "https://github.com/voliva",
      "followers_url": "https://api.github.com/users/voliva/followers",
      "following_url": "https://api.github.com/users/voliva/following{/other_user}",
      "gists_url": "https://api.github.com/users/voliva/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/voliva/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/voliva/subscriptions",
      "organizations_url": "https://api.github.com/users/voliva/orgs",
      "repos_url": "https://api.github.com/users/voliva/repos",
      "events_url": "https://api.github.com/users/voliva/events{/privacy}",
      "received_events_url": "https://api.github.com/users/voliva/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 40929151,
        "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
        "name": "Type: Bug",
        "color": "b60205",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "acdlite",
      "id": 3624098,
      "node_id": "MDQ6VXNlcjM2MjQwOTg=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3624098?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/acdlite",
      "html_url": "https://github.com/acdlite",
      "followers_url": "https://api.github.com/users/acdlite/followers",
      "following_url": "https://api.github.com/users/acdlite/following{/other_user}",
      "gists_url": "https://api.github.com/users/acdlite/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/acdlite/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/acdlite/subscriptions",
      "organizations_url": "https://api.github.com/users/acdlite/orgs",
      "repos_url": "https://api.github.com/users/acdlite/repos",
      "events_url": "https://api.github.com/users/acdlite/events{/privacy}",
      "received_events_url": "https://api.github.com/users/acdlite/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "acdlite",
        "id": 3624098,
        "node_id": "MDQ6VXNlcjM2MjQwOTg=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/3624098?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/acdlite",
        "html_url": "https://github.com/acdlite",
        "followers_url": "https://api.github.com/users/acdlite/followers",
        "following_url": "https://api.github.com/users/acdlite/following{/other_user}",
        "gists_url": "https://api.github.com/users/acdlite/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/acdlite/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/acdlite/subscriptions",
        "organizations_url": "https://api.github.com/users/acdlite/orgs",
        "repos_url": "https://api.github.com/users/acdlite/repos",
        "events_url": "https://api.github.com/users/acdlite/events{/privacy}",
        "received_events_url": "https://api.github.com/users/acdlite/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-02-25T15:54:28Z",
    "updated_at": "2020-08-26T16:08:00Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact-dom version: 16.9.0 to 16.12.0 (latest)\r\n\r\nThis bug was not present in 16.8.6\r\n\r\n## Steps To Reproduce\r\n\r\n1. Create a controlled input element\r\n2. Add an `onKeyDown` event handler that will change a state.\r\n3. Add a `useEffect` hook that depends on the state from (2.), and changes another state\r\n4. Try to type in something in the input\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://codesandbox.io/s/nostalgic-lake-zzynt\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nThe input updates with the key the user has pressed\r\n\r\n## The expected behavior\r\nThe input doesn't update. The handler for `onKeyDown` was called, but the handler for `onChange` wasn't.\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/18116",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/18116/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/18116/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/18116/events",
    "html_url": "https://github.com/facebook/react/issues/18116",
    "id": 570133438,
    "node_id": "MDU6SXNzdWU1NzAxMzM0Mzg=",
    "number": 18116,
    "title": "React retains component references to old renders causing browser memory to increase",
    "user": {
      "login": "tsjohns9",
      "id": 24981281,
      "node_id": "MDQ6VXNlcjI0OTgxMjgx",
      "avatar_url": "https://avatars1.githubusercontent.com/u/24981281?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tsjohns9",
      "html_url": "https://github.com/tsjohns9",
      "followers_url": "https://api.github.com/users/tsjohns9/followers",
      "following_url": "https://api.github.com/users/tsjohns9/following{/other_user}",
      "gists_url": "https://api.github.com/users/tsjohns9/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tsjohns9/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tsjohns9/subscriptions",
      "organizations_url": "https://api.github.com/users/tsjohns9/orgs",
      "repos_url": "https://api.github.com/users/tsjohns9/repos",
      "events_url": "https://api.github.com/users/tsjohns9/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tsjohns9/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710722093,
        "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
        "name": "Type: Needs Investigation",
        "color": "fbca04",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 8,
    "created_at": "2020-02-24T20:38:48Z",
    "updated_at": "2020-08-18T07:44:13Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 16.12.0\r\nLink to deployed demo app - https://tsjohns9.github.io/react-memory-leak/\r\nLink to demo repo - https://github.com/tsjohns9/react-memory-leak\r\n\r\n## The current behavior\r\nReact appears to retain references to old renders of components which prevents the browser from running the garbage collector on unused memory.\r\n\r\n## The expected behavior\r\nReact should release the memory of components from previous renders\r\n\r\n## Description\r\nI have a web app that imports an OAS 3/Swagger 2.0 json spec file, and renders the file using the swagger-ui component, https://github.com/swagger-api/swagger-ui.\r\n\r\nThese json files can be very large. If I upload a file that is 500kb and pass it into the swagger-ui component the heap snapshot in chrome will show about 32.6 MB being used to render the app.\r\n\r\nAt some point during the lifecycle of this component the spec file may be updated by a user. When this happens the swagger-ui component will re-render. Between re-renders I can see from my heap snapshot that about 15 more mb are added to the heap.\r\n\r\nEven if this component is completely unmounted, the memory is still retained and cannot be garbage collected.\r\n\r\nI would expect that after a re-render the heap size would be about the same, and the old references would be released for garbage collection.\r\n\r\nI have come here with this issue and not swagger-ui because based on the heap snapshots the detached DOM elements are being retained by React directly.\r\n\r\nThe spec file that I have used is about 500kb. Unfortunately it is a proprietary file and I cannot share it here. Instead, I have provided a spec file from swagger-ui. This file is much smaller, but it will serve the purpose of showing how react is retaining references to old component renders. In my situation since the file is so large this becomes much more apparent to the user that there is a problem than with a much smaller json file.\r\n\r\n![Screen Shot 2020-02-24 at 1 17 42 PM](https://user-images.githubusercontent.com/24981281/75188107-c97d2c00-5708-11ea-95dd-7320d75cbf99.png)\r\n![Screen Shot 2020-02-24 at 1 21 30 PM](https://user-images.githubusercontent.com/24981281/75188095-c2eeb480-5708-11ea-9ede-c6f29452dde5.png)\r\n\r\n## Steps To Reproduce\r\n1. View the app [here](https://tsjohns9.github.io/react-memory-leak/)\r\n2. Open the console, and take a heap snapshot\r\n3. Press the Update Spec button in the top left of the app, or the Unmount button\r\n4. Take another heap snapshot.\r\n5. You will see that the heap size has increased\r\n6. Compare the two heap sizes and check to see how many new detached objects there are. Here is a screenshot as an example\r\n![Screen Shot 2020-02-24 at 1 26 19 PM](https://user-images.githubusercontent.com/24981281/75188470-6c35aa80-5709-11ea-956b-61022e80fa4b.png)\r\n\r\nLink to code example: https://tsjohns9.github.io/react-memory-leak",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/18101",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/18101/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/18101/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/18101/events",
    "html_url": "https://github.com/facebook/react/issues/18101",
    "id": 569229439,
    "node_id": "MDU6SXNzdWU1NjkyMjk0Mzk=",
    "number": 18101,
    "title": "Arbitrary log lines may appear in between an error and the subsequent \"The above error…\" message",
    "user": {
      "login": "sophiebits",
      "id": 6820,
      "node_id": "MDQ6VXNlcjY4MjA=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/6820?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sophiebits",
      "html_url": "https://github.com/sophiebits",
      "followers_url": "https://api.github.com/users/sophiebits/followers",
      "following_url": "https://api.github.com/users/sophiebits/following{/other_user}",
      "gists_url": "https://api.github.com/users/sophiebits/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sophiebits/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sophiebits/subscriptions",
      "organizations_url": "https://api.github.com/users/sophiebits/orgs",
      "repos_url": "https://api.github.com/users/sophiebits/repos",
      "events_url": "https://api.github.com/users/sophiebits/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sophiebits/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 40929151,
        "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
        "name": "Type: Bug",
        "color": "b60205",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-02-21T23:08:59Z",
    "updated_at": "2020-09-16T18:56:48Z",
    "closed_at": null,
    "author_association": "COLLABORATOR",
    "active_lock_reason": null,
    "body": "React version: 16.12\r\n\r\nIf one component throws, and one of its siblings logs something else to the console, that sibling's logs appear in between the throwing component and the extra React information about that throw.\r\n\r\nThis is hard to explain in words but easy to explain in code and pictures, so look:\r\n\r\nRepro: https://codesandbox.io/s/boring-firefly-bu79e\r\n\r\n![image](https://user-images.githubusercontent.com/6820/75078940-d822d380-54bb-11ea-99d2-c77fbc0c9a5b.png)\r\n\r\nThe third log line (\"The above…\") refers to the first (\"Uncaught…\") but looks like it refers to the second (\"Please don't…\"). This is confusing when debugging.\r\n\r\nInstead, I would expect \"The above error…\" to be right below the uncaught window-level exception we raise. (Maybe this isn't possible without diverging dev vs. prod behavior? Not sure but thought I'd file…)",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/18098",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/18098/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/18098/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/18098/events",
    "html_url": "https://github.com/facebook/react/issues/18098",
    "id": 569176281,
    "node_id": "MDU6SXNzdWU1NjkxNzYyODE=",
    "number": 18098,
    "title": "Bug: Unexpected render",
    "user": {
      "login": "TriStarGod",
      "id": 8272754,
      "node_id": "MDQ6VXNlcjgyNzI3NTQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/8272754?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TriStarGod",
      "html_url": "https://github.com/TriStarGod",
      "followers_url": "https://api.github.com/users/TriStarGod/followers",
      "following_url": "https://api.github.com/users/TriStarGod/following{/other_user}",
      "gists_url": "https://api.github.com/users/TriStarGod/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TriStarGod/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TriStarGod/subscriptions",
      "organizations_url": "https://api.github.com/users/TriStarGod/orgs",
      "repos_url": "https://api.github.com/users/TriStarGod/repos",
      "events_url": "https://api.github.com/users/TriStarGod/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TriStarGod/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 40929151,
        "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
        "name": "Type: Bug",
        "color": "b60205",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "acdlite",
      "id": 3624098,
      "node_id": "MDQ6VXNlcjM2MjQwOTg=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3624098?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/acdlite",
      "html_url": "https://github.com/acdlite",
      "followers_url": "https://api.github.com/users/acdlite/followers",
      "following_url": "https://api.github.com/users/acdlite/following{/other_user}",
      "gists_url": "https://api.github.com/users/acdlite/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/acdlite/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/acdlite/subscriptions",
      "organizations_url": "https://api.github.com/users/acdlite/orgs",
      "repos_url": "https://api.github.com/users/acdlite/repos",
      "events_url": "https://api.github.com/users/acdlite/events{/privacy}",
      "received_events_url": "https://api.github.com/users/acdlite/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "acdlite",
        "id": 3624098,
        "node_id": "MDQ6VXNlcjM2MjQwOTg=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/3624098?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/acdlite",
        "html_url": "https://github.com/acdlite",
        "followers_url": "https://api.github.com/users/acdlite/followers",
        "following_url": "https://api.github.com/users/acdlite/following{/other_user}",
        "gists_url": "https://api.github.com/users/acdlite/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/acdlite/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/acdlite/subscriptions",
        "organizations_url": "https://api.github.com/users/acdlite/orgs",
        "repos_url": "https://api.github.com/users/acdlite/repos",
        "events_url": "https://api.github.com/users/acdlite/events{/privacy}",
        "received_events_url": "https://api.github.com/users/acdlite/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": null,
    "comments": 8,
    "created_at": "2020-02-21T20:47:07Z",
    "updated_at": "2020-08-25T04:32:08Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nhttps://stackoverflow.com/questions/60345064/react-hooks-rendering-cause\r\n\r\nI'm playing with simple React components to understand when rendering occurs.\r\n\r\n\r\n## The current behavior\r\n\r\n[Sample 1][1] - Initially renders once. Regardless of the number of times the button is clicked, it doesn't render. This is expected.\r\n\r\n    import React, { useState } from \"react\";\r\n    import \"./styles.css\";\r\n    \r\n    export default function App() {\r\n      const [state, setState] = useState([\r\n        { id: 1, name: \"test1\" },\r\n        { id: 2, name: \"test2\" }\r\n      ]);\r\n      const onClick = () => setState(data => data);\r\n      console.log(\"App rendered\");\r\n      return (\r\n        <div className=\"App\">\r\n          <h1>Test if setting same data causes re-rendering</h1>\r\n          <button onClick={onClick}>Call setState with same data</button>\r\n          {state.map(({ id, name }) => (\r\n            <p key={id}>{name}</p>\r\n          ))}\r\n        </div>\r\n      );\r\n    }\r\n\r\n\r\n[Sample 2][2] - Initially renders twice since `useEffect` updates `setMessages` with a value. This is expected. However, if the button is click 1+ times, it renders once. It shouldn't even re-render since the same value is being set. **Why is it rendering if no new value / reference is being updated?**\r\n\r\n    import React, { useState, useEffect, useMemo, useCallback } from \"react\";\r\n    import axios from \"axios\";\r\n    import \"./styles.css\";\r\n    \r\n    const days = [\r\n      \"Sunday\",\r\n      \"Monday\",\r\n      \"Tuesday\",\r\n      \"Wednesday\",\r\n      \"Thursday\",\r\n      \"Friday\",\r\n      \"Saturday\"\r\n    ];\r\n    export default function App() {\r\n      const [messages, setMessages] = useState([]);\r\n      useEffect(() => {\r\n        axios\r\n          .get(`https://api.myjson.com/bins/10xva4`)\r\n          .then(({ data: { messages } }) => setMessages(messages));\r\n      }, []);\r\n      const Display = useMemo(\r\n        () =>\r\n          messages.map(({ content, senderUuid, sentAt }, index) => {\r\n            let d = new Date(sentAt);\r\n            return (\r\n              <div className=\"container\" key={index}>\r\n                <p>Content: {content}</p>\r\n                <p>SenderUuid: {senderUuid}</p>\r\n                <p>DayOfTheWeek: {d.getDate()}</p>\r\n                <p>Month: {d.getMonth()}</p>\r\n                <p>Day: {days[d.getDay()]}</p>\r\n                <p>Year: {d.getFullYear()}</p>\r\n              </div>\r\n            );\r\n          }),\r\n        [messages]\r\n      );\r\n      const onClick = useCallback(() => setMessages(messages => messages), []);\r\n      console.log(\"App rendered\");\r\n      // console.log({ messages });\r\n      return useMemo(\r\n        () => (\r\n          <div className=\"App\">\r\n            <button onClick={onClick}>Call setMessages with same data</button>\r\n            {Display}\r\n          </div>\r\n        ),\r\n        [Display, onClick]\r\n      );\r\n    }\r\n\r\n\r\n  [1]: https://codesandbox.io/s/testing-rendering-bo9bp\r\n  [2]: https://codesandbox.io/s/call-api-with-useeffect-vlo34\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\n## The expected behavior\r\n\r\nShould not re-render if no new value or reference is updated.\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/18051",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/18051/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/18051/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/18051/events",
    "html_url": "https://github.com/facebook/react/issues/18051",
    "id": 566265495,
    "node_id": "MDU6SXNzdWU1NjYyNjU0OTU=",
    "number": 18051,
    "title": "Bug: [eslint-plugin-react-hooks] exhaustive-deps false positive on \"unnecessary\" dependency if its a React component",
    "user": {
      "login": "zeorin",
      "id": 1187078,
      "node_id": "MDQ6VXNlcjExODcwNzg=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1187078?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zeorin",
      "html_url": "https://github.com/zeorin",
      "followers_url": "https://api.github.com/users/zeorin/followers",
      "following_url": "https://api.github.com/users/zeorin/following{/other_user}",
      "gists_url": "https://api.github.com/users/zeorin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zeorin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zeorin/subscriptions",
      "organizations_url": "https://api.github.com/users/zeorin/orgs",
      "repos_url": "https://api.github.com/users/zeorin/repos",
      "events_url": "https://api.github.com/users/zeorin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zeorin/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1249821345,
        "node_id": "MDU6TGFiZWwxMjQ5ODIxMzQ1",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20ESLint%20Rules",
        "name": "Component: ESLint Rules",
        "color": "f7afdb",
        "default": false,
        "description": ""
      },
      {
        "id": 40929151,
        "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
        "name": "Type: Bug",
        "color": "b60205",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 10,
    "created_at": "2020-02-17T12:24:15Z",
    "updated_at": "2020-10-17T08:24:03Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "## Steps to reproduce\r\n\r\n1. create a memoized value using `useMemo`\r\n2. a React component is used in the creation of this value, in a JSX expression\r\n3. specify the React component in the dependency array\r\n\r\nLink to code example: https://github.com/zeorin/eslint-plugin-react-hooks-repro\r\n\r\n## The current behavior\r\n\r\n```\r\nReact Hook useMemo has an unnecessary dependency: 'Component'. Either exclude it or remove the dependency array react-hooks/exhaustive-deps\r\n```\r\n\r\n## The expected behavior\r\n\r\nNo lint errors.\r\n\r\n## More details\r\n\r\nA simple repro (taken from the link above) is:\r\n\r\n```javascript.jsx\r\nfunction Foo({ component: Component }) {\r\n\tconst memoized = useMemo(() => ({\r\n\t\trender: () => <Component />\r\n\t}), [Component]);\r\n\r\n\treturn memoized.render();\r\n}\r\n```\r\n\r\n## Workarounds\r\n\r\nIf one changes the component to lowercase, the lint error goes away. It does also mean that we need to change the way we render the component:\r\n\r\n```javascript.jsx\r\nfunction Foo({ component }) {\r\n\tconst memoized = useMemo(() => ({\r\n\t\trender: component\r\n\t}), [component]);\r\n\r\n\treturn memoized.render();\r\n}\r\n```\r\n\r\nAlternatively we can decide not to use JSX, in which case the lint rule functions correctly, too:\r\n\r\n```javascript.jsx\r\nfunction Foo({ component: Component }) {\r\n\tconst memoized = useMemo(() => ({\r\n\t\trender: () => React.createElement(Component)\r\n\t}), [Component]);\r\n\r\n\treturn memoized.render();\r\n}\r\n```\r\n\r\n## Impact\r\n\r\nCurrently it is hard to use props that are components in a JSX expression if one is using the `exhaustive-deps` rule.\r\n\r\nThis is also compounded by the fact that this rule has a ESLint fix that removes the dependency, thus changing the behaviour of the code and leading to bugs. See https://github.com/facebook/react/issues/16313 for that bug report.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/18006",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/18006/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/18006/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/18006/events",
    "html_url": "https://github.com/facebook/react/issues/18006",
    "id": 562612384,
    "node_id": "MDU6SXNzdWU1NjI2MTIzODQ=",
    "number": 18006,
    "title": "Bug: useTransition's pending boolean is triggered immediately, even if there's no suspension",
    "user": {
      "login": "arackaf",
      "id": 11261266,
      "node_id": "MDQ6VXNlcjExMjYxMjY2",
      "avatar_url": "https://avatars2.githubusercontent.com/u/11261266?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/arackaf",
      "html_url": "https://github.com/arackaf",
      "followers_url": "https://api.github.com/users/arackaf/followers",
      "following_url": "https://api.github.com/users/arackaf/following{/other_user}",
      "gists_url": "https://api.github.com/users/arackaf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/arackaf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/arackaf/subscriptions",
      "organizations_url": "https://api.github.com/users/arackaf/orgs",
      "repos_url": "https://api.github.com/users/arackaf/repos",
      "events_url": "https://api.github.com/users/arackaf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/arackaf/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1205087127,
        "node_id": "MDU6TGFiZWwxMjA1MDg3MTI3",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Concurrent%20Mode",
        "name": "Component: Concurrent Mode",
        "color": "ffccd3",
        "default": false,
        "description": ""
      },
      {
        "id": 1775955521,
        "node_id": "MDU6TGFiZWwxNzc1OTU1NTIx",
        "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Backlog",
        "name": "Resolution: Backlog",
        "color": "9dd1e8",
        "default": false,
        "description": ""
      },
      {
        "id": 40929153,
        "node_id": "MDU6TGFiZWw0MDkyOTE1Mw==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
        "name": "Type: Enhancement",
        "color": "84b6eb",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-02-10T14:50:42Z",
    "updated_at": "2020-08-14T22:23:54Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version:  241c4467e\r\n\r\n## Steps To Reproduce\r\n\r\n1.  https://codesandbox.io/s/cranky-wing-lc7wr\r\n2. Swap between the two screens by clicking the two buttons\r\n3. Inline loading shows the first time you load screen A. But it also usually shows on subsequent loads, even though there's nothing Suspending\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\nInline loading indicator usually shows on subsequent loads.\r\n\r\n## The expected behavior\r\n\r\nIt should only show on the first load of A",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17998",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17998/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17998/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17998/events",
    "html_url": "https://github.com/facebook/react/pull/17998",
    "id": 561643260,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzcyNDE2NjEy",
    "number": 17998,
    "title": "Refactor unmountHostComponents to recursively unmount",
    "user": {
      "login": "trueadm",
      "id": 1519870,
      "node_id": "MDQ6VXNlcjE1MTk4NzA=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1519870?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/trueadm",
      "html_url": "https://github.com/trueadm",
      "followers_url": "https://api.github.com/users/trueadm/followers",
      "following_url": "https://api.github.com/users/trueadm/following{/other_user}",
      "gists_url": "https://api.github.com/users/trueadm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/trueadm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/trueadm/subscriptions",
      "organizations_url": "https://api.github.com/users/trueadm/orgs",
      "repos_url": "https://api.github.com/users/trueadm/repos",
      "events_url": "https://api.github.com/users/trueadm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/trueadm/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-02-07T13:39:22Z",
    "updated_at": "2020-04-01T19:07:46Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/17998",
      "html_url": "https://github.com/facebook/react/pull/17998",
      "diff_url": "https://github.com/facebook/react/pull/17998.diff",
      "patch_url": "https://github.com/facebook/react/pull/17998.patch"
    },
    "body": "This PR refactors the logice in `unmountHostComponents` so that we instead recursively traverse the nodes as we unmount them. I noticed that `unmountHostComponents` was a hot function during the commit phase, and this should improve the runtime performance slightly, as we no longer need to mutate the fields on the fibers to point to different return pointers.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17997",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17997/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17997/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17997/events",
    "html_url": "https://github.com/facebook/react/issues/17997",
    "id": 561568354,
    "node_id": "MDU6SXNzdWU1NjE1NjgzNTQ=",
    "number": 17997,
    "title": "Bug: React Dev Tools Firefox extension fails to detect React",
    "user": {
      "login": "Kein",
      "id": 623756,
      "node_id": "MDQ6VXNlcjYyMzc1Ng==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/623756?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Kein",
      "html_url": "https://github.com/Kein",
      "followers_url": "https://api.github.com/users/Kein/followers",
      "following_url": "https://api.github.com/users/Kein/following{/other_user}",
      "gists_url": "https://api.github.com/users/Kein/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Kein/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Kein/subscriptions",
      "organizations_url": "https://api.github.com/users/Kein/orgs",
      "repos_url": "https://api.github.com/users/Kein/repos",
      "events_url": "https://api.github.com/users/Kein/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Kein/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710573595,
        "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
        "name": "Component: Developer Tools",
        "color": "fbca04",
        "default": false,
        "description": null
      },
      {
        "id": 717031390,
        "node_id": "MDU6TGFiZWw3MTcwMzEzOTA=",
        "url": "https://api.github.com/repos/facebook/react/labels/good%20first%20issue",
        "name": "good first issue",
        "color": "6ce26a",
        "default": true,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "ruslan-shuster",
      "id": 58134692,
      "node_id": "MDQ6VXNlcjU4MTM0Njky",
      "avatar_url": "https://avatars2.githubusercontent.com/u/58134692?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ruslan-shuster",
      "html_url": "https://github.com/ruslan-shuster",
      "followers_url": "https://api.github.com/users/ruslan-shuster/followers",
      "following_url": "https://api.github.com/users/ruslan-shuster/following{/other_user}",
      "gists_url": "https://api.github.com/users/ruslan-shuster/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ruslan-shuster/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ruslan-shuster/subscriptions",
      "organizations_url": "https://api.github.com/users/ruslan-shuster/orgs",
      "repos_url": "https://api.github.com/users/ruslan-shuster/repos",
      "events_url": "https://api.github.com/users/ruslan-shuster/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ruslan-shuster/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "ruslan-shuster",
        "id": 58134692,
        "node_id": "MDQ6VXNlcjU4MTM0Njky",
        "avatar_url": "https://avatars2.githubusercontent.com/u/58134692?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ruslan-shuster",
        "html_url": "https://github.com/ruslan-shuster",
        "followers_url": "https://api.github.com/users/ruslan-shuster/followers",
        "following_url": "https://api.github.com/users/ruslan-shuster/following{/other_user}",
        "gists_url": "https://api.github.com/users/ruslan-shuster/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ruslan-shuster/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ruslan-shuster/subscriptions",
        "organizations_url": "https://api.github.com/users/ruslan-shuster/orgs",
        "repos_url": "https://api.github.com/users/ruslan-shuster/repos",
        "events_url": "https://api.github.com/users/ruslan-shuster/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ruslan-shuster/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": null,
    "comments": 17,
    "created_at": "2020-02-07T11:01:14Z",
    "updated_at": "2020-10-24T23:24:50Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "React extension version: 4.4.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Install Firefox 72.0.2x64\r\n2. Go to Discordapp.com\r\n\r\n## The current behavior\r\nExtension reports: _\"This page does not appears to be using React\"_\r\n\r\n## The expected behavior\r\nReact is detected (just like it is currently in Chrome/Chromium)",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17968",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17968/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17968/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17968/events",
    "html_url": "https://github.com/facebook/react/pull/17968",
    "id": 559425808,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzcwNTk3MTcx",
    "number": 17968,
    "title": "[Scheduler] shouldYield should always return false from inside an expired task",
    "user": {
      "login": "acdlite",
      "id": 3624098,
      "node_id": "MDQ6VXNlcjM2MjQwOTg=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3624098?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/acdlite",
      "html_url": "https://github.com/acdlite",
      "followers_url": "https://api.github.com/users/acdlite/followers",
      "following_url": "https://api.github.com/users/acdlite/following{/other_user}",
      "gists_url": "https://api.github.com/users/acdlite/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/acdlite/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/acdlite/subscriptions",
      "organizations_url": "https://api.github.com/users/acdlite/orgs",
      "repos_url": "https://api.github.com/users/acdlite/repos",
      "events_url": "https://api.github.com/users/acdlite/events{/privacy}",
      "received_events_url": "https://api.github.com/users/acdlite/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2020-02-04T01:04:58Z",
    "updated_at": "2020-02-12T00:12:36Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/17968",
      "html_url": "https://github.com/facebook/react/pull/17968",
      "diff_url": "https://github.com/facebook/react/pull/17968.diff",
      "patch_url": "https://github.com/facebook/react/pull/17968.patch"
    },
    "body": "## Based on #17967\r\n\r\nThe current behavior of shouldYield is unspecified except in cases that happen to be relied on by the React work loop's implementation. However, some of the unspecified cases are important and the consequences of assuming the wrong behavior are really bad.\r\n\r\nFor example, it's natural to assume that `shouldYield` returns false when called from within an expired task. But the current behavior usually does that, unless there's a higher priority task or a main thread task (i.e. at the end of the 5ms message loop interval).\r\n\r\nThis fixes `shouldYield` so that it always returns false inside an expired task, regardless of the other tasks in the queue.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17953",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17953/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17953/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17953/events",
    "html_url": "https://github.com/facebook/react/issues/17953",
    "id": 558503636,
    "node_id": "MDU6SXNzdWU1NTg1MDM2MzY=",
    "number": 17953,
    "title": "Bug: useReducer runs the queued updates with new props",
    "user": {
      "login": "a-c-sreedhar-reddy",
      "id": 16081083,
      "node_id": "MDQ6VXNlcjE2MDgxMDgz",
      "avatar_url": "https://avatars3.githubusercontent.com/u/16081083?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/a-c-sreedhar-reddy",
      "html_url": "https://github.com/a-c-sreedhar-reddy",
      "followers_url": "https://api.github.com/users/a-c-sreedhar-reddy/followers",
      "following_url": "https://api.github.com/users/a-c-sreedhar-reddy/following{/other_user}",
      "gists_url": "https://api.github.com/users/a-c-sreedhar-reddy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/a-c-sreedhar-reddy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/a-c-sreedhar-reddy/subscriptions",
      "organizations_url": "https://api.github.com/users/a-c-sreedhar-reddy/orgs",
      "repos_url": "https://api.github.com/users/a-c-sreedhar-reddy/repos",
      "events_url": "https://api.github.com/users/a-c-sreedhar-reddy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/a-c-sreedhar-reddy/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1109410193,
        "node_id": "MDU6TGFiZWwxMTA5NDEwMTkz",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Hooks",
        "name": "Component: Hooks",
        "color": "c2f27b",
        "default": false,
        "description": ""
      },
      {
        "id": 40929151,
        "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
        "name": "Type: Bug",
        "color": "b60205",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 13,
    "created_at": "2020-02-01T07:58:03Z",
    "updated_at": "2020-08-03T19:21:07Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 16.8.0\r\n\r\n## Steps To Reproduce\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example:\r\nhttps://codesandbox.io/s/usereducer-wfcmq Link to codesandbox.\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\nInitially step is 0. So for every step react does not rerender due to this https://github.com/facebook/react/blob/master/packages/react-reconciler/src/ReactFiberHooks.js#L1347. But state updates are queued. So when `step` changes all the state updates are done and hence creates a bug by adding the new step prop.\r\n\r\nhttps://overreacted.io/a-complete-guide-to-useeffect/#why-usereducer-is-the-cheat-mode-of-hooks",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17938",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17938/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17938/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17938/events",
    "html_url": "https://github.com/facebook/react/issues/17938",
    "id": 557613860,
    "node_id": "MDU6SXNzdWU1NTc2MTM4NjA=",
    "number": 17938,
    "title": "Bug: Render-phase update to another root causes an over-rendering loop",
    "user": {
      "login": "gaearon",
      "id": 810438,
      "node_id": "MDQ6VXNlcjgxMDQzOA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gaearon",
      "html_url": "https://github.com/gaearon",
      "followers_url": "https://api.github.com/users/gaearon/followers",
      "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
      "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
      "organizations_url": "https://api.github.com/users/gaearon/orgs",
      "repos_url": "https://api.github.com/users/gaearon/repos",
      "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gaearon/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 178761159,
        "node_id": "MDU6TGFiZWwxNzg3NjExNTk=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Regression",
        "name": "Type: Regression",
        "color": "e11d21",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "sebmarkbage",
      "id": 63648,
      "node_id": "MDQ6VXNlcjYzNjQ4",
      "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sebmarkbage",
      "html_url": "https://github.com/sebmarkbage",
      "followers_url": "https://api.github.com/users/sebmarkbage/followers",
      "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
      "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
      "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
      "repos_url": "https://api.github.com/users/sebmarkbage/repos",
      "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "sebmarkbage",
        "id": 63648,
        "node_id": "MDQ6VXNlcjYzNjQ4",
        "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sebmarkbage",
        "html_url": "https://github.com/sebmarkbage",
        "followers_url": "https://api.github.com/users/sebmarkbage/followers",
        "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
        "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
        "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
        "repos_url": "https://api.github.com/users/sebmarkbage/repos",
        "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
        "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-01-30T16:36:57Z",
    "updated_at": "2020-01-30T17:08:04Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "```js\r\n    let container1 = document.createElement('div');\r\n    let container2 = document.createElement('div');\r\n\r\n    function Root1() {\r\n      _setX(x => x + 1);\r\n      return 'Hello';\r\n    }\r\n\r\n    let _setX = () => {};\r\n    function Root2() {\r\n      console.log('Root 2')\r\n      let [x, setX] = React.useState(0);\r\n      _setX = setX;\r\n      return <div>{x}</div>\r\n    }\r\n\r\n    const root1 = ReactDOM.createRoot(container1);\r\n    root1.render(<Root1 />);\r\n    const root2 = ReactDOM.createRoot(container2);\r\n    root2.render(<Root2 />);\r\n```\r\n\r\nExpected: `Root2` renders twice.\r\nActual: `Root2` renders a non-deterministic number of times.\r\n\r\nThis bisects to https://github.com/facebook/react/pull/15755, which removed the `5000` clamping. Without it, we get updates that have a slightly larger timeout than `5000`, and so the loop doesn't stop until we get to `5000`.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17899",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17899/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17899/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17899/events",
    "html_url": "https://github.com/facebook/react/issues/17899",
    "id": 554247999,
    "node_id": "MDU6SXNzdWU1NTQyNDc5OTk=",
    "number": 17899,
    "title": "Bug: styles object using css variables and both a shorthand and a specific property renders incorrectly",
    "user": {
      "login": "joaomoleiro",
      "id": 23476208,
      "node_id": "MDQ6VXNlcjIzNDc2MjA4",
      "avatar_url": "https://avatars2.githubusercontent.com/u/23476208?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/joaomoleiro",
      "html_url": "https://github.com/joaomoleiro",
      "followers_url": "https://api.github.com/users/joaomoleiro/followers",
      "following_url": "https://api.github.com/users/joaomoleiro/following{/other_user}",
      "gists_url": "https://api.github.com/users/joaomoleiro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/joaomoleiro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/joaomoleiro/subscriptions",
      "organizations_url": "https://api.github.com/users/joaomoleiro/orgs",
      "repos_url": "https://api.github.com/users/joaomoleiro/repos",
      "events_url": "https://api.github.com/users/joaomoleiro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/joaomoleiro/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 127893911,
        "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
        "name": "Component: DOM",
        "color": "fef2c0",
        "default": false,
        "description": null
      },
      {
        "id": 710375792,
        "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 8,
    "created_at": "2020-01-23T15:58:13Z",
    "updated_at": "2020-04-11T23:19:58Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "React does not produce the correct css inline styles when using css variables for both the shorthand property and another specific one (like `padding` and `paddingRight`).\r\n\r\nThe styles object:\r\n\r\n```js\r\n{\r\n  padding: \"calc(var(--spacing) * 1)\",\r\n  paddingRight: \"calc(var(--spacing) * 3)\",\r\n  paddingBottom: \"calc(var(--spacing) * 4)\"\r\n};\r\n```\r\nproduces the following styles:\r\n\r\n![image](https://user-images.githubusercontent.com/23476208/72995030-1d39e400-3df0-11ea-9235-0e6ad00718b2.png)\r\n\r\nand the following html:\r\n```html\r\n<span style=\"padding-top: ; padding-right: calc(var(--spacing) * 3); padding-bottom: calc(var(--spacing) * 4); padding-left: ;\">App</span>\r\n```\r\n\r\neven though the computed properties tab of the dev-tools appear to be correct and the padding is properly rendered in the screen:\r\n\r\n![image](https://user-images.githubusercontent.com/23476208/72995225-6e49d800-3df0-11ea-9770-98f062008ca3.png)\r\n\r\nIf I remove the css-variable, everything works as expected.\r\n\r\n**React version**: From v15.0.0 to 16.12.0\r\n\r\n_Note_: Below v15.0.0 the styles are correctly produced:\r\n\r\n```html\r\n<span style=\"padding:calc(var(--spacing) * 1);padding-right:calc(var(--spacing) * 3);padding-bottom:calc(var(--spacing) * 4);\">App</span>\r\n```\r\n\r\n\r\n## Steps To Reproduce\r\n\r\n1. Add a style object to a component that has both a property shorthand and a specific one (like `padding` and `paddingRight`) and uses a css variable (like `var(--spacing)`.\r\n2. Render that component and inspect using dev-tools.\r\n\r\nLink to code example: https://codesandbox.io/s/heuristic-wood-bjr1y\r\n\r\nstyles object:\r\n```js\r\n{\r\n  padding: \"calc(var(--spacing) * 1)\",\r\n  paddingRight: \"calc(var(--spacing) * 3)\",\r\n  paddingBottom: \"calc(var(--spacing) * 4)\"\r\n};\r\n```\r\n## The current behavior\r\n\r\nReact does not produces the correct css inline styles when using css variables for both the shorthand property and another specific one:\r\n\r\n```html\r\n<span style=\"padding-top: ; padding-right: calc(var(--spacing) * 3); padding-bottom: calc(var(--spacing) * 4); padding-left: ;\">App</span>\r\n```\r\n\r\n## The expected behavior\r\n\r\nInline styles using css variables that have both a shorthand and a specific one should produce the correct styles.\r\n```html\r\n<span style=\"padding: calc(var(--spacing) * 1); padding-right: calc(var(--spacing) * 3); padding-bottom: calc(var(--spacing) * 4);\">App</span>\r\n```",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17894",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17894/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17894/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17894/events",
    "html_url": "https://github.com/facebook/react/issues/17894",
    "id": 553946628,
    "node_id": "MDU6SXNzdWU1NTM5NDY2Mjg=",
    "number": 17894,
    "title": "Bug: button onFocus not called when focus() called from useEffect cleanup",
    "user": {
      "login": "fyodore82",
      "id": 29746153,
      "node_id": "MDQ6VXNlcjI5NzQ2MTUz",
      "avatar_url": "https://avatars3.githubusercontent.com/u/29746153?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fyodore82",
      "html_url": "https://github.com/fyodore82",
      "followers_url": "https://api.github.com/users/fyodore82/followers",
      "following_url": "https://api.github.com/users/fyodore82/following{/other_user}",
      "gists_url": "https://api.github.com/users/fyodore82/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fyodore82/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fyodore82/subscriptions",
      "organizations_url": "https://api.github.com/users/fyodore82/orgs",
      "repos_url": "https://api.github.com/users/fyodore82/repos",
      "events_url": "https://api.github.com/users/fyodore82/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fyodore82/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 127893911,
        "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
        "name": "Component: DOM",
        "color": "fef2c0",
        "default": false,
        "description": null
      },
      {
        "id": 710722093,
        "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
        "name": "Type: Needs Investigation",
        "color": "fbca04",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2020-01-23T05:30:23Z",
    "updated_at": "2020-10-09T13:08:03Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 16.12.0\r\n\r\n## Steps To Reproduce\r\n\r\n1. Have a `<button/>` HTML element with `onFocus` event handler defined\r\n```\r\n<button ref={btnRef} onFocus={() => console.log(\"I'm in focus\")}>Focus Target</button>\r\n```\r\n2. Have another component with `useEffect` cleanup code which will call `focus()`\r\n```\r\nReact.useEffect(() => {\r\n  const ref = btnRef.current;  // btnRef is a ref to the button component above\r\n  return () => {\r\n    console.log(\"effect cleanup \", new Date().toISOString());\r\n    ref.focus();\r\n  };\r\n}, []);\r\n```\r\n\r\nWhen the cleanup code from `useEffect` is called, `onFocus` event handler of the `button` is not called. The `button` is rendered in a component which is mounted when `useEffect` cleanup executes. For example it can be in the parent component.\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://codesandbox.io/s/onfocus-not-called-from-useeffect-cleanup-npw7k\r\n\r\n1. Open example in browser (tested in Chrome 79.0.3945.88 and in Firefox 72.0.1).\r\n2. Open dev console\r\n3. Click on Focus target button. See another component below it with two buttons.\r\n4. Remove focus from Focus target button by setting it in adjacent input field \r\n5. Click on Set focus button. Observe that focus is set to Focus target button and in console see message 'I'm in focus...'. This message is logged from `onFocus` event handler\r\n6. Remove focus from Focus target button.\r\n7. Click Close me button. Observe that focus is set to Focus target button but no message in console from `onFocus` event handler\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n`onFocus` is not called\r\n\r\n## The expected behavior\r\n`onFocus` is called",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17855",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17855/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17855/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17855/events",
    "html_url": "https://github.com/facebook/react/issues/17855",
    "id": 550945196,
    "node_id": "MDU6SXNzdWU1NTA5NDUxOTY=",
    "number": 17855,
    "title": "Bug: DevTools DOM highlighting gets stuck after a prolonged hover",
    "user": {
      "login": "gaearon",
      "id": 810438,
      "node_id": "MDQ6VXNlcjgxMDQzOA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gaearon",
      "html_url": "https://github.com/gaearon",
      "followers_url": "https://api.github.com/users/gaearon/followers",
      "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
      "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
      "organizations_url": "https://api.github.com/users/gaearon/orgs",
      "repos_url": "https://api.github.com/users/gaearon/repos",
      "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gaearon/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710573595,
        "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
        "name": "Component: Developer Tools",
        "color": "fbca04",
        "default": false,
        "description": null
      },
      {
        "id": 40929151,
        "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
        "name": "Type: Bug",
        "color": "b60205",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2020-01-16T17:16:35Z",
    "updated_at": "2020-01-29T00:29:47Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "## Steps To Reproduce\r\n\r\n1. Hover a component in DevTools\r\n2. *Keep hovering it for a second or so*\r\n3. Quickly move the cursor out of the DevTools without hovering anything else\r\n\r\nExpected: DOM highlighting goes away.\r\nActual: DOM highlighting gets stuck.\r\n\r\n![](https://d1sz9tkli0lfjq.cloudfront.net/items/2o2r240l0o3i1B0d1n3J/Screen%20Recording%202020-01-16%20at%2005.14%20PM.gif?v=e1a91e13)",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17840",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17840/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17840/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17840/events",
    "html_url": "https://github.com/facebook/react/pull/17840",
    "id": 549842275,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzYyODU4MzE3",
    "number": 17840,
    "title": "[Fresh] Support DevTools v3",
    "user": {
      "login": "gaearon",
      "id": 810438,
      "node_id": "MDQ6VXNlcjgxMDQzOA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gaearon",
      "html_url": "https://github.com/gaearon",
      "followers_url": "https://api.github.com/users/gaearon/followers",
      "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
      "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
      "organizations_url": "https://api.github.com/users/gaearon/orgs",
      "repos_url": "https://api.github.com/users/gaearon/repos",
      "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gaearon/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2020-01-14T21:57:48Z",
    "updated_at": "2020-01-23T22:22:46Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/17840",
      "html_url": "https://github.com/facebook/react/pull/17840",
      "diff_url": "https://github.com/facebook/react/pull/17840.diff",
      "patch_url": "https://github.com/facebook/react/pull/17840.patch"
    },
    "body": "I haven't verified but I think this would fix the issue we've seen with the old version of the global hook.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17831",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17831/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17831/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17831/events",
    "html_url": "https://github.com/facebook/react/issues/17831",
    "id": 549309266,
    "node_id": "MDU6SXNzdWU1NDkzMDkyNjY=",
    "number": 17831,
    "title": "Bug: I shouldn't own the DOM fixtures website",
    "user": {
      "login": "nhunzaker",
      "id": 590904,
      "node_id": "MDQ6VXNlcjU5MDkwNA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/590904?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nhunzaker",
      "html_url": "https://github.com/nhunzaker",
      "followers_url": "https://api.github.com/users/nhunzaker/followers",
      "following_url": "https://api.github.com/users/nhunzaker/following{/other_user}",
      "gists_url": "https://api.github.com/users/nhunzaker/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nhunzaker/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nhunzaker/subscriptions",
      "organizations_url": "https://api.github.com/users/nhunzaker/orgs",
      "repos_url": "https://api.github.com/users/nhunzaker/repos",
      "events_url": "https://api.github.com/users/nhunzaker/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nhunzaker/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 71502270,
        "node_id": "MDU6TGFiZWw3MTUwMjI3MA==",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Build%20Infrastructure",
        "name": "Component: Build Infrastructure",
        "color": "f9d0c4",
        "default": false,
        "description": null
      },
      {
        "id": 710722093,
        "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
        "name": "Type: Needs Investigation",
        "color": "fbca04",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-01-14T03:27:48Z",
    "updated_at": "2020-01-15T19:19:46Z",
    "closed_at": null,
    "author_association": "COLLABORATOR",
    "active_lock_reason": null,
    "body": "Some folks at Google are helping us to think through some ideas to help our input code be more sane, and we discovered that our DOM Text Fixtures site (http://react-dom-fixtures.surge.sh) was both:\r\n\r\n- _Very_ out of date\r\n- Owned by me\r\n\r\nBoth seem fixable. However I think a good first start is to figure out a way to publicly host the fixtures where I am not a bottleneck.\r\n\r\nWhat do you think? Could we setup a deploy process - maybe with netlify - to deploy the fixtures automatically?",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17794",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17794/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17794/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17794/events",
    "html_url": "https://github.com/facebook/react/issues/17794",
    "id": 546192748,
    "node_id": "MDU6SXNzdWU1NDYxOTI3NDg=",
    "number": 17794,
    "title": "flushPassiveEffects and IsThisRendererActing are on the wrong \"secret\" object",
    "user": {
      "login": "sebmarkbage",
      "id": 63648,
      "node_id": "MDQ6VXNlcjYzNjQ4",
      "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sebmarkbage",
      "html_url": "https://github.com/sebmarkbage",
      "followers_url": "https://api.github.com/users/sebmarkbage/followers",
      "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
      "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
      "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
      "repos_url": "https://api.github.com/users/sebmarkbage/repos",
      "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 139734344,
        "node_id": "MDU6TGFiZWwxMzk3MzQzNDQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Test%20Utils",
        "name": "Component: Test Utils",
        "color": "eb6420",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "threepointone",
      "id": 18808,
      "node_id": "MDQ6VXNlcjE4ODA4",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18808?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/threepointone",
      "html_url": "https://github.com/threepointone",
      "followers_url": "https://api.github.com/users/threepointone/followers",
      "following_url": "https://api.github.com/users/threepointone/following{/other_user}",
      "gists_url": "https://api.github.com/users/threepointone/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/threepointone/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/threepointone/subscriptions",
      "organizations_url": "https://api.github.com/users/threepointone/orgs",
      "repos_url": "https://api.github.com/users/threepointone/repos",
      "events_url": "https://api.github.com/users/threepointone/events{/privacy}",
      "received_events_url": "https://api.github.com/users/threepointone/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "threepointone",
        "id": 18808,
        "node_id": "MDQ6VXNlcjE4ODA4",
        "avatar_url": "https://avatars2.githubusercontent.com/u/18808?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/threepointone",
        "html_url": "https://github.com/threepointone",
        "followers_url": "https://api.github.com/users/threepointone/followers",
        "following_url": "https://api.github.com/users/threepointone/following{/other_user}",
        "gists_url": "https://api.github.com/users/threepointone/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/threepointone/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/threepointone/subscriptions",
        "organizations_url": "https://api.github.com/users/threepointone/orgs",
        "repos_url": "https://api.github.com/users/threepointone/repos",
        "events_url": "https://api.github.com/users/threepointone/events{/privacy}",
        "received_events_url": "https://api.github.com/users/threepointone/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-01-07T10:06:09Z",
    "updated_at": "2020-01-08T19:07:45Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "They're currently attached to the \"Events\" namespace but they don't have anything to do with events. It needs to move to its own names on the secret object.\r\n\r\nOnce we delete Events, after ReactTestUtils and RNW are fixed, then we won't be able to clean up the array because these two are on it.\r\n\r\nAdditionally the IsSomeRendererActing field is in the production bundles.\r\n\r\nWe need to make all of these DEV-only.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17779",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17779/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17779/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17779/events",
    "html_url": "https://github.com/facebook/react/issues/17779",
    "id": 545317342,
    "node_id": "MDU6SXNzdWU1NDUzMTczNDI=",
    "number": 17779,
    "title": "SuspenseList tail property not working on re-renders",
    "user": {
      "login": "kmurgic",
      "id": 36178802,
      "node_id": "MDQ6VXNlcjM2MTc4ODAy",
      "avatar_url": "https://avatars2.githubusercontent.com/u/36178802?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kmurgic",
      "html_url": "https://github.com/kmurgic",
      "followers_url": "https://api.github.com/users/kmurgic/followers",
      "following_url": "https://api.github.com/users/kmurgic/following{/other_user}",
      "gists_url": "https://api.github.com/users/kmurgic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kmurgic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kmurgic/subscriptions",
      "organizations_url": "https://api.github.com/users/kmurgic/orgs",
      "repos_url": "https://api.github.com/users/kmurgic/repos",
      "events_url": "https://api.github.com/users/kmurgic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kmurgic/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1205087127,
        "node_id": "MDU6TGFiZWwxMjA1MDg3MTI3",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Concurrent%20Mode",
        "name": "Component: Concurrent Mode",
        "color": "ffccd3",
        "default": false,
        "description": ""
      },
      {
        "id": 1109407645,
        "node_id": "MDU6TGFiZWwxMTA5NDA3NjQ1",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Suspense",
        "name": "Component: Suspense",
        "color": "8ffcd6",
        "default": false,
        "description": ""
      },
      {
        "id": 710375792,
        "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2020-01-04T18:44:35Z",
    "updated_at": "2020-01-09T20:04:57Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nI am reporting a possible bug or otherwise requesting clarification.\r\n\r\n**What is the current behavior?**\r\n\r\nWhen a component with a SuspenseList re-renders (such as when it is is passed a new resource), the SuspenseList component still  respects the revealOrder=\"forwards\" or revealOrder=\"backwards\" prop but does not respect the tail=\"collapsed\" or tail=\"hidden\" prop.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://codesandbox.io/s/exciting-cherry-g9uc9\r\n\r\nIn order to see bug: \r\n1) Refresh the Code Sandbox browser and see that \"Loading profile...\" displays and \"Loading posts...\" does not due to the tail being collapsed.  This is the expected behavior.\r\n2) Press the \"Next\" button.  Both \"Loading Profile...\" and \"Loading posts...\" display.  The tail is no longer collapsed.\r\n\r\n**What is the expected behavior?**\r\n\r\nThe expected behavior would be for the tail to be collapsed when pressing the \"Next\" button. \"Loading profile...\" should be displayed, but not \"Loading posts...\"\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nThis affects only the experimental Concurrent Mode build of React.\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17741",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17741/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17741/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17741/events",
    "html_url": "https://github.com/facebook/react/issues/17741",
    "id": 543535487,
    "node_id": "MDU6SXNzdWU1NDM1MzU0ODc=",
    "number": 17741,
    "title": "hydrate SVG error: Expected server HTML to contain a matching <clipPath> in <svg>",
    "user": {
      "login": "benbot",
      "id": 1340967,
      "node_id": "MDQ6VXNlcjEzNDA5Njc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1340967?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/benbot",
      "html_url": "https://github.com/benbot",
      "followers_url": "https://api.github.com/users/benbot/followers",
      "following_url": "https://api.github.com/users/benbot/following{/other_user}",
      "gists_url": "https://api.github.com/users/benbot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/benbot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/benbot/subscriptions",
      "organizations_url": "https://api.github.com/users/benbot/orgs",
      "repos_url": "https://api.github.com/users/benbot/repos",
      "events_url": "https://api.github.com/users/benbot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/benbot/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 127893911,
        "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
        "name": "Component: DOM",
        "color": "fef2c0",
        "default": false,
        "description": null
      },
      {
        "id": 40929151,
        "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
        "name": "Type: Bug",
        "color": "b60205",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2019-12-29T19:33:12Z",
    "updated_at": "2020-01-07T06:22:08Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nbug\r\n\r\n**What is the current behavior?**\r\n\r\nIt seems like `ReactDOM.hydrate` doesn't play nice with certain kinds of inline SVGs.\r\nSpecifically ones that have `clipPath`s\r\n\r\nWhen nextjs tries calling hydrate on a page with one of these SVGs, the offending part of the svg flashes quickly then react throws this error to the console.\r\n\r\n```\r\nExpected server HTML to contain a matching <clipPath> in <svg>.\r\n```\r\n\r\nI have a very small example of this happening here https://github.com/Delray-Devs/site/tree/brokenSVG\r\n\r\nThe strange part is when next builds the site statically it all works.\r\n\r\nI originally opened this issue on zeit/nextjs, but @timneutkens suggested I open the issue here.\r\n\r\nSee https://github.com/zeit/next.js/issues/9871 for all the details.\r\n\r\n**What is the expected behavior?**\r\n\r\nThe SVG containing the `clipPath` gets rendered correctly on the client side.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact: 16.12, not sure about previous versions\r\nBrowser: Firefox and Chrome\r\nOS: macOS\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17669",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17669/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17669/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17669/events",
    "html_url": "https://github.com/facebook/react/pull/17669",
    "id": 540633902,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzU1NDE3NDY4",
    "number": 17669,
    "title": "Refactor Expiration Time Model",
    "user": {
      "login": "acdlite",
      "id": 3624098,
      "node_id": "MDQ6VXNlcjM2MjQwOTg=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3624098?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/acdlite",
      "html_url": "https://github.com/acdlite",
      "followers_url": "https://api.github.com/users/acdlite/followers",
      "following_url": "https://api.github.com/users/acdlite/following{/other_user}",
      "gists_url": "https://api.github.com/users/acdlite/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/acdlite/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/acdlite/subscriptions",
      "organizations_url": "https://api.github.com/users/acdlite/orgs",
      "repos_url": "https://api.github.com/users/acdlite/repos",
      "events_url": "https://api.github.com/users/acdlite/events{/privacy}",
      "received_events_url": "https://api.github.com/users/acdlite/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2019-12-19T23:15:49Z",
    "updated_at": "2020-01-10T22:57:58Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/17669",
      "html_url": "https://github.com/facebook/react/pull/17669",
      "diff_url": "https://github.com/facebook/react/pull/17669.diff",
      "patch_url": "https://github.com/facebook/react/pull/17669.patch"
    },
    "body": "## Based on #17418\r\n\r\nStack of changes to replace our \"expiration time\" model with something better.\r\n\r\n- [x] Decouple expiration times from transition timeouts",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17624",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17624/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17624/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17624/events",
    "html_url": "https://github.com/facebook/react/issues/17624",
    "id": 538591138,
    "node_id": "MDU6SXNzdWU1Mzg1OTExMzg=",
    "number": 17624,
    "title": "React DevTools might retain references to unmounted DOM elements (and their Fibers)",
    "user": {
      "login": "bgirard",
      "id": 793565,
      "node_id": "MDQ6VXNlcjc5MzU2NQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/793565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bgirard",
      "html_url": "https://github.com/bgirard",
      "followers_url": "https://api.github.com/users/bgirard/followers",
      "following_url": "https://api.github.com/users/bgirard/following{/other_user}",
      "gists_url": "https://api.github.com/users/bgirard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bgirard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bgirard/subscriptions",
      "organizations_url": "https://api.github.com/users/bgirard/orgs",
      "repos_url": "https://api.github.com/users/bgirard/repos",
      "events_url": "https://api.github.com/users/bgirard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bgirard/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710573595,
        "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
        "name": "Component: Developer Tools",
        "color": "fbca04",
        "default": false,
        "description": null
      },
      {
        "id": 1776420141,
        "node_id": "MDU6TGFiZWwxNzc2NDIwMTQx",
        "url": "https://api.github.com/repos/facebook/react/labels/Partner",
        "name": "Partner",
        "color": "e4bef7",
        "default": false,
        "description": ""
      },
      {
        "id": 710722093,
        "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
        "name": "Type: Needs Investigation",
        "color": "fbca04",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "bvaughn",
      "id": 29597,
      "node_id": "MDQ6VXNlcjI5NTk3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bvaughn",
      "html_url": "https://github.com/bvaughn",
      "followers_url": "https://api.github.com/users/bvaughn/followers",
      "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
      "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
      "organizations_url": "https://api.github.com/users/bvaughn/orgs",
      "repos_url": "https://api.github.com/users/bvaughn/repos",
      "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bvaughn/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "bvaughn",
        "id": 29597,
        "node_id": "MDQ6VXNlcjI5NTk3",
        "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bvaughn",
        "html_url": "https://github.com/bvaughn",
        "followers_url": "https://api.github.com/users/bvaughn/followers",
        "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
        "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
        "organizations_url": "https://api.github.com/users/bvaughn/orgs",
        "repos_url": "https://api.github.com/users/bvaughn/repos",
        "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bvaughn/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2019-12-16T18:55:33Z",
    "updated_at": "2020-01-08T23:38:18Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "![Screenshot 2019-12-16 10 51 05](https://user-images.githubusercontent.com/793565/70934095-fd91ed80-1ff1-11ea-93b5-746e816585ec.png)\r\nThere's seems to be circumstances where unmounted DOM/Fibers are kept alive by React DevTools. They're kept alive in `primaryFibers`:\r\nhttps://github.com/facebook/react/blob/34527063083195558f98108cde10b5d6ad0d6865/packages/react-devtools-shared/src/backend/renderer.js#L772\r\n\r\nIt seems like a WeakSet would be appropriate and would remove the leak. Otherwise we'd need to understand why recordUnmount isn't called.\r\n\r\nCC @bvaughn  ",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17609",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17609/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17609/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17609/events",
    "html_url": "https://github.com/facebook/react/issues/17609",
    "id": 537986655,
    "node_id": "MDU6SXNzdWU1Mzc5ODY2NTU=",
    "number": 17609,
    "title": "Controlled numeric input gets cleared when unfocused",
    "user": {
      "login": "kripod",
      "id": 14854048,
      "node_id": "MDQ6VXNlcjE0ODU0MDQ4",
      "avatar_url": "https://avatars3.githubusercontent.com/u/14854048?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kripod",
      "html_url": "https://github.com/kripod",
      "followers_url": "https://api.github.com/users/kripod/followers",
      "following_url": "https://api.github.com/users/kripod/following{/other_user}",
      "gists_url": "https://api.github.com/users/kripod/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kripod/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kripod/subscriptions",
      "organizations_url": "https://api.github.com/users/kripod/orgs",
      "repos_url": "https://api.github.com/users/kripod/repos",
      "events_url": "https://api.github.com/users/kripod/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kripod/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 127893911,
        "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
        "name": "Component: DOM",
        "color": "fef2c0",
        "default": false,
        "description": null
      },
      {
        "id": 1775955521,
        "node_id": "MDU6TGFiZWwxNzc1OTU1NTIx",
        "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Backlog",
        "name": "Resolution: Backlog",
        "color": "9dd1e8",
        "default": false,
        "description": ""
      },
      {
        "id": 40929151,
        "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
        "name": "Type: Bug",
        "color": "b60205",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2019-12-15T01:10:16Z",
    "updated_at": "2020-04-01T20:58:15Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nI would like to report a bug.\r\n\r\n**What is the current behavior?**\r\nA numeric input field gets cleared accidentally on several occasions.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n1. Open [this sandbox](https://codesandbox.io/embed/sad-rgb-mltuj)\r\n2. Type “12.” into the field, with the trailing decimal separator\r\n3. Unfocus the control\r\n4. Append “.” to the field’s value to see “12..”\r\n5. Unfocus the control once again and see that the number has completely disappeared\r\n\r\n**What is the expected behavior?**\r\n\r\nSimilar to how uncontrolled inputs work (remove the `value` prop and then repeat the steps above), the input should not be cleared on blur.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nI’m using React 16.12.0 and experienced the same behavior with the latest version of Chrome and iOS Safari. Regarding this bug, I have no experience with previous versions of React.\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17594",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17594/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17594/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17594/events",
    "html_url": "https://github.com/facebook/react/issues/17594",
    "id": 537427200,
    "node_id": "MDU6SXNzdWU1Mzc0MjcyMDA=",
    "number": 17594,
    "title": "DevTools: Profiler: Enable correlating console logs to profiler output (and vice versa)",
    "user": {
      "login": "justingrant",
      "id": 277214,
      "node_id": "MDQ6VXNlcjI3NzIxNA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/277214?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/justingrant",
      "html_url": "https://github.com/justingrant",
      "followers_url": "https://api.github.com/users/justingrant/followers",
      "following_url": "https://api.github.com/users/justingrant/following{/other_user}",
      "gists_url": "https://api.github.com/users/justingrant/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/justingrant/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/justingrant/subscriptions",
      "organizations_url": "https://api.github.com/users/justingrant/orgs",
      "repos_url": "https://api.github.com/users/justingrant/repos",
      "events_url": "https://api.github.com/users/justingrant/events{/privacy}",
      "received_events_url": "https://api.github.com/users/justingrant/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710573595,
        "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
        "name": "Component: Developer Tools",
        "color": "fbca04",
        "default": false,
        "description": null
      },
      {
        "id": 710375792,
        "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false,
        "description": null
      },
      {
        "id": 710722093,
        "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
        "name": "Type: Needs Investigation",
        "color": "fbca04",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 11,
    "created_at": "2019-12-13T09:01:35Z",
    "updated_at": "2019-12-20T22:42:06Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "A challenge with the React DevTools profiler is that it's too hard to correlate profiler results with console logs. This makes diagnosing and fixing render performance issues much more difficult.\r\n\r\nFor example, yesterday I was debugging an app where each render usually took 10ms-20ms except every 20-30 renders it'd take 600-800ms.  It was frustrating that I didn't have a way to correlate the profiler UI (which told me which renders were problematic) with the verbose console log output that might tell me exactly what went wrong during those renders. Instead I had to comb through logs and guess which output came from \"bad\" renders. This was tedious and error-prone.\r\n\r\nAnyway, my proposal is for React DevTools to make it easy to correlate profiler results with console log output.  Both directions would be useful:\r\n1) **navigate from logs to profiler** - if I see a suspicious line in the logs, I'd like to easily navigate to the profiler with the specific component/commit selected that was running when the line was logged.\r\n2) **navigate from profiler to logs** - if I see a suspiciously long commit, I'd like to select it in the profiler pane and have an easy way to see associated logs.\r\n\r\nI don't have a strong opinion about how this should be accomplished, but below are a few ideas to spur discussion.\r\n\r\nA minimal solution could be something like this: \r\na) The profiler assigns a unique ID to each commit\r\nb) The profiler's right pane would show the ID for each commit\r\nc) React would add a new hook that'd return that ID\r\nd) Userland code could include the ID in logs.\r\n\r\nJust this minimal support would be a vast improvement.\r\n\r\nIf we wanted to make it smoother, here's a few ideas that could be layered on top.\r\n\r\n1. **Profiler->Console Links** The ID in the profiler UI could be a hyperlink that'd open the console drawer and put the ID in the console's CMD+F search box. This would be one-click navigation from profiler to logs. I don't know if Chrome allows this kind of cross-pane control, over the console UI so this might not be practical.\r\n\r\n2. **Console -> Profiler Links**  For one-click logging in the other direction., we could have a special URL format (e.g. `react://profiler/commit/2c1056b5-1be1-43d4-a105-1d840cf4f9c3`) that would enable userland code to emit links in the console that, when clicked, would navigate to the specific commit (in the profile pane) that was active when the logs were emitted. Similar caveat as above: I'm not sure if chrome extensions can be \"deeplinked\" like this. \r\n\r\n3. **Log Components Where** Building on (1) and (2) above, we could enable console<->profiler linking without requiring changes to userland code. We could have a profiler setting (e.g. \"log components where\" with UX like \"hide components where\") that, when active, would emit a line to the console log at the start of each render of a matching component. The output would link back to the profiler, e.g. \r\n`[RDT] Starting MyCoolComponent (react://profiler/commit/2c1056b51be143d4a1051d840cf4f9c3)`.\r\n\r\nWhat do you think? I'm unfamiliar with React and RDT internals so there might be much better ways to solve log<->profiler correlation than my naive ideas above. But at least I wanted to call out the problem and encourage discussion about a solution.\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17581",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17581/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17581/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17581/events",
    "html_url": "https://github.com/facebook/react/issues/17581",
    "id": 536707451,
    "node_id": "MDU6SXNzdWU1MzY3MDc0NTE=",
    "number": 17581,
    "title": "Input nodes leaked by the browser retain React fibers",
    "user": {
      "login": "albertxing",
      "id": 2881206,
      "node_id": "MDQ6VXNlcjI4ODEyMDY=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/2881206?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/albertxing",
      "html_url": "https://github.com/albertxing",
      "followers_url": "https://api.github.com/users/albertxing/followers",
      "following_url": "https://api.github.com/users/albertxing/following{/other_user}",
      "gists_url": "https://api.github.com/users/albertxing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/albertxing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/albertxing/subscriptions",
      "organizations_url": "https://api.github.com/users/albertxing/orgs",
      "repos_url": "https://api.github.com/users/albertxing/repos",
      "events_url": "https://api.github.com/users/albertxing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/albertxing/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710722093,
        "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
        "name": "Type: Needs Investigation",
        "color": "fbca04",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2019-12-12T01:40:26Z",
    "updated_at": "2020-05-13T17:02:24Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\n🐛 \r\n\r\n**What is the current behavior?**\r\n\r\nBrowsers retain references to inputs in their undo stacks, which in turn retain React fibers (including `memoizedProps`)\r\n\r\nSee https://bugs.chromium.org/p/chromium/issues/detail?id=1029189\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://jsfiddle.net/altxg/nzu6ab5e/3/\r\n\r\n**What is the expected behavior?**\r\n\r\nAlthough the leak originates from the browser, it might be helpful if React detached internal fiber references from input and contenteditable nodes on unmount\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nAll versions of React as far as I know.\r\nI can reproduce the leak on Chrome and Firefox on Mac\r\n\r\n---\r\n\r\nPotentially related issues:\r\nhttps://github.com/facebook/react/issues/12692\r\nhttps://github.com/facebook/react/issues/16087",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17556",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17556/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17556/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17556/events",
    "html_url": "https://github.com/facebook/react/pull/17556",
    "id": 535098480,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzUwODUyMzUw",
    "number": 17556,
    "title": "React.unstable_avoidThisRender()",
    "user": {
      "login": "threepointone",
      "id": 18808,
      "node_id": "MDQ6VXNlcjE4ODA4",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18808?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/threepointone",
      "html_url": "https://github.com/threepointone",
      "followers_url": "https://api.github.com/users/threepointone/followers",
      "following_url": "https://api.github.com/users/threepointone/following{/other_user}",
      "gists_url": "https://api.github.com/users/threepointone/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/threepointone/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/threepointone/subscriptions",
      "organizations_url": "https://api.github.com/users/threepointone/orgs",
      "repos_url": "https://api.github.com/users/threepointone/repos",
      "events_url": "https://api.github.com/users/threepointone/events{/privacy}",
      "received_events_url": "https://api.github.com/users/threepointone/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2019-12-09T18:14:19Z",
    "updated_at": "2020-01-13T16:21:49Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/17556",
      "html_url": "https://github.com/facebook/react/pull/17556",
      "diff_url": "https://github.com/facebook/react/pull/17556.diff",
      "patch_url": "https://github.com/facebook/react/pull/17556.patch"
    },
    "body": "Introduces React.unstable_avoidThisRender(). \r\n\r\nThis is one step towards implementing first class suspending behaviour for static resources like images/stylesheets. \r\n\r\nOne of the problems with doing this naively in \"userland\", is because React is so aggressive on rerendering when the thenables resolve, we end up doing a bunch of unneeded rerenders. This sequence of PRs is to optimize the paths React executes in such cases.\r\n\r\n\r\nHow it's implemented\r\n---\r\n\r\n(There might be errors/a lack of understanding in this description)\r\n\r\n`unstable_avoidThisRender()` is called during the render phase, which is similar to the 'throw' phase (without the actual throwing). When this happens:\r\n- we look for the nearest Suspense boundary (that satisfies hasInvisibleParentBoundary === true), \r\n- and mark it's `effectTag` as `SoftCapture` (which is a variant of `DidCapture` for avoided renders). \r\n- We also attach a ping listener for cleaning up if the thenable resolves before we commit that boundary.\r\n\r\n(These steps are similar to what we'd call if you threw an actual promise; ie - `throwException()`)\r\n\r\nSoon after this, `completeWork` is called for the marked Suspense boundary. We use this instant to mark the boundary as expired, and return itself to render itself again.\r\n\r\nSoon after, beginWork is called for that boundary. `SoftCapture` tells us that boundary has suspended. We clear the effectTag, initialize suspenseState/memoizedState on that boundary, and set `expirationTime` and `memoizedState.didAvoidRenderTime` as `renderExpirationTime - 1`; ie - we mark that boundary as 'expiring very soon'. \r\n\r\nSoon `unstable_avoidThisRender()` is called again, setting the effectTag back to `SoftCapture`. (This time in completeWork, we see that the effectTag and memoizedState are set, so can bypass returning itself.) \r\n\r\nAfter committing, the content rerender happens. (???) \r\n\r\nThis time, in `completeWork()`, we call `renderDidSuspendDelayIfPossible()` to set the exit status on the tree. Currently, the actual content gets committed.\r\n\r\nThat's ...it? In the next PR, we'll add a new exitStatus, and actually show the fallback, passing the commented out tests in `ReactSuspenseWithNoopRenderer-test.internal.js`\r\n\r\n\r\nTODO: address this review comment https://github.com/facebook/react/pull/17556/files#r358883141",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17553",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17553/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17553/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17553/events",
    "html_url": "https://github.com/facebook/react/issues/17553",
    "id": 534838995,
    "node_id": "MDU6SXNzdWU1MzQ4Mzg5OTU=",
    "number": 17553,
    "title": "DevTools: Provide full file path for React Native component stacks",
    "user": {
      "login": "rickhanlonii",
      "id": 2440089,
      "node_id": "MDQ6VXNlcjI0NDAwODk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/2440089?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rickhanlonii",
      "html_url": "https://github.com/rickhanlonii",
      "followers_url": "https://api.github.com/users/rickhanlonii/followers",
      "following_url": "https://api.github.com/users/rickhanlonii/following{/other_user}",
      "gists_url": "https://api.github.com/users/rickhanlonii/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rickhanlonii/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rickhanlonii/subscriptions",
      "organizations_url": "https://api.github.com/users/rickhanlonii/orgs",
      "repos_url": "https://api.github.com/users/rickhanlonii/repos",
      "events_url": "https://api.github.com/users/rickhanlonii/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rickhanlonii/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710573595,
        "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
        "name": "Component: Developer Tools",
        "color": "fbca04",
        "default": false,
        "description": null
      },
      {
        "id": 1776420141,
        "node_id": "MDU6TGFiZWwxNzc2NDIwMTQx",
        "url": "https://api.github.com/repos/facebook/react/labels/Partner",
        "name": "Partner",
        "color": "e4bef7",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "bvaughn",
      "id": 29597,
      "node_id": "MDQ6VXNlcjI5NTk3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bvaughn",
      "html_url": "https://github.com/bvaughn",
      "followers_url": "https://api.github.com/users/bvaughn/followers",
      "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
      "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
      "organizations_url": "https://api.github.com/users/bvaughn/orgs",
      "repos_url": "https://api.github.com/users/bvaughn/repos",
      "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bvaughn/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "bvaughn",
        "id": 29597,
        "node_id": "MDQ6VXNlcjI5NTk3",
        "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bvaughn",
        "html_url": "https://github.com/bvaughn",
        "followers_url": "https://api.github.com/users/bvaughn/followers",
        "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
        "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
        "organizations_url": "https://api.github.com/users/bvaughn/orgs",
        "repos_url": "https://api.github.com/users/bvaughn/repos",
        "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bvaughn/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2019-12-09T10:38:24Z",
    "updated_at": "2020-01-08T23:38:18Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "## Overview\r\n\r\nIn React Native, we're working on a new RedBox experience for errors and warnings called LogBox. In LogBox, we separate out component stack traces and show them similar to call stacks.\r\n\r\nWe'd like to be able to tap on these components and open them (like we can with call stacks).\r\n\r\n## Solutions\r\nIn React we have the full file path context, but when we build the component stack trace, we strip the full path so that it displays only the file name.\r\n\r\nThere are two options to achieve this:\r\n- For React Native, don't strip the full path [here](https://github.com/facebook/react/blob/b438699d3620bff236282b049204e1221b3689e9/packages/react-devtools-shared/src/backend/describeComponentFrame.js#L25). This will result in longer component stack messages with every frame having the full path.\r\n- Keep the message the same, and instead add structured component stack frame info including the full file path.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17542",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17542/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17542/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17542/events",
    "html_url": "https://github.com/facebook/react/pull/17542",
    "id": 534244392,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzUwMTg4Njk2",
    "number": 17542,
    "title": "Move scheduleHydration to root prototype",
    "user": {
      "login": "sebmarkbage",
      "id": 63648,
      "node_id": "MDQ6VXNlcjYzNjQ4",
      "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sebmarkbage",
      "html_url": "https://github.com/sebmarkbage",
      "followers_url": "https://api.github.com/users/sebmarkbage/followers",
      "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
      "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
      "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
      "repos_url": "https://api.github.com/users/sebmarkbage/repos",
      "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2019-12-06T20:31:49Z",
    "updated_at": "2020-04-01T19:12:03Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/17542",
      "html_url": "https://github.com/facebook/react/pull/17542",
      "diff_url": "https://github.com/facebook/react/pull/17542.diff",
      "patch_url": "https://github.com/facebook/react/pull/17542.patch"
    },
    "body": "We don't technically need the root since we'll find it through the DOM but we do need the root to have been created before we call this.\r\n\r\nThis API makes that a bit clearer. This was even asked about before so seems reasonable.\r\n\r\nThe only unfortunate thing is that it's not possible to do a generic scroll or event driven hydration without having access to a root.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17527",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17527/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17527/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17527/events",
    "html_url": "https://github.com/facebook/react/issues/17527",
    "id": 532756266,
    "node_id": "MDU6SXNzdWU1MzI3NTYyNjY=",
    "number": 17527,
    "title": "Suspense priority warning does not work for any hook except the first one per component",
    "user": {
      "login": "acdlite",
      "id": 3624098,
      "node_id": "MDQ6VXNlcjM2MjQwOTg=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3624098?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/acdlite",
      "html_url": "https://github.com/acdlite",
      "followers_url": "https://api.github.com/users/acdlite/followers",
      "following_url": "https://api.github.com/users/acdlite/following{/other_user}",
      "gists_url": "https://api.github.com/users/acdlite/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/acdlite/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/acdlite/subscriptions",
      "organizations_url": "https://api.github.com/users/acdlite/orgs",
      "repos_url": "https://api.github.com/users/acdlite/repos",
      "events_url": "https://api.github.com/users/acdlite/events{/privacy}",
      "received_events_url": "https://api.github.com/users/acdlite/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "lunaruan",
      "id": 2735514,
      "node_id": "MDQ6VXNlcjI3MzU1MTQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/2735514?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lunaruan",
      "html_url": "https://github.com/lunaruan",
      "followers_url": "https://api.github.com/users/lunaruan/followers",
      "following_url": "https://api.github.com/users/lunaruan/following{/other_user}",
      "gists_url": "https://api.github.com/users/lunaruan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lunaruan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lunaruan/subscriptions",
      "organizations_url": "https://api.github.com/users/lunaruan/orgs",
      "repos_url": "https://api.github.com/users/lunaruan/repos",
      "events_url": "https://api.github.com/users/lunaruan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lunaruan/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "lunaruan",
        "id": 2735514,
        "node_id": "MDQ6VXNlcjI3MzU1MTQ=",
        "avatar_url": "https://avatars0.githubusercontent.com/u/2735514?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/lunaruan",
        "html_url": "https://github.com/lunaruan",
        "followers_url": "https://api.github.com/users/lunaruan/followers",
        "following_url": "https://api.github.com/users/lunaruan/following{/other_user}",
        "gists_url": "https://api.github.com/users/lunaruan/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/lunaruan/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/lunaruan/subscriptions",
        "organizations_url": "https://api.github.com/users/lunaruan/orgs",
        "repos_url": "https://api.github.com/users/lunaruan/repos",
        "events_url": "https://api.github.com/users/lunaruan/events{/privacy}",
        "received_events_url": "https://api.github.com/users/lunaruan/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-12-04T15:24:49Z",
    "updated_at": "2020-01-08T19:07:44Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "The code that checks for high priority updates only checks the first hook on the component:\r\n\r\nhttps://github.com/facebook/react/blob/5064c7f6aa2b46469ac601cc851640e91ec340a9/packages/react-reconciler/src/ReactFiberWorkLoop.js#L2889-L2891\r\n\r\n`workInProgress.memoizedState` is the first hook.\r\n\r\nIt should loop through all the hooks instead:\r\n\r\n```js\r\nlet firstHook = workInProgress.memoizedState;\r\nif (firstHook !==  null) {\r\n  let hook = firstHook;\r\n  do {\r\n    // Stuff goes here\r\n    hook = hook.next;\r\n  } while (hook !== firstHook)\r\n}\r\n```",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17526",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17526/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17526/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17526/events",
    "html_url": "https://github.com/facebook/react/issues/17526",
    "id": 532696818,
    "node_id": "MDU6SXNzdWU1MzI2OTY4MTg=",
    "number": 17526,
    "title": "Triggering suspense with rejected promise causes re-render instead of error boundary",
    "user": {
      "login": "joeldenning",
      "id": 5524384,
      "node_id": "MDQ6VXNlcjU1MjQzODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/5524384?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/joeldenning",
      "html_url": "https://github.com/joeldenning",
      "followers_url": "https://api.github.com/users/joeldenning/followers",
      "following_url": "https://api.github.com/users/joeldenning/following{/other_user}",
      "gists_url": "https://api.github.com/users/joeldenning/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/joeldenning/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/joeldenning/subscriptions",
      "organizations_url": "https://api.github.com/users/joeldenning/orgs",
      "repos_url": "https://api.github.com/users/joeldenning/repos",
      "events_url": "https://api.github.com/users/joeldenning/events{/privacy}",
      "received_events_url": "https://api.github.com/users/joeldenning/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1109407645,
        "node_id": "MDU6TGFiZWwxMTA5NDA3NjQ1",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Suspense",
        "name": "Component: Suspense",
        "color": "8ffcd6",
        "default": false,
        "description": ""
      },
      {
        "id": 710375792,
        "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2019-12-04T13:49:31Z",
    "updated_at": "2019-12-05T07:12:57Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nThis *might* be a bug. @gaearon and @sebmarkbage shared differing opinions on it [in this twitter thread](https://twitter.com/dan_abramov/status/1202045662189228032)\r\n\r\n**What is the current behavior?**\r\n\r\nIf you throw a promise that rejects from a react component's render function, that rejection will be completely ignored. It will not show up in browser console, nor will it trigger a React error boundary. Instead, it will trigger a re-render (the same as if the promise had resolved).\r\n\r\n[Codepen example](https://codepen.io/joeldenning/pen/bGNNQJb?editors=1010)\r\n\r\n**What is the expected behavior?**\r\n\r\nMy expectation was that the error boundary would be hit and the component would not re-render. [Sebastian's tweet](https://twitter.com/sebmarkbage/status/1202055557718216705?s=20) indicates that that is not the desired behavior, though.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nThis impacts `react@experimental`, and also `react@>=16.9.0`",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17494",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17494/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17494/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17494/events",
    "html_url": "https://github.com/facebook/react/issues/17494",
    "id": 530587842,
    "node_id": "MDU6SXNzdWU1MzA1ODc4NDI=",
    "number": 17494,
    "title": "Undo behavior in controlled input doesn't work as expected",
    "user": {
      "login": "oliviertassinari",
      "id": 3165635,
      "node_id": "MDQ6VXNlcjMxNjU2MzU=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/3165635?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/oliviertassinari",
      "html_url": "https://github.com/oliviertassinari",
      "followers_url": "https://api.github.com/users/oliviertassinari/followers",
      "following_url": "https://api.github.com/users/oliviertassinari/following{/other_user}",
      "gists_url": "https://api.github.com/users/oliviertassinari/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/oliviertassinari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/oliviertassinari/subscriptions",
      "organizations_url": "https://api.github.com/users/oliviertassinari/orgs",
      "repos_url": "https://api.github.com/users/oliviertassinari/repos",
      "events_url": "https://api.github.com/users/oliviertassinari/events{/privacy}",
      "received_events_url": "https://api.github.com/users/oliviertassinari/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 127893911,
        "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
        "name": "Component: DOM",
        "color": "fef2c0",
        "default": false,
        "description": null
      },
      {
        "id": 710722093,
        "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
        "name": "Type: Needs Investigation",
        "color": "fbca04",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2019-11-30T14:49:37Z",
    "updated_at": "2020-06-23T10:30:12Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nReport a bug\r\n\r\n**What is the current behavior?**\r\n\r\n1. Load https://codesandbox.io/s/material-demo-8wgfs.\r\n1. Focus the first input.\r\n1. Type <kbd>a</kbd>.\r\n1. Press <kbd>Tab</kbd> to focus the second input.\r\n1. Type <kbd>a</kbd>.\r\n1. Use Ctrl/Cmd+Z or Edit->Undo to undo these two changes.\r\n\r\nNotice that the uncontrollable input change is reverted\r\nNotice that the controllable input change is **not** reverted\r\n\r\n![undo](https://user-images.githubusercontent.com/3165635/69901991-fb405a00-1388-11ea-9085-ddd4131a42a9.gif)\r\n\r\n**What is the expected behavior?**\r\n\r\nuncontrollable & controllable inputs behave identically.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.12.0\r\nChrome 78.0.3904.108\r\nmacOS 10.14.6\r\n\r\nFirst reported in https://github.com/mui-org/material-ui/issues/18545.\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17479",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17479/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17479/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17479/events",
    "html_url": "https://github.com/facebook/react/issues/17479",
    "id": 529667125,
    "node_id": "MDU6SXNzdWU1Mjk2NjcxMjU=",
    "number": 17479,
    "title": "Idea: extract “static” component subtrees to HTML during build",
    "user": {
      "login": "devongovett",
      "id": 19409,
      "node_id": "MDQ6VXNlcjE5NDA5",
      "avatar_url": "https://avatars0.githubusercontent.com/u/19409?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/devongovett",
      "html_url": "https://github.com/devongovett",
      "followers_url": "https://api.github.com/users/devongovett/followers",
      "following_url": "https://api.github.com/users/devongovett/following{/other_user}",
      "gists_url": "https://api.github.com/users/devongovett/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/devongovett/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/devongovett/subscriptions",
      "organizations_url": "https://api.github.com/users/devongovett/orgs",
      "repos_url": "https://api.github.com/users/devongovett/repos",
      "events_url": "https://api.github.com/users/devongovett/events{/privacy}",
      "received_events_url": "https://api.github.com/users/devongovett/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710375792,
        "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2019-11-28T03:05:50Z",
    "updated_at": "2019-12-03T16:55:47Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "This came up in a [twitter thread](https://twitter.com/devongovett/status/1199862177559171072?s=21) with @gaearon and @aweary and we decided to move the discussion here. I’ll try to summarize the conversation so far below.\n\nThe basic question was whether a build tool could extract the static parts of a component tree ahead of time into HTML, and ship smaller JS to the client with only the dynamic parts. This could have benefits for code size and hydration performance for statically generated sites. It would likely have a smaller impact on dynamically generated server rendered sites, but it’s possible there are static parts that could be extracted there too (e.g. header, footer, article content, etc.).\n\nThere are a couple potential ways to go about this, each with various tradeoffs.\n\n1. Do something like what ember and other template compilers do and generate some kind of IR from components and inject dynamic content into slots at runtime. This would likely require a lot of changes to React itself. @aweary seems to be working on some kind of [compiler](https://twitter.com/aweary/status/1199867044532903937?s=21) to do just that.\n2. Rewrite the JS with something like prepack, similar to what @trueadm did [here](https://github.com/trueadm/ssr-with-prepack-hackathon) (though it sounded like the output was quite variable in size).\n3. Rewrite the component tree to generate a different but equivalent tree with the static parts hoisted out. Similar to this [babel plugin](https://github.com/jamiebuilds/babel-react-optimize) but taken much farther to work at a whole tree level instead of a component level. Also to remove the static parts from JS altogether and generate static HTML to avoid duplicate content in JS and unnecessary hydration cost. Some way to allow static HTML in the middle of a tree to be reused might be needed, but maybe compiling to multiple roots would work?\n\nObviously a lot more thought is needed here. As @gaearon noted, a solid definition of “static” will be important for this discussion. Mine is that it could be rendered to HTML and never updated by JS, but perhaps people have other ideas.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17473",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17473/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17473/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17473/events",
    "html_url": "https://github.com/facebook/react/pull/17473",
    "id": 529262758,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzQ2MTcxMTMz",
    "number": 17473,
    "title": "React Devtools Component: Add hotkeys to start inspecting node",
    "user": {
      "login": "gejimayu",
      "id": 25560419,
      "node_id": "MDQ6VXNlcjI1NTYwNDE5",
      "avatar_url": "https://avatars0.githubusercontent.com/u/25560419?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gejimayu",
      "html_url": "https://github.com/gejimayu",
      "followers_url": "https://api.github.com/users/gejimayu/followers",
      "following_url": "https://api.github.com/users/gejimayu/following{/other_user}",
      "gists_url": "https://api.github.com/users/gejimayu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gejimayu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gejimayu/subscriptions",
      "organizations_url": "https://api.github.com/users/gejimayu/orgs",
      "repos_url": "https://api.github.com/users/gejimayu/repos",
      "events_url": "https://api.github.com/users/gejimayu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gejimayu/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 8,
    "created_at": "2019-11-27T10:41:41Z",
    "updated_at": "2020-10-23T12:37:15Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/17473",
      "html_url": "https://github.com/facebook/react/pull/17473",
      "diff_url": "https://github.com/facebook/react/pull/17473.diff",
      "patch_url": "https://github.com/facebook/react/pull/17473.patch"
    },
    "body": "Issue is here https://github.com/facebook/react/issues/17298\r\n\r\nHotkey: Cmd Shift X (mac) or Ctrl Shift X (others)\r\n\r\n![hotkey](https://user-images.githubusercontent.com/25560419/69716735-9c3ed300-1145-11ea-9788-7f311d59bfeb.gif)\r\n\r\n\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17436",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17436/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17436/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17436/events",
    "html_url": "https://github.com/facebook/react/issues/17436",
    "id": 527289117,
    "node_id": "MDU6SXNzdWU1MjcyODkxMTc=",
    "number": 17436,
    "title": "What will suspense look like for the streaming case?",
    "user": {
      "login": "benlesh",
      "id": 1540597,
      "node_id": "MDQ6VXNlcjE1NDA1OTc=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1540597?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/benlesh",
      "html_url": "https://github.com/benlesh",
      "followers_url": "https://api.github.com/users/benlesh/followers",
      "following_url": "https://api.github.com/users/benlesh/following{/other_user}",
      "gists_url": "https://api.github.com/users/benlesh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/benlesh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/benlesh/subscriptions",
      "organizations_url": "https://api.github.com/users/benlesh/orgs",
      "repos_url": "https://api.github.com/users/benlesh/repos",
      "events_url": "https://api.github.com/users/benlesh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/benlesh/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1109407645,
        "node_id": "MDU6TGFiZWwxMTA5NDA3NjQ1",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Suspense",
        "name": "Component: Suspense",
        "color": "8ffcd6",
        "default": false,
        "description": ""
      },
      {
        "id": 710375792,
        "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-11-22T16:19:21Z",
    "updated_at": "2019-11-22T16:21:05Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nA discussion, at the request of @gaearon. \r\n\r\n### Questions\r\n\r\nI'm very curious what the public API will be for Suspense in streaming cases. The work I do or have pretty much always done in React involves dealing with streams of data, generally coming over a web socket. What will it look like? Will it be easy for users to implement/use? Is a promise/thenable an appropriate type for dealing with this even internally, given that the first value may never show up?\r\n\r\n### Desire\r\n\r\nThe ability to leverage suspense to \"suspend\" until the first of many values arrives from a stream of data coming from any source. For the sake of conversation, we'll say a web socket.\r\n\r\n\r\n### Constraints\r\n\r\n- The first value may never arrive\r\n- The source may close without error, having never provided a value\r\n- There must be an ergonomic teardown mechanism, for example how developers can currently teardown in the returned function of `useEffect` or in `componentWillUnmount`.\r\n- There may be more than one value returned by the streaming source\r\n\r\n### Optional constraints\r\n\r\n- The first N values form the source may be synchronous (followed by asynchronous values)\r\n\r\n### Scenario\r\n\r\nA simple app with two routes, one where the app needs to open a web socket connection and collect streaming data, and the other where the socket connection should be closed. The values from the web socket may take long enough that the developer will want to move to that routed component right away and show some spinner with suspense until the first bit of data arrives. If the user navigates to the first route, then leaves before the first value arrives, what happens?\r\n\r\nMy concern is, that if, even internally, the mechanism is a promise or thenable, there is a chance leaks will be created in the event that the source of that first value is torn down before the first value arrives. The only way, with a thenable or promise, to avoid that chance would be to make sure that the teardown mechanism was somehow tied to the thenable, so that the thenable to be rejected (or resolved) with a known value, such that it will be \"settled\".",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17427",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17427/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17427/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17427/events",
    "html_url": "https://github.com/facebook/react/pull/17427",
    "id": 526827817,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzQ0MjIyMzA4",
    "number": 17427,
    "title": "fix(ReactElement): display warning for reserved default props",
    "user": {
      "login": "bpas247",
      "id": 18705892,
      "node_id": "MDQ6VXNlcjE4NzA1ODky",
      "avatar_url": "https://avatars0.githubusercontent.com/u/18705892?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bpas247",
      "html_url": "https://github.com/bpas247",
      "followers_url": "https://api.github.com/users/bpas247/followers",
      "following_url": "https://api.github.com/users/bpas247/following{/other_user}",
      "gists_url": "https://api.github.com/users/bpas247/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bpas247/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bpas247/subscriptions",
      "organizations_url": "https://api.github.com/users/bpas247/orgs",
      "repos_url": "https://api.github.com/users/bpas247/repos",
      "events_url": "https://api.github.com/users/bpas247/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bpas247/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2019-11-21T20:36:23Z",
    "updated_at": "2020-10-23T12:37:41Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/17427",
      "html_url": "https://github.com/facebook/react/pull/17427",
      "diff_url": "https://github.com/facebook/react/pull/17427.diff",
      "patch_url": "https://github.com/facebook/react/pull/17427.patch"
    },
    "body": "This displays a warning whenever an end user specifies `key` or `ref` in their default props definition.\r\n\r\nFixes #17393\r\n\r\nEDIT: Changed purpose of pull request to not introduce any breaking changes.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17425",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17425/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17425/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17425/events",
    "html_url": "https://github.com/facebook/react/issues/17425",
    "id": 526803319,
    "node_id": "MDU6SXNzdWU1MjY4MDMzMTk=",
    "number": 17425,
    "title": "SuspenseList revealOrder=\"forwards\" has issues when Suspense is nested in another element",
    "user": {
      "login": "kentcdodds",
      "id": 1500684,
      "node_id": "MDQ6VXNlcjE1MDA2ODQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1500684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kentcdodds",
      "html_url": "https://github.com/kentcdodds",
      "followers_url": "https://api.github.com/users/kentcdodds/followers",
      "following_url": "https://api.github.com/users/kentcdodds/following{/other_user}",
      "gists_url": "https://api.github.com/users/kentcdodds/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kentcdodds/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kentcdodds/subscriptions",
      "organizations_url": "https://api.github.com/users/kentcdodds/orgs",
      "repos_url": "https://api.github.com/users/kentcdodds/repos",
      "events_url": "https://api.github.com/users/kentcdodds/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kentcdodds/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1205087127,
        "node_id": "MDU6TGFiZWwxMjA1MDg3MTI3",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Concurrent%20Mode",
        "name": "Component: Concurrent Mode",
        "color": "ffccd3",
        "default": false,
        "description": ""
      },
      {
        "id": 1109407645,
        "node_id": "MDU6TGFiZWwxMTA5NDA3NjQ1",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Suspense",
        "name": "Component: Suspense",
        "color": "8ffcd6",
        "default": false,
        "description": ""
      },
      {
        "id": 710722093,
        "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
        "name": "Type: Needs Investigation",
        "color": "fbca04",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2019-11-21T19:44:06Z",
    "updated_at": "2020-02-20T04:59:44Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nSuspenseList is currently experimental, so it's neither. But I think that this should be fixed before it's stable.\r\n\r\n**What is the current behavior?**\r\n\r\n![Screen Recording 2019-11-21 at 12 39 56 PM](https://user-images.githubusercontent.com/1500684/69371223-a6039a80-0c5c-11ea-9fd4-848a3f1672fa.gif)\r\n\r\nNote the 1000ms at the bottom (which should show last based on the `revealOrder`) shows at 2000ms for the nested version.\r\n\r\nThe only difference between those two sets of SuspenseLists is that one has nested the two bottom suspense elements in a `div`. Something like this:\r\n\r\n```javascript\r\nfunction App() {\r\n  return (\r\n    <SuspenseList revealOrder=\"forwards\">\r\n      <Suspense fallback={<div>2000ms loading</div>}>\r\n        <A />\r\n      </Suspense>\r\n      <div> {/* nesting */}\r\n        <Suspense fallback={<div>3000ms loading</div>}>\r\n          <B />\r\n        </Suspense>\r\n        <Suspense fallback={<div>1000ms loading</div>}>\r\n          <C />\r\n        </Suspense>\r\n      </div> {/* nesting */}\r\n    </SuspenseList>\r\n  )\r\n}\r\n```\r\n\r\nhttps://codesandbox.io/s/suspenselist-issues-sdqzb\r\n\r\n**What is the expected behavior?**\r\n\r\nI would expect them to behave exactly the same. Nesting things is often necessary for styling reasons.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nI'm experiencing this on `react@0.0.0-experimental-b53ea6ca0` and `react-dom@0.0.0-experimental-b53ea6ca0`. I don't believe this ever worked in previous versions of React.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17413",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17413/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17413/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17413/events",
    "html_url": "https://github.com/facebook/react/issues/17413",
    "id": 526276180,
    "node_id": "MDU6SXNzdWU1MjYyNzYxODA=",
    "number": 17413,
    "title": "SuspenseList gotcha with React.lazy",
    "user": {
      "login": "kentcdodds",
      "id": 1500684,
      "node_id": "MDQ6VXNlcjE1MDA2ODQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1500684?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kentcdodds",
      "html_url": "https://github.com/kentcdodds",
      "followers_url": "https://api.github.com/users/kentcdodds/followers",
      "following_url": "https://api.github.com/users/kentcdodds/following{/other_user}",
      "gists_url": "https://api.github.com/users/kentcdodds/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kentcdodds/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kentcdodds/subscriptions",
      "organizations_url": "https://api.github.com/users/kentcdodds/orgs",
      "repos_url": "https://api.github.com/users/kentcdodds/repos",
      "events_url": "https://api.github.com/users/kentcdodds/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kentcdodds/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1205087127,
        "node_id": "MDU6TGFiZWwxMjA1MDg3MTI3",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Concurrent%20Mode",
        "name": "Component: Concurrent Mode",
        "color": "ffccd3",
        "default": false,
        "description": ""
      },
      {
        "id": 1109407645,
        "node_id": "MDU6TGFiZWwxMTA5NDA3NjQ1",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Suspense",
        "name": "Component: Suspense",
        "color": "8ffcd6",
        "default": false,
        "description": ""
      },
      {
        "id": 710375792,
        "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 17,
    "created_at": "2019-11-20T23:33:34Z",
    "updated_at": "2020-04-20T01:27:54Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nSuspense is still experimental, so it's neither 🙃\r\n\r\n**What is the current behavior?**\r\n\r\nIt's best described via a code example in this codesandbox: https://codesandbox.io/s/react-suspenselist-problem-8g7c1\r\n\r\nHere's a summary:\r\n\r\nWhen \"forwards\" is used for the `revealOrder` of a SuspenseList, React does not even try to render components in suspense boundaries after the most \"forward\" suspense boundary. This should be fine, but it can be a problem when used with React.lazy because the dynamic import isn't started until the lazy component is rendered so adding a SuspenseList to an existing set of lazily loaded components results in a slower overall loading experience thanks to a waterfall effect.\r\n\r\nFor completeness I'll just add that this same thing applies to \"backwards\" as an option as well.\r\n\r\nI understand why SuspenseList doesn't bother rendering components in Suspense Boundaries until they're ready to be shown. It's because we should be firing requests for things before we try to render the components that need those resources. However, React.lazy is a bit of a special case because it doesn't suspend until it's rendered the first time and for the developer to fire that request eagerly requires extra work on the part of the developer (there's a comment in the code showing the workaround).\r\n\r\n**What is the expected behavior?**\r\n\r\nBecause React.lazy is a special case and people are likely to run into this gotcha a lot when implementing Suspense Lists around lazy components, I think something should be done for these to start loading the module eagerly without workarounds. I'm not sure what to suggest to do about it though.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nVersion `0.0.0-experimental-b53ea6ca0` and I don't think this ever worked in a previous version.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17386",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17386/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17386/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17386/events",
    "html_url": "https://github.com/facebook/react/issues/17386",
    "id": 523851078,
    "node_id": "MDU6SXNzdWU1MjM4NTEwNzg=",
    "number": 17386,
    "title": "Feature Request: Soft Component",
    "user": {
      "login": "hackwaly",
      "id": 540298,
      "node_id": "MDQ6VXNlcjU0MDI5OA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/540298?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hackwaly",
      "html_url": "https://github.com/hackwaly",
      "followers_url": "https://api.github.com/users/hackwaly/followers",
      "following_url": "https://api.github.com/users/hackwaly/following{/other_user}",
      "gists_url": "https://api.github.com/users/hackwaly/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hackwaly/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hackwaly/subscriptions",
      "organizations_url": "https://api.github.com/users/hackwaly/orgs",
      "repos_url": "https://api.github.com/users/hackwaly/repos",
      "events_url": "https://api.github.com/users/hackwaly/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hackwaly/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710375792,
        "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2019-11-16T14:23:06Z",
    "updated_at": "2019-11-19T14:24:25Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "```\r\nimport React, {useState} from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nfunction PageLayout({title, children}) {\r\n  return <div>\r\n    <h1>{title}</h1>\r\n    <input type=\"text\"/>\r\n    {children}\r\n  </div>;\r\n}\r\nfunction Page2({setPage}) {\r\n  return <PageLayout title=\"Page2\">\r\n    <button onClick={() => {setPage(() => Page1);}}>Test</button>\r\n  </PageLayout>\r\n}\r\nfunction Page1({setPage}) {\r\n  return <PageLayout title=\"Page1\">\r\n    <button onClick={() => {setPage(() => Page2);}}>Test</button>\r\n  </PageLayout>\r\n}\r\nfunction App() {\r\n  let [Page, setPage] = useState(() => Page1);\r\n  return <Page setPage={setPage}/>; \r\n}\r\nReactDOM.render(<App />, document.getElementById('app'));\r\n```\r\n\r\nhttps://codesandbox.io/embed/serene-browser-tehj4?fontsize=14\r\n\r\nThe above code is most intuitive pattern for build multiple page web app. -- Don't mind the setPage. Just focus Page component returns PageLayout instance.\r\n\r\nBut react's diff algorithm is not optimized for that pattern.  If you click \"Test\" button. The text you inputed in input will lost.\r\n\r\nSo I proposal \"Soft Component\" concept. Two soft component will be treated as same component in diff algorithm. In the example, we change Page1 and Page2 to soft components. Thus solve the problem I shown above.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17355",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17355/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17355/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17355/events",
    "html_url": "https://github.com/facebook/react/issues/17355",
    "id": 522336536,
    "node_id": "MDU6SXNzdWU1MjIzMzY1MzY=",
    "number": 17355,
    "title": "Should not already be working",
    "user": {
      "login": "gzzo",
      "id": 5722054,
      "node_id": "MDQ6VXNlcjU3MjIwNTQ=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5722054?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gzzo",
      "html_url": "https://github.com/gzzo",
      "followers_url": "https://api.github.com/users/gzzo/followers",
      "following_url": "https://api.github.com/users/gzzo/following{/other_user}",
      "gists_url": "https://api.github.com/users/gzzo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gzzo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gzzo/subscriptions",
      "organizations_url": "https://api.github.com/users/gzzo/orgs",
      "repos_url": "https://api.github.com/users/gzzo/repos",
      "events_url": "https://api.github.com/users/gzzo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gzzo/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 620368407,
        "node_id": "MDU6TGFiZWw2MjAzNjg0MDc=",
        "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information",
        "name": "Resolution: Needs More Information",
        "color": "fffde7",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 32,
    "created_at": "2019-11-13T16:35:19Z",
    "updated_at": "2020-10-26T06:01:17Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nI'm seeing \"Error: Should not already be working\" after upgrading to React 16.11\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nThis is exclusively happening on an older version of Chrome, 68.0.3440 on Windows 7\r\n\r\nI was unable to reproduce this in a VM environment but our Sentry is getting littered with these errors. \r\n\r\nI know it's a long shot, but I wasn't able to find any information about this error anywhere, just a reference in the error codes file in react, so thought it would be a good idea to report this just in case. Curious if anyone has seen this.\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17352",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17352/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17352/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17352/events",
    "html_url": "https://github.com/facebook/react/issues/17352",
    "id": 521946591,
    "node_id": "MDU6SXNzdWU1MjE5NDY1OTE=",
    "number": 17352,
    "title": "Upgrade Rollup to 0.68.1+",
    "user": {
      "login": "MicahZoltu",
      "id": 886059,
      "node_id": "MDQ6VXNlcjg4NjA1OQ==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/886059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MicahZoltu",
      "html_url": "https://github.com/MicahZoltu",
      "followers_url": "https://api.github.com/users/MicahZoltu/followers",
      "following_url": "https://api.github.com/users/MicahZoltu/following{/other_user}",
      "gists_url": "https://api.github.com/users/MicahZoltu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MicahZoltu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MicahZoltu/subscriptions",
      "organizations_url": "https://api.github.com/users/MicahZoltu/orgs",
      "repos_url": "https://api.github.com/users/MicahZoltu/repos",
      "events_url": "https://api.github.com/users/MicahZoltu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MicahZoltu/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 71502270,
        "node_id": "MDU6TGFiZWw3MTUwMjI3MA==",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Build%20Infrastructure",
        "name": "Component: Build Infrastructure",
        "color": "f9d0c4",
        "default": false,
        "description": null
      },
      {
        "id": 40929151,
        "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
        "name": "Type: Bug",
        "color": "b60205",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 8,
    "created_at": "2019-11-13T04:07:32Z",
    "updated_at": "2020-03-15T07:58:32Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug-ish.\r\n\r\n**What is the current behavior?**\r\n`import 'react'` (where 'react' is the UMD module build) from an ES module will fail due to https://github.com/rollup/rollup/pull/2274.  `this` is not set in the context of ES modules, so if you try to `import 'react'` in that context you will get a runtime error since `this` is undefined and Rollup (before the linked fix) tries to use `this` when it really means `globalThis` or `self`.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n```\r\nnpm install react\r\n```\r\n`index.html`\r\n```html\r\n<!DOCTYPE html>\r\n<head><meta charset='utf-8'></head>\r\n<body>\r\n\t<script type='module'>\r\n\t\timport './node_modules/react/umd/react.development.js'\r\n\t</script>\r\n</body>\r\n```\r\n\r\n**What is the expected behavior?**\r\nThe React UMD module can be loaded by an ES module.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact: 16.11.0\r\nFirefox: 70.0.1\r\nWindows 10",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17351",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17351/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17351/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17351/events",
    "html_url": "https://github.com/facebook/react/issues/17351",
    "id": 521883191,
    "node_id": "MDU6SXNzdWU1MjE4ODMxOTE=",
    "number": 17351,
    "title": "Possibility to set min duration of Suspense fallback",
    "user": {
      "login": "tonix-tuft",
      "id": 10134421,
      "node_id": "MDQ6VXNlcjEwMTM0NDIx",
      "avatar_url": "https://avatars2.githubusercontent.com/u/10134421?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tonix-tuft",
      "html_url": "https://github.com/tonix-tuft",
      "followers_url": "https://api.github.com/users/tonix-tuft/followers",
      "following_url": "https://api.github.com/users/tonix-tuft/following{/other_user}",
      "gists_url": "https://api.github.com/users/tonix-tuft/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tonix-tuft/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tonix-tuft/subscriptions",
      "organizations_url": "https://api.github.com/users/tonix-tuft/orgs",
      "repos_url": "https://api.github.com/users/tonix-tuft/repos",
      "events_url": "https://api.github.com/users/tonix-tuft/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tonix-tuft/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1205087127,
        "node_id": "MDU6TGFiZWwxMjA1MDg3MTI3",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Concurrent%20Mode",
        "name": "Component: Concurrent Mode",
        "color": "ffccd3",
        "default": false,
        "description": ""
      },
      {
        "id": 1775955521,
        "node_id": "MDU6TGFiZWwxNzc1OTU1NTIx",
        "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Backlog",
        "name": "Resolution: Backlog",
        "color": "9dd1e8",
        "default": false,
        "description": ""
      },
      {
        "id": 121709921,
        "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
        "name": "Type: Feature Request",
        "color": "c7def8",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 12,
    "created_at": "2019-11-13T00:33:43Z",
    "updated_at": "2020-09-16T16:26:09Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\nFeature\r\n\r\n**What is the current behavior?**\r\nI have played a bit with Concurrent Mode and the Suspense API.\r\nReally exiting features and I look forward to use them in a stable release. Thank you for everything you are doing!\r\n\r\nRegarding the `Suspense` component, could it be nice to have a property (both in Concurrent Mode and in \"normal/synchronous\" mode) which would allow us to set the minimum duration of the `Suspense` fallback UI in case the fallback UI ever gets rendered?\r\n\r\n**What is the expected behavior?**\r\nLet me do an example. Try clicking on the `Next` button in this codesandbox: \r\nhttps://codesandbox.io/s/cold-monad-ifr29.\r\n\r\nYou will see that the `Suspense` fallback UI is rendered and stays in the tree just for a little moment (`~200ms`) because both promises resolve in `1200ms`, while `useTransition` has a `timeoutMs` of 1 second.\r\nIn my opinion, this is a bit unpleasant to the eye.\r\n\r\nWouldn't it be nicer if we could tell the `Suspense` component something like \"If you ever render the fallback, show it for at least N millisec.\"? E.g.:\r\n\r\n```jsx\r\n...\r\nfunction ProfilePage({ resource }) {\r\n  return (\r\n    <Suspense fallback={<h1>Loading profile...</h1>}\r\n      // If the fallback ever gets rendered,\r\n      // it will be shown for at least 1500 millisec.,\r\n      // even if the promise resolves right after rendering the fallback.\r\n      fallbackMinDurationMs={1500}>\r\n      <ProfileDetails resource={resource} />\r\n      <Suspense fallback={<h1>Loading posts...</h1>}>\r\n        <ProfileTimeline resource={resource} />\r\n      </Suspense>\r\n    </Suspense>\r\n  );\r\n}\r\n...\r\n```\r\n\r\nConsider an animated spinner used as a fallback of `Suspense`, if it happens that the promise resolves just a few milliseconds after rendering the fallback like above, the spinner will be rendered and suddenly disappear, without completing its animation cycle and showing an incomplete animation.\r\n\r\nWhereas, if we could keep the spinner in the tree for at least `fallbackMinDurationMs` millisec. once rendered, we could improve its appearance in such cases.\r\n\r\nThe `Suspense` component responsible for rendering the fallback would have to wrap the caught Promise in a promise which would look something like this:\r\n\r\n```js\r\nfunction maxDelayFallbackPromise({\r\n  promise,\r\n  timeoutMs, // ---> This would be the value of `useTransition`'s `timeoutMs`\r\n  onFallback = () => {}, // ---> This code would run in case `timeoutMs` exceeds (i.e. when `Suspense`'s fallback UI is rendered)\r\n  fallbackMinDurationMs\r\n} = {}) {\r\n  // Generate a unique identifier, like a string, a number, in order to identify which promise resolves first...\r\n  const uniqueIdentifier = `promise_value_${Math.random()}`\r\n  return Promise.race([\r\n    promise,\r\n    timeout(timeoutMs).then(() => uniqueIdentifier)\r\n  ]).then(value => {\r\n    if (value === uniqueIdentifier) {\r\n      onFallback()\r\n      return minDelayPromise(promise, fallbackMinDurationMs)\r\n    }\r\n    else {\r\n      return value\r\n    }\r\n  })\r\n}\r\n```\r\n\r\nWhere `timeout` and `minDelayPromise` are:\r\n\r\n```js\r\nfunction timeout(delayMs) {\r\n  return new Promise(resolve => setTimeout(resolve, delayMs))\r\n}\r\n\r\nfunction minDelayPromise(promise, minDelay) {\r\n  return Promise.all([\r\n    promise,\r\n    timeout(minDelay)\r\n  ]).then(([value]) => {\r\n    return value\r\n  })\r\n}\r\n```\r\n\r\nThis could also apply to the `isPending` flag of `useTransition`...\r\n\r\nDo you think such a feature could improve the UX in such cases?\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17306",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17306/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17306/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17306/events",
    "html_url": "https://github.com/facebook/react/issues/17306",
    "id": 519466158,
    "node_id": "MDU6SXNzdWU1MTk0NjYxNTg=",
    "number": 17306,
    "title": "img onLoad does not always fire in concurrent mode",
    "user": {
      "login": "peternycander",
      "id": 2242265,
      "node_id": "MDQ6VXNlcjIyNDIyNjU=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2242265?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/peternycander",
      "html_url": "https://github.com/peternycander",
      "followers_url": "https://api.github.com/users/peternycander/followers",
      "following_url": "https://api.github.com/users/peternycander/following{/other_user}",
      "gists_url": "https://api.github.com/users/peternycander/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/peternycander/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/peternycander/subscriptions",
      "organizations_url": "https://api.github.com/users/peternycander/orgs",
      "repos_url": "https://api.github.com/users/peternycander/repos",
      "events_url": "https://api.github.com/users/peternycander/events{/privacy}",
      "received_events_url": "https://api.github.com/users/peternycander/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710722093,
        "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
        "name": "Type: Needs Investigation",
        "color": "fbca04",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2019-11-07T19:29:09Z",
    "updated_at": "2020-02-06T17:21:26Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n**What is the current behavior?**\r\n\r\n`<img onLoad={fn} />` does not always trigger `fn` when rendered using createRoot if it has siblings which are heavy to render (I think?).\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://codesandbox.io/s/quiet-dawn-t1std\r\nYou might have to use the retry button a few times, but hopefully you should be able to see it. Don't disable cache while trying\r\n\r\n**What is the expected behavior?**\r\n\r\nonLoad always fires if img gets loaded.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n0.0.0-experimental-f6b8d31a7\r\nReproduced in chrome and firefox windows. Have not tried the codesandbox in mac, but the actual bug in our app occurred there first so I'd be surprised if it is OS specific.\r\n\r\nIt does not happen with regular \"sync\" mode.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17301",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17301/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17301/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17301/events",
    "html_url": "https://github.com/facebook/react/issues/17301",
    "id": 519149714,
    "node_id": "MDU6SXNzdWU1MTkxNDk3MTQ=",
    "number": 17301,
    "title": "react-test-renderer: the findByType method doesn't work with memo components",
    "user": {
      "login": "bensampaio",
      "id": 1700178,
      "node_id": "MDQ6VXNlcjE3MDAxNzg=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1700178?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bensampaio",
      "html_url": "https://github.com/bensampaio",
      "followers_url": "https://api.github.com/users/bensampaio/followers",
      "following_url": "https://api.github.com/users/bensampaio/following{/other_user}",
      "gists_url": "https://api.github.com/users/bensampaio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bensampaio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bensampaio/subscriptions",
      "organizations_url": "https://api.github.com/users/bensampaio/orgs",
      "repos_url": "https://api.github.com/users/bensampaio/repos",
      "events_url": "https://api.github.com/users/bensampaio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bensampaio/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710400704,
        "node_id": "MDU6TGFiZWw3MTA0MDA3MDQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Test%20Renderer",
        "name": "Component: Test Renderer",
        "color": "006b75",
        "default": false,
        "description": null
      },
      {
        "id": 40929151,
        "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
        "name": "Type: Bug",
        "color": "b60205",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 8,
    "created_at": "2019-11-07T09:39:23Z",
    "updated_at": "2020-09-25T19:39:43Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nFeature\r\n\r\n**What is the current behavior?**\r\nWhenever I try something like:\r\n\r\n```\r\nReactTestRenderer.create(<SomeComponent />).root.findByType(SomeMemoComponent);\r\n```\r\n\r\nI get the following error: `No instances found with node type: \"undefined\"`. The only way I found for this to work was to reference the `type` property of memo components like this:\r\n\r\n```\r\nReactTestRenderer.create(<SomeComponent />).root.findByType(SomeMemoComponent.type);\r\n```\r\n\r\nI am fine with this solution but then flow complains that `type` doesn't exist so I find myself fixing this with `$FlowFixMe` all over the place.\r\n\r\n**What is the expected behavior?**\r\n\r\nI would expect that passing a memo component to `findByType` would work. Or that flow would recognize the `type` property of memo components. I think both should work, specially the first option.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nNo, it never worked as far as I know.\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17281",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17281/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17281/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17281/events",
    "html_url": "https://github.com/facebook/react/issues/17281",
    "id": 518001617,
    "node_id": "MDU6SXNzdWU1MTgwMDE2MTc=",
    "number": 17281,
    "title": "react-refresh: Dependent functions/data don't trigger refresh",
    "user": {
      "login": "lilactown",
      "id": 2687140,
      "node_id": "MDQ6VXNlcjI2ODcxNDA=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2687140?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lilactown",
      "html_url": "https://github.com/lilactown",
      "followers_url": "https://api.github.com/users/lilactown/followers",
      "following_url": "https://api.github.com/users/lilactown/following{/other_user}",
      "gists_url": "https://api.github.com/users/lilactown/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lilactown/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lilactown/subscriptions",
      "organizations_url": "https://api.github.com/users/lilactown/orgs",
      "repos_url": "https://api.github.com/users/lilactown/repos",
      "events_url": "https://api.github.com/users/lilactown/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lilactown/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710375792,
        "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 11,
    "created_at": "2019-11-05T20:13:09Z",
    "updated_at": "2020-07-31T13:51:30Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBoth/neither?\r\n\r\n**What is the current behavior?**\r\n\r\nCurrently, react-refresh marks each component whose `type` and/or `signature` has changed as \"dirty\" and will either re-render or re-mount those components selectively.\r\n\r\nThe problem occurs when the dev tooling (webpack, parcel, etc.) loads a module that exports functions or data that are used inside of components, but aren't registered components themselves. For example, a utility function that concatenates a string:\r\n\r\n```js\r\nexport greet(name) {\r\n  return `Hello, ${name}!`;\r\n}\r\n```\r\n\r\nChanging the returned string to `Yo, ${name}!` would trigger this module to reload in the browser, but because components which depended on it don't reload, the old greeting will persist \r\nuntil the next render of each dependent component.\r\n\r\n(BTW in actuality, some tooling will reload immediate dependents of modules that are reloaded in order to get around similar problems. You can extend the dependency chain from two to three modules, where `a.js` depends on `b.js` depends on `c.js`, and you will get the same result when editing `c.js`)\r\n\r\nWhat this forces tooling to do is apply a heuristic to try and guess whether a given module should be refreshed, vs. completely restart the app in order to cause all components to re-mount and pick up any changes that wouldn't be picked up by react-refresh.\r\n\r\nThe problems with the heuristic approach is:\r\n- each dev tool needs to implement this logic, leading to more potential for bugs\r\n- it leads to a degradation of hot reloading capabilities based on what your module exports. not obvious at all on it's face and will lead people to twisting their code base to route around this\r\n- It's very unfriendly to compile-to-JS languages like ReasonML, ClojureScript, etc. which might have different default semantics for what is public / private, different conventions for naming components, etc. which make it difficult to detect whether a module is \"safe\" to refresh\r\n\r\n**What is the expected behavior?**\r\n\r\nThat components depended on newly loaded code will pick up those changes correctly, without losing state.\r\n\r\nA potential (maybe naive?) solution to this in react-refresh is, instead of only re-rendering the components marked as dirty (due to a different `type` being registered), to _re-render from the root_ while maintaining hooks state. If components' signatures have changed, then re-mount.\r\n\r\nI've read through and kind of grok most of the code in react-refresh, but I'm not sure how this would impact the way that the reconciler currently handles the HMR stuff. This is as much of a question, as it is a request: could this be a viable solution?\r\n\r\nI appreciate your time and energy in reading through this. I'm very excited about having first-class support for hot reloading in React, as it's been something that I've loved ever since seeing the first demo of it. I hope that this issue can help create a way to provide a consistently excellent dev experience across tools/platforms/languages!\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.11",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17276",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17276/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17276/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17276/events",
    "html_url": "https://github.com/facebook/react/issues/17276",
    "id": 517644391,
    "node_id": "MDU6SXNzdWU1MTc2NDQzOTE=",
    "number": 17276,
    "title": "Unexpected value order with useTransition",
    "user": {
      "login": "denis-sokolov",
      "id": 113721,
      "node_id": "MDQ6VXNlcjExMzcyMQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/113721?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/denis-sokolov",
      "html_url": "https://github.com/denis-sokolov",
      "followers_url": "https://api.github.com/users/denis-sokolov/followers",
      "following_url": "https://api.github.com/users/denis-sokolov/following{/other_user}",
      "gists_url": "https://api.github.com/users/denis-sokolov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/denis-sokolov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/denis-sokolov/subscriptions",
      "organizations_url": "https://api.github.com/users/denis-sokolov/orgs",
      "repos_url": "https://api.github.com/users/denis-sokolov/repos",
      "events_url": "https://api.github.com/users/denis-sokolov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/denis-sokolov/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1205087127,
        "node_id": "MDU6TGFiZWwxMjA1MDg3MTI3",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Concurrent%20Mode",
        "name": "Component: Concurrent Mode",
        "color": "ffccd3",
        "default": false,
        "description": ""
      },
      {
        "id": 710375792,
        "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2019-11-05T09:17:35Z",
    "updated_at": "2019-11-06T03:22:11Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "The order of returned values in useTransition is opposite to what I consider to be an established pattern of `[value, function]`.\r\n\r\nCurrent: `const [startTransition, isPending] = useTransition()`.\r\nExpected: `const [isPending, startTransition] = useTransition()`.\r\nAlso fine: `const { startTransition, isPending } = useTransition()`.\r\n\r\n## Rationale\r\n\r\nThe order is in my opinion inconsistent with other hooks, built-in and community hooks, and this inconsistency is somewhat bothersome on the aesthetic level.\r\n\r\nUsers without tooling support (TypeScript et al) will see `Uncaught TypeError: startTransition is not a function` error whenever they get the order wrong.\r\n\r\nHaving this insonsistency risks reducing the strength of the convention in the community, making hooks less convenient to use overall.\r\n\r\n## Built-in hooks\r\n\r\n```js\r\nconst [state, setState] = useState();\r\nconst [state, dispatch] = useReducer();\r\nconst [startTransition, isPending] = useTransition();\r\n```\r\n\r\n## Community examples\r\n\r\nI have done a quick overview of positional returned values from hooks in the community. Hooks that use `[value, function]` pattern:\r\n\r\n[useImmer](https://github.com/immerjs/use-immer#useimmer), [streamich/react-use](https://github.com/streamich/react-use) ([useTimeout](https://github.com/streamich/react-use/blob/master/docs/useTimeout.md), [useSessionStorage](https://github.com/streamich/react-use/blob/master/docs/useSessionStorage.md), [useLockBodyScroll](https://github.com/streamich/react-use/blob/master/docs/useLockBodyScroll.md), [useLocalStorage](https://github.com/streamich/react-use/blob/master/docs/useLocalStorage.md), [useToggle](https://github.com/streamich/react-use/blob/master/docs/useToggle.md)) [bdbch/react-localstorage](https://github.com/bdbch/react-localstorage), [rehooks/local-storage](https://github.com/rehooks/local-storage), [react-rekindle/use-request](https://github.com/react-rekindle/use-request).\r\n\r\nHooks that use `[function, value]` pattern: none.\r\n\r\n## Is second value optional?\r\n\r\nOne could argue that, unlike with other examples, useTransition does not require the user to care about the `isPending` value. However, not using isPending creates a poor UX that the extisting React docs explicitly call out as a problem. We’re supposed to care about isPending. ([docs](https://github.com/reactjs/reactjs.org/blob/081bb31226919062938ef924472ba1b4170facfc/content/docs/concurrent-mode-patterns.md#adding-a-pending-indicator-adding-a-pending-indicator)).\r\n\r\nBesides, even with corrected value order, the user can still ignore isPending at a low cost of an explicit parameter skip (`const [, startTransition] = useTransition()`).\r\n\r\n## Can we return an object?\r\n\r\nuseState returns a list for convenient aliasing:\r\n\r\n```ts\r\nconst [color, setColor] = useState();\r\nconst [position, setPosition] = useState();\r\n```\r\n\r\nFor hooks that a single component uses only once the benefit is significantly reduced and the community often chooses to return an object with named values instead. This removes the problem of getting positioned values incorrectly and is more inline with the broader JavaScript ecosystem.\r\n\r\nI am speculating here, but it seems like a component will often only have one transition, like [the Button example in the docs](https://github.com/reactjs/reactjs.org/blob/081bb31226919062938ef924472ba1b4170facfc/content/docs/concurrent-mode-patterns.md#baking-transitions-into-the-design-system-baking-transitions-into-the-design-system). In that case it seems beneficial to return named values and reserve the positioned return values for cases where it really matters.\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/17275",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/17275/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/17275/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/17275/events",
    "html_url": "https://github.com/facebook/react/issues/17275",
    "id": 517530511,
    "node_id": "MDU6SXNzdWU1MTc1MzA1MTE=",
    "number": 17275,
    "title": "Is it possible to share contexts between renderers?",
    "user": {
      "login": "diegomura",
      "id": 5600341,
      "node_id": "MDQ6VXNlcjU2MDAzNDE=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/5600341?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/diegomura",
      "html_url": "https://github.com/diegomura",
      "followers_url": "https://api.github.com/users/diegomura/followers",
      "following_url": "https://api.github.com/users/diegomura/following{/other_user}",
      "gists_url": "https://api.github.com/users/diegomura/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/diegomura/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/diegomura/subscriptions",
      "organizations_url": "https://api.github.com/users/diegomura/orgs",
      "repos_url": "https://api.github.com/users/diegomura/repos",
      "events_url": "https://api.github.com/users/diegomura/events{/privacy}",
      "received_events_url": "https://api.github.com/users/diegomura/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 40929153,
        "node_id": "MDU6TGFiZWw0MDkyOTE1Mw==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
        "name": "Type: Enhancement",
        "color": "84b6eb",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 10,
    "created_at": "2019-11-05T03:39:28Z",
    "updated_at": "2020-08-22T19:49:17Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "**What is the current behavior?**\r\n\r\nHey 👋 I maintain [react-pdf](https://github.com/diegomura/react-pdf). Thanks for your awesome work and making `react-reconciler` for us to use! \r\n\r\n I've got many issues  lately regarding context not working on my library and when doing tests I found out that context values aren't shared between renderers. This makes it impossible to share state such as themes, i18n, redux and more. As a bit of context, React-pdf is not a primary renderer, and as such, when used in the browser it runs on top of react-dom.\r\n\r\nI found the `isPrimaryRenderer` reconciler option that's supposed to be used for \"multiple renderers concurrently render using the same context objects\" but still any access of the context inside react-pdf components get's just the initial value (even if the context was updated with other value). The same happens for `react-art` that also set `isPrimaryRenderer=false`.\r\n\r\n**Minimal demo**\r\n\r\nI prepared a quick demo using react-art so you can see how it currently works:\r\n\r\nhttps://codesandbox.io/s/pedantic-hill-54kid?fontsize=14\r\n\r\n**What is the expected behavior?**\r\n\r\nShare contexts between renderers when using `isPrimaryRenderer` config. Is there a way of achieving this? Am I missing something?\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact: 16.11.0\r\nReact-dom: 16.11.0\r\n",
    "performed_via_github_app": null
  }
]