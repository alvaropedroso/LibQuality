[
  {
    "url": "https://api.github.com/repos/facebook/react/issues/15088",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/15088/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/15088/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/15088/events",
    "html_url": "https://github.com/facebook/react/issues/15088",
    "id": 419895148,
    "node_id": "MDU6SXNzdWU0MTk4OTUxNDg=",
    "number": 15088,
    "title": "useReducer - eagerReducer optimization discussion/questions",
    "user": {
      "login": "Andarist",
      "id": 9800850,
      "node_id": "MDQ6VXNlcjk4MDA4NTA=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/9800850?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Andarist",
      "html_url": "https://github.com/Andarist",
      "followers_url": "https://api.github.com/users/Andarist/followers",
      "following_url": "https://api.github.com/users/Andarist/following{/other_user}",
      "gists_url": "https://api.github.com/users/Andarist/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Andarist/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Andarist/subscriptions",
      "organizations_url": "https://api.github.com/users/Andarist/orgs",
      "repos_url": "https://api.github.com/users/Andarist/repos",
      "events_url": "https://api.github.com/users/Andarist/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Andarist/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1109410193,
        "node_id": "MDU6TGFiZWwxMTA5NDEwMTkz",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Hooks",
        "name": "Component: Hooks",
        "color": "c2f27b",
        "default": false,
        "description": ""
      },
      {
        "id": 40929151,
        "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
        "name": "Type: Bug",
        "color": "b60205",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2019-03-12T09:57:43Z",
    "updated_at": "2019-04-04T06:34:03Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "I'd like to continue the discussion started by me under a recent blog post by Dan as encouraged by Dan ðŸ˜‰ https://github.com/gaearon/overreacted.io/commit/99bfdca459ff4094ee523c7419b58989d18bc594#r32694433\r\n\r\nJust to summarize what I've stumbled upon when experimenting with useReducer after reading that hoisted & declared in render reducers are treated differently (I've wanted to explore how they are handled by React):\r\n1. I have no idea how to reenter eagerReducer calculation after first scheduled work (& after render gets fully processed & committed). This might very well be just me not understanding how fibers work - but currently I'm confused by this. It doesn't enter this code branch because `fiber.expirationTime` is not 0 (NoWork) and the work gets scheduled right away. Any pointers regarding this? Is this valid? Might this be a bug somewhere?\r\n2. The logic around reducer bailouts is somewhat iffy for me - maybe it's just a matter of mentioning those in the documentation:\r\n- not every reducer update can bailout from rendering. If the action queue gets processed in the render phase then it's just not possible, we are already rendering after all. \r\n- action queue gets processed in the render phase for reducers declared inside render, this means that any new state computation might depend on the \"fresh\" props. This is not the case for the bailout mechanism though - it's only possible to perform a bailout when dispatching an action (so when we do not have access to the fresh props). Should this restriction be mentioned in the docs? IMHO this behaviour is inconsistent - for the greater good, so it's acceptable but I think it should be documented because it's slightly inconsistent & people might trip over this.\r\n\r\n**Note** I'm happy to provide documentation changes if needed, I'd like to discuss those points first to get a better understanding of things.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/15080",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/15080/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/15080/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/15080/events",
    "html_url": "https://github.com/facebook/react/issues/15080",
    "id": 419249211,
    "node_id": "MDU6SXNzdWU0MTkyNDkyMTE=",
    "number": 15080,
    "title": "Consider exporting `batchedUpdates` from React",
    "user": {
      "login": "markerikson",
      "id": 1128784,
      "node_id": "MDQ6VXNlcjExMjg3ODQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1128784?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markerikson",
      "html_url": "https://github.com/markerikson",
      "followers_url": "https://api.github.com/users/markerikson/followers",
      "following_url": "https://api.github.com/users/markerikson/following{/other_user}",
      "gists_url": "https://api.github.com/users/markerikson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markerikson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markerikson/subscriptions",
      "organizations_url": "https://api.github.com/users/markerikson/orgs",
      "repos_url": "https://api.github.com/users/markerikson/repos",
      "events_url": "https://api.github.com/users/markerikson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markerikson/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710375792,
        "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2019-03-10T23:51:41Z",
    "updated_at": "2020-02-29T19:10:26Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "ReactDOM and React Native both currently export an `unstable_batchedUpdates` API.  Because batching is a renderer/reconciliation-level concern, this API is exported by the renderer packages, not the core `react` package.\r\n\r\nThe React team has recently encouraged the Redux team to make use of `unstable_batchedUpdates` in React-Redux.  However, this becomes complicated due to how that API is being exported.\r\n\r\nIt's possible to deal with this at the bundler level.  Some experimentation shows that creating an alternate file with a `.native.js` extension will cause that to be picked up by the RN bundler, as in this example:\r\n\r\n```js\r\n// batch.js\r\nimport {unstable_batchedUpdates} from \"./react-dom\";\r\n\r\n// ./react-dom.js\r\nexport {unstable_batchedUpdates} from \"react-dom\"\r\n\r\n// ./react-dom.native.js\r\nexport {unstable_batchedUpdates} from \"react-native\"\r\n```\r\n\r\nHowever, this does not handle the case where an alternative React renderer is being used.  The [list of other React renderers is continuing to grow](https://github.com/chentsulin/awesome-react-renderer), which means that a React library that needs batching would have to deal with that situation in some way.  This becomes extremely complicated when you start considering variations on bundlers, module formats, and build environments.\r\n\r\nIt would be extremely beneficial if the React core itself exported a `batchedUpdates` API.  That could default to being a noop wrapper like `(callback) => callback()` if no suitable implementation was available.\r\n\r\nI know that `unstable_batchedUpdates()` is, uh... \"unstable\".  However, the React team has stated that \"it's the most stable of the unstable APIs\", and \"half of Facebook depends on this\".\r\n\r\nI think it would really help the ecosystem if some form of this API was solidified and exported from the core React package itself.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/15069",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/15069/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/15069/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/15069/events",
    "html_url": "https://github.com/facebook/react/issues/15069",
    "id": 418939990,
    "node_id": "MDU6SXNzdWU0MTg5Mzk5OTA=",
    "number": 15069,
    "title": "Can an error boundary prevent React's error logging?",
    "user": {
      "login": "silverwind",
      "id": 115237,
      "node_id": "MDQ6VXNlcjExNTIzNw==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/115237?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/silverwind",
      "html_url": "https://github.com/silverwind",
      "followers_url": "https://api.github.com/users/silverwind/followers",
      "following_url": "https://api.github.com/users/silverwind/following{/other_user}",
      "gists_url": "https://api.github.com/users/silverwind/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/silverwind/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/silverwind/subscriptions",
      "organizations_url": "https://api.github.com/users/silverwind/orgs",
      "repos_url": "https://api.github.com/users/silverwind/repos",
      "events_url": "https://api.github.com/users/silverwind/events{/privacy}",
      "received_events_url": "https://api.github.com/users/silverwind/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 121709921,
        "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
        "name": "Type: Feature Request",
        "color": "c7def8",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 15,
    "created_at": "2019-03-08T20:11:45Z",
    "updated_at": "2020-09-01T19:49:30Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "I noticed [this unconditional `console.error`](https://github.com/facebook/react/blob/d0289c7e3a2dfc349dcce7f9eb3dee22464e97bd/packages/react-reconciler/src/ReactFiberErrorLogger.js#L86) which I'd like to prevent to keep the console clean from errors that are already \"caught\" in an error boundary.\r\n\r\nMaybe a condition on `capturedError.errorBoundaryFound` could prevent this logging?",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/15039",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/15039/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/15039/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/15039/events",
    "html_url": "https://github.com/facebook/react/issues/15039",
    "id": 417908594,
    "node_id": "MDU6SXNzdWU0MTc5MDg1OTQ=",
    "number": 15039,
    "title": "react-debug-tools doesn't support legacy context (Component.contextTypes)",
    "user": {
      "login": "bvaughn",
      "id": 29597,
      "node_id": "MDQ6VXNlcjI5NTk3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bvaughn",
      "html_url": "https://github.com/bvaughn",
      "followers_url": "https://api.github.com/users/bvaughn/followers",
      "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
      "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
      "organizations_url": "https://api.github.com/users/bvaughn/orgs",
      "repos_url": "https://api.github.com/users/bvaughn/repos",
      "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bvaughn/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      },
      {
        "id": 40929151,
        "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
        "name": "Type: Bug",
        "color": "b60205",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2019-03-06T16:54:36Z",
    "updated_at": "2020-09-03T02:51:41Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "Original report: https://github.com/facebook/react-devtools/issues/1304\r\n\r\nRepro case: https://64yojj2wyk.codesandbox.io/",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/15023",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/15023/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/15023/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/15023/events",
    "html_url": "https://github.com/facebook/react/pull/15023",
    "id": 417497291,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MjU4NDgxODM1",
    "number": 15023,
    "title": "Fix SSR missing data-reactroot attribute inside invisible React elements",
    "user": {
      "login": "overlookmotel",
      "id": 557937,
      "node_id": "MDQ6VXNlcjU1NzkzNw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/557937?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/overlookmotel",
      "html_url": "https://github.com/overlookmotel",
      "followers_url": "https://api.github.com/users/overlookmotel/followers",
      "following_url": "https://api.github.com/users/overlookmotel/following{/other_user}",
      "gists_url": "https://api.github.com/users/overlookmotel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/overlookmotel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/overlookmotel/subscriptions",
      "organizations_url": "https://api.github.com/users/overlookmotel/orgs",
      "repos_url": "https://api.github.com/users/overlookmotel/repos",
      "events_url": "https://api.github.com/users/overlookmotel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/overlookmotel/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 15,
    "created_at": "2019-03-05T20:55:40Z",
    "updated_at": "2020-10-02T23:55:37Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/15023",
      "html_url": "https://github.com/facebook/react/pull/15023",
      "diff_url": "https://github.com/facebook/react/pull/15023.diff",
      "patch_url": "https://github.com/facebook/react/pull/15023.patch"
    },
    "body": "PR for #15012.\r\n\r\n```js\r\nconst React = require('react'),\r\n  {renderToString} = require('react-dom/server');\r\n\r\nconst Context = React.createContext();\r\n\r\nconst html = renderToString(\r\n  <Context.Provider>\r\n    <div>Hello!</div>\r\n  </Context.Provider>\r\n);\r\n```\r\n\r\nBefore this PR, outputs:\r\n\r\n```\r\n'<div>Hello!</div>'\r\n```\r\n\r\nwith this PR:\r\n\r\n```\r\n'<div data-reactroot=\"\">Hello!</div>'\r\n```\r\n\r\nImplementation is through addition of a `.domRootFrame` property on `ReactDOMServerRenderer` instance.\r\n\r\n* `domRootFrame` is `null` if no DOM element in stack above currently rendering element.\r\n* When a entering a root DOM element, `domRootFrame` is set to the stack frame for that DOM element.\r\n* When exiting root DOM element, `domRootFrame` is set back to `null` (the root element is identified by checking if the frame being popped from the stack is equal to `domRootFrame`)\r\n\r\nI am not clear what desired behavior is when there are multiple DOM roots e.g.:\r\n\r\n```\r\n<React.Fragment>\r\n  <div>One</div>\r\n  <div>Two</div>\r\n</React.Fragment>\r\n```\r\n\r\nI guess both `<div>`s should get `data-reactroot=\"\"` markup, but not sure what the result on client side would be!\r\n\r\nAny changes you want made, please shout.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/15019",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/15019/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/15019/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/15019/events",
    "html_url": "https://github.com/facebook/react/issues/15019",
    "id": 417364177,
    "node_id": "MDU6SXNzdWU0MTczNjQxNzc=",
    "number": 15019,
    "title": "The browser crashes when use React.lazy return Promise.resolve(undefined)",
    "user": {
      "login": "angular-moon",
      "id": 7876335,
      "node_id": "MDQ6VXNlcjc4NzYzMzU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/7876335?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/angular-moon",
      "html_url": "https://github.com/angular-moon",
      "followers_url": "https://api.github.com/users/angular-moon/followers",
      "following_url": "https://api.github.com/users/angular-moon/following{/other_user}",
      "gists_url": "https://api.github.com/users/angular-moon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/angular-moon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/angular-moon/subscriptions",
      "organizations_url": "https://api.github.com/users/angular-moon/orgs",
      "repos_url": "https://api.github.com/users/angular-moon/repos",
      "events_url": "https://api.github.com/users/angular-moon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/angular-moon/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1775955521,
        "node_id": "MDU6TGFiZWwxNzc1OTU1NTIx",
        "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Backlog",
        "name": "Resolution: Backlog",
        "color": "9dd1e8",
        "default": false,
        "description": ""
      },
      {
        "id": 710722093,
        "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
        "name": "Type: Needs Investigation",
        "color": "fbca04",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2019-03-05T15:45:18Z",
    "updated_at": "2020-01-09T21:59:21Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n\r\n**What is the current behavior?**\r\nThe browser crashes \r\n\r\n```js\r\nconst Loading = () => <div>loading...</div>;\r\nconst Component = lazy(() => Promise.resolve(undefined));\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Suspense fallback={<Loading />}>\r\n        <Component />\r\n      </Suspense>\r\n    </div>\r\n  );\r\n}\r\n```\r\n*I can't provide an example of CodeSandbox, which would cause the browser to crash*\r\n\r\n**What is the expected behavior?**\r\nthrow Error\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nreact@16.8.3\r\nreact-dom@16.8.3\r\nchrome 72.0.3626.119",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/15012",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/15012/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/15012/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/15012/events",
    "html_url": "https://github.com/facebook/react/issues/15012",
    "id": 417046710,
    "node_id": "MDU6SXNzdWU0MTcwNDY3MTA=",
    "number": 15012,
    "title": "`data-reactroot=\"\"` lost in server render if element inside `<Context.Provider>`",
    "user": {
      "login": "overlookmotel",
      "id": 557937,
      "node_id": "MDQ6VXNlcjU1NzkzNw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/557937?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/overlookmotel",
      "html_url": "https://github.com/overlookmotel",
      "followers_url": "https://api.github.com/users/overlookmotel/followers",
      "following_url": "https://api.github.com/users/overlookmotel/following{/other_user}",
      "gists_url": "https://api.github.com/users/overlookmotel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/overlookmotel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/overlookmotel/subscriptions",
      "organizations_url": "https://api.github.com/users/overlookmotel/orgs",
      "repos_url": "https://api.github.com/users/overlookmotel/repos",
      "events_url": "https://api.github.com/users/overlookmotel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/overlookmotel/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710332294,
        "node_id": "MDU6TGFiZWw3MTAzMzIyOTQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Server%20Rendering",
        "name": "Component: Server Rendering",
        "color": "d4c5f9",
        "default": false,
        "description": null
      },
      {
        "id": 40929151,
        "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
        "name": "Type: Bug",
        "color": "b60205",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2019-03-04T23:46:54Z",
    "updated_at": "2019-03-25T21:07:33Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug.\r\n\r\n**What is the current behavior?**\r\n\r\nCalling `.renderToString()` on `<React.Fragment><div>Hello!</div></React.Fragment>` produces `<div data-reactroot=\"\">Hello!</div>`.\r\n\r\nHowever, many other combinations of DOM root element within \"invisible\" React elements are rendered without `data-reactroot=\"\"`.\r\n\r\ne.g. all of the following produce `<div>Hello!</div>` (without `data-reactroot=\"\"`):\r\n\r\n```\r\n<React.Fragment><React.Fragment><div>Hello!</div></React.Fragment></React.Fragment>\r\n\r\n<Context.Provider><div>Hello!</div></Context.Provider>\r\n\r\n<Context.Consumer>{() => <div>Hello!</div>}</Context.Consumer>\r\n\r\n<React.StrictMode><div>Hello!</div></React.StrictMode>\r\n```\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nSee above.\r\n\r\n**What is the expected behavior?**\r\n\r\nI assume that any of the above examples should produce markup including `data-reactroot=\"\"` on the `div` element.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nIssue present in all versions >= 16.7.0, possibly earlier versions too.\r\n\r\nThis is a minor issue - I guess would only affect where the markup is rehydrated on client side using `.render()` rather than `.hydrate()` - usage which is discouraged. However, using `.render()` to rehydrate is still officially supported.\r\n\r\nI can implement a fix and make a PR. But can anyone confirm that the expected behavior is what I think it is, and that this is indeed a bug?",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/15006",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/15006/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/15006/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/15006/events",
    "html_url": "https://github.com/facebook/react/issues/15006",
    "id": 416579679,
    "node_id": "MDU6SXNzdWU0MTY1Nzk2Nzk=",
    "number": 15006,
    "title": "useEffect memory leak when setting state in fetch promise",
    "user": {
      "login": "ryansaam",
      "id": 38289731,
      "node_id": "MDQ6VXNlcjM4Mjg5NzMx",
      "avatar_url": "https://avatars3.githubusercontent.com/u/38289731?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryansaam",
      "html_url": "https://github.com/ryansaam",
      "followers_url": "https://api.github.com/users/ryansaam/followers",
      "following_url": "https://api.github.com/users/ryansaam/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryansaam/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryansaam/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryansaam/subscriptions",
      "organizations_url": "https://api.github.com/users/ryansaam/orgs",
      "repos_url": "https://api.github.com/users/ryansaam/repos",
      "events_url": "https://api.github.com/users/ryansaam/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryansaam/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 620368407,
        "node_id": "MDU6TGFiZWw2MjAzNjg0MDc=",
        "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information",
        "name": "Resolution: Needs More Information",
        "color": "fffde7",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 27,
    "created_at": "2019-03-03T23:23:36Z",
    "updated_at": "2020-08-14T17:21:30Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\nReporting a possible bug\r\n\r\n**What is the current behavior?**\r\nMy app renders fine with no errors but I can't seem to figure out why I keep getting this warning:\r\n\r\nindex.js:1446 Warning: Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in a useEffect cleanup function.\r\n    in ArtistProfile (at App.js:51)\r\n    in component (created by Route)\r\n\r\napi-calls.js (Here's a link):\r\nhttps://github.com/ryansaam/litphum/blob/master/src/api-calls.js\r\n\r\nApp.js\r\n```javascript\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      user: {},\r\n      spotifyAPI: {}\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    if (user_token) {\r\n      sessionStorage.setItem('access_token', user_token)\r\n      this.setState({\r\n        spotifyAPI: new spotifyAPI( user_token )\r\n      })\r\n    } else if (sessionStorage.getItem('access_token')) {\r\n      this.setState({\r\n        spotifyAPI: new spotifyAPI( sessionStorage.getItem('access_token') )\r\n      })\r\n    }\r\n  }\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (this.state.spotifyAPI !== prevState.spotifyAPI)\r\n      this.state.spotifyAPI.getUserProfile()\r\n      .then(data => this.setState({user: data}))\r\n  }\r\n  \r\n  render() {\r\n    const { user, spotifyAPI } = this.state\r\n    const token = sessionStorage.getItem('access_token')\r\n    return (\r\n      <Router>\r\n        <div className=\"App\">\r\n            { (spotifyAPI.user_token && user)\r\n            ? (<div className=\"logged-in\">\r\n                <div style={{width: \"250px\", height: \"100%\", position: \"relative\", float: \"left\"}} >\r\n                  <Nav image={user.images ? user.images[0].url : null} user={user} />\r\n                </div>\r\n                <main id=\"main\">\r\n                  <Route path={`/${user.type}/${user.id}`} exact component={() => <Home spotifyAPI={spotifyAPI} />} />\r\n                  <Route path=\"/artist/\" component={() => <ArtistProfile spotifyAPI={spotifyAPI} />} />\r\n                </main>\r\n              </div>) \r\n            : <div onClick={() => window.location = \"http://localhost:8888/login\"} >log in</div>\r\n            }\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n```\r\n\r\nArtistProfile.js\r\n```javascript\r\nconst  ArtistProfile = props => {\r\n  const [artistData, setArtistData] = useState(null)\r\n  const { getArtist, getArtistAlbums, getArtistTopTracks } = props.spotifyAPI\r\n\r\n  useEffect(() => {\r\n    const id = window.location.pathname.split(\"/\").pop()\r\n    const ac = new AbortController()\r\n    console.log(id)\r\n    Promise.all([\r\n      getArtist(id, ac),\r\n      getArtistAlbums(id, [\"album\"],\"US\", 10, 0, ac),\r\n      getArtistTopTracks(id, \"US\", ac)\r\n    ])\r\n    .then(response => {\r\n      setArtistData({\r\n        artist: response[0],\r\n        artistAlbums: response[1],\r\n        artistTopTracks: response[2]\r\n      })\r\n    })\r\n    .catch(ex => console.error(ex))\r\n    return () => ac.abort()\r\n  }, [])\r\n  console.log(artistData)\r\n  return (\r\n    <div>\r\n      <ArtistProfileContainer>\r\n        <AlbumContainer>\r\n          {artistData ? artistData.artistAlbums.items.map(album => {\r\n            return (\r\n              <AlbumTag\r\n                image={album.images[0].url}\r\n                name={album.name}\r\n                artists={album.artists}\r\n                key={album.id}\r\n              />\r\n            )\r\n          })\r\n          : null}\r\n        </AlbumContainer>\r\n      </ArtistProfileContainer>\r\n    </div>\r\n  )\r\n}\r\n```\r\n\r\n**What is the expected behavior?**\r\nIf you can see in ArtistProfile.js I am using a clean up function that aborts when the component does unmount. The fetch would be aborted and state shouldn't update but for some reason I am still getting this memory leak warning.\r\n\r\nWhat I am expecting is for the warning to no longer throw because am using a clean up function that aborts the fetch.\r\n\r\nLink to repo: https://github.com/ryansaam/litphum\r\n\r\n- Files mentioned\r\n    App.js: https://github.com/ryansaam/litphum/blob/master/src/App.js\r\n    ArtistProfile.js: https://github.com/ryansaam/litphum/blob/master/src/components/ArtistProfile.js\r\n    api-calls.js: https://github.com/ryansaam/litphum/blob/master/src/api-calls.js\r\n\r\nMy stackoverflow question: https://stackoverflow.com/questions/54954385/react-useeffect-causing-cant-perform-a-react-state-update-on-an-unmounted-comp/54964237#54964237\r\n\r\n\r\n**Which versions of React, and which browser**\r\nReact 16.8.2\r\nLatest version of Chrome\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/14994",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/14994/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/14994/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/14994/events",
    "html_url": "https://github.com/facebook/react/issues/14994",
    "id": 416238549,
    "node_id": "MDU6SXNzdWU0MTYyMzg1NDk=",
    "number": 14994,
    "title": "useState not bailing out when state does not change",
    "user": {
      "login": "perrin4869",
      "id": 5774716,
      "node_id": "MDQ6VXNlcjU3NzQ3MTY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5774716?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/perrin4869",
      "html_url": "https://github.com/perrin4869",
      "followers_url": "https://api.github.com/users/perrin4869/followers",
      "following_url": "https://api.github.com/users/perrin4869/following{/other_user}",
      "gists_url": "https://api.github.com/users/perrin4869/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/perrin4869/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/perrin4869/subscriptions",
      "organizations_url": "https://api.github.com/users/perrin4869/orgs",
      "repos_url": "https://api.github.com/users/perrin4869/repos",
      "events_url": "https://api.github.com/users/perrin4869/events{/privacy}",
      "received_events_url": "https://api.github.com/users/perrin4869/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710375792,
        "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false,
        "description": null
      },
      {
        "id": 710722093,
        "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
        "name": "Type: Needs Investigation",
        "color": "fbca04",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 40,
    "created_at": "2019-03-01T19:05:10Z",
    "updated_at": "2020-04-24T21:36:22Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nAs demonstrated in [this](https://codesandbox.io/s/1r539z96r3) codesandbox, trying to implement a pattern similar to the one discussed in https://reactjs.org/docs/hooks-faq.html#how-do-i-implement-getderivedstatefromprops results in an infinite loop, even if the value of the state does not change. This seems like a bug, because, as documented [here](https://reactjs.org/docs/hooks-reference.html#bailing-out-of-a-state-update), `If you update a State Hook to the same value as the current state, React will bail out without rendering the children or firing effects.`\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n**What is the expected behavior?**\r\n\r\nSince the state does not change, bail out on the re-render.\r\nThis can be worked around by adding a check before `setState` to check if the state has changed before calling the function.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/14988",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/14988/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/14988/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/14988/events",
    "html_url": "https://github.com/facebook/react/issues/14988",
    "id": 416027015,
    "node_id": "MDU6SXNzdWU0MTYwMjcwMTU=",
    "number": 14988,
    "title": "Subscription to event listener in useEffect can miss an update",
    "user": {
      "login": "jsnajdr",
      "id": 664258,
      "node_id": "MDQ6VXNlcjY2NDI1OA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/664258?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jsnajdr",
      "html_url": "https://github.com/jsnajdr",
      "followers_url": "https://api.github.com/users/jsnajdr/followers",
      "following_url": "https://api.github.com/users/jsnajdr/following{/other_user}",
      "gists_url": "https://api.github.com/users/jsnajdr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jsnajdr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jsnajdr/subscriptions",
      "organizations_url": "https://api.github.com/users/jsnajdr/orgs",
      "repos_url": "https://api.github.com/users/jsnajdr/repos",
      "events_url": "https://api.github.com/users/jsnajdr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jsnajdr/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1205087127,
        "node_id": "MDU6TGFiZWwxMjA1MDg3MTI3",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Concurrent%20Mode",
        "name": "Component: Concurrent Mode",
        "color": "ffccd3",
        "default": false,
        "description": ""
      },
      {
        "id": 1109410193,
        "node_id": "MDU6TGFiZWwxMTA5NDEwMTkz",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Hooks",
        "name": "Component: Hooks",
        "color": "c2f27b",
        "default": false,
        "description": ""
      },
      {
        "id": 710375792,
        "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 15,
    "created_at": "2019-03-01T10:01:51Z",
    "updated_at": "2019-07-01T19:33:28Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Steps to reproduce:**\r\nRun the following app that uses an event-emitting counter and maintains a subscription to render updates:\r\n```js\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nfunction createCounter() {\r\n  let value = 0;\r\n  const listeners = new Set();\r\n\r\n  return {\r\n    get() { return value; },\r\n    on(listener) { listeners.add(listener); },\r\n    off(listener) { listeners.delete(listener); },\r\n    increment() { value++; listeners.forEach(listener => listener()); }\r\n  };\r\n}\r\n\r\nconst Counter = createCounter();\r\n\r\nfunction CounterWithHook() {\r\n  const [counter, setCounter] = React.useState(Counter.get);\r\n\r\n  React.useEffect(() => {\r\n    const onChange = () => setCounter(Counter.get());\r\n    Counter.on(onChange);\r\n    return () => Counter.off(onChange);\r\n  }, []);\r\n\r\n  return <div>counter: {counter}</div>;\r\n}\r\n\r\nReactDOM.render(\r\n  <>\r\n    <CounterWithHook />\r\n    <button onClick={Counter.increment}>increment</button>\r\n  </>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nrequestAnimationFrame(Counter.increment);\r\n```\r\n\r\nThe `requestAnimationFrame` at the end will increment the counter in a slightly insidious way.\r\n\r\n**Expected result:**\r\nAfter loading the app, I see `counter: 1` and clicking the `increment` button updates the UI to `counter: 2`.\r\n\r\n**Actual result:**\r\nAfter loading the app, I see `counter: 0` and clicking the button updates the UI to `counter: 2`.\r\n\r\nThe timing of the `Counter.increment` is such that it happens after the initial render, but before the listener is attached.\r\n\r\nImplementing the same thing with lifecycle methods behaves differently: `componentDidMount` runs soon enough to catch the update.\r\n\r\nIs that expected and a part of the `useEffect` contract? Is there a better way to maintain subscriptions? Note that the missed update came from an independent source, completely outside React.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/14980",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/14980/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/14980/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/14980/events",
    "html_url": "https://github.com/facebook/react/issues/14980",
    "id": 415741541,
    "node_id": "MDU6SXNzdWU0MTU3NDE1NDE=",
    "number": 14980,
    "title": "Misleading error description when using wrong useRef",
    "user": {
      "login": "madroneropaulo",
      "id": 4364107,
      "node_id": "MDQ6VXNlcjQzNjQxMDc=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/4364107?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/madroneropaulo",
      "html_url": "https://github.com/madroneropaulo",
      "followers_url": "https://api.github.com/users/madroneropaulo/followers",
      "following_url": "https://api.github.com/users/madroneropaulo/following{/other_user}",
      "gists_url": "https://api.github.com/users/madroneropaulo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/madroneropaulo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/madroneropaulo/subscriptions",
      "organizations_url": "https://api.github.com/users/madroneropaulo/orgs",
      "repos_url": "https://api.github.com/users/madroneropaulo/repos",
      "events_url": "https://api.github.com/users/madroneropaulo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/madroneropaulo/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 40929151,
        "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
        "name": "Type: Bug",
        "color": "b60205",
        "default": false,
        "description": null
      },
      {
        "id": 710722093,
        "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
        "name": "Type: Needs Investigation",
        "color": "fbca04",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2019-02-28T17:35:45Z",
    "updated_at": "2020-03-23T13:48:52Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "There's a misleading error when using wrong the `useRef` hook.\r\n\r\n```\r\nfunction MyComponent() {\r\n    let nameRef = useRef();\r\n\r\n   return (\r\n      <div>\r\n        <input ref=\"nameRef\" type=\"text\" />       \r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\nSee the example here https://codesandbox.io/s/yvl21qm62j\r\n\r\nThe code above leads to this error `Function components cannot have refs. Did you mean to use React.forwardRef()?`. I'm moving some class components to Hooks, and stumbled upon this, and it took me a while due to the wrong error message.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/14962",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/14962/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/14962/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/14962/events",
    "html_url": "https://github.com/facebook/react/issues/14962",
    "id": 414808368,
    "node_id": "MDU6SXNzdWU0MTQ4MDgzNjg=",
    "number": 14962,
    "title": "Password input type causes memory leak",
    "user": {
      "login": "ejallday",
      "id": 3165745,
      "node_id": "MDQ6VXNlcjMxNjU3NDU=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/3165745?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ejallday",
      "html_url": "https://github.com/ejallday",
      "followers_url": "https://api.github.com/users/ejallday/followers",
      "following_url": "https://api.github.com/users/ejallday/following{/other_user}",
      "gists_url": "https://api.github.com/users/ejallday/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ejallday/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ejallday/subscriptions",
      "organizations_url": "https://api.github.com/users/ejallday/orgs",
      "repos_url": "https://api.github.com/users/ejallday/repos",
      "events_url": "https://api.github.com/users/ejallday/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ejallday/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710722093,
        "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
        "name": "Type: Needs Investigation",
        "color": "fbca04",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 12,
    "created_at": "2019-02-26T20:39:50Z",
    "updated_at": "2020-05-12T16:56:22Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n*Bug*\r\n\r\n**What is the current behavior?**\r\n\r\nAn `<input type=\"password\"/>` causes a memory leak.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nYou can recreate the behavior by visiting https://iericallen.github.io/test-react/ and following the steps listed.\r\n\r\nPlease view our source code at: https://github.com/iericallen/test-react/tree/source\r\n\r\n**What is the expected behavior?**\r\n\r\nUnmounted components including `<input type=\"password\" />` can be garbage collected after next re-rendering.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nOS: macOS X Mojave 10.14.2 (18C54)\r\nChrome: 72.0.3626.109\r\nReact: 16.8.3\r\nReactDOM: 16.8.3",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/14878",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/14878/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/14878/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/14878/events",
    "html_url": "https://github.com/facebook/react/issues/14878",
    "id": 411467909,
    "node_id": "MDU6SXNzdWU0MTE0Njc5MDk=",
    "number": 14878,
    "title": "Simple memo components being updated with new set of props during context change",
    "user": {
      "login": "Andarist",
      "id": 9800850,
      "node_id": "MDQ6VXNlcjk4MDA4NTA=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/9800850?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Andarist",
      "html_url": "https://github.com/Andarist",
      "followers_url": "https://api.github.com/users/Andarist/followers",
      "following_url": "https://api.github.com/users/Andarist/following{/other_user}",
      "gists_url": "https://api.github.com/users/Andarist/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Andarist/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Andarist/subscriptions",
      "organizations_url": "https://api.github.com/users/Andarist/orgs",
      "repos_url": "https://api.github.com/users/Andarist/repos",
      "events_url": "https://api.github.com/users/Andarist/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Andarist/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 40929151,
        "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
        "name": "Type: Bug",
        "color": "b60205",
        "default": false,
        "description": null
      },
      {
        "id": 710722093,
        "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
        "name": "Type: Needs Investigation",
        "color": "fbca04",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2019-02-18T13:08:58Z",
    "updated_at": "2020-01-12T19:23:16Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nSimple memo components receive new props during context change if their parent got rerendered.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://codesandbox.io/s/jp21pwzrv9\r\n\r\n**What is the expected behavior?**\r\n\r\nConceptually from the user's perspective `React.memo(Component)` & `React.memo(Component, shallowEqual)` should behave exactly the same (but they dont)\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nCurrent React's master ( 0e67969cb1ad8c27a72294662e68fa5d7c2c9783 ) & current latest release 16.8.2\r\n\r\nI've already written a failing test for this - https://github.com/facebook/react/pull/14876 . Would love to work on fixing this but as mentioned in this PR, I would require some guidance on how this should get fixed properly.\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/14876",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/14876/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/14876/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/14876/events",
    "html_url": "https://github.com/facebook/react/pull/14876",
    "id": 411222610,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MjUzNzMyMjM2",
    "number": 14876,
    "title": "Add failing test for simple memo components being updated with new seâ€¦",
    "user": {
      "login": "Andarist",
      "id": 9800850,
      "node_id": "MDQ6VXNlcjk4MDA4NTA=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/9800850?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Andarist",
      "html_url": "https://github.com/Andarist",
      "followers_url": "https://api.github.com/users/Andarist/followers",
      "following_url": "https://api.github.com/users/Andarist/following{/other_user}",
      "gists_url": "https://api.github.com/users/Andarist/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Andarist/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Andarist/subscriptions",
      "organizations_url": "https://api.github.com/users/Andarist/orgs",
      "repos_url": "https://api.github.com/users/Andarist/repos",
      "events_url": "https://api.github.com/users/Andarist/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Andarist/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      },
      {
        "id": 1775955521,
        "node_id": "MDU6TGFiZWwxNzc1OTU1NTIx",
        "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Backlog",
        "name": "Resolution: Backlog",
        "color": "9dd1e8",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 14,
    "created_at": "2019-02-17T19:06:33Z",
    "updated_at": "2020-04-11T13:09:39Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/14876",
      "html_url": "https://github.com/facebook/react/pull/14876",
      "diff_url": "https://github.com/facebook/react/pull/14876.diff",
      "patch_url": "https://github.com/facebook/react/pull/14876.patch"
    },
    "body": "This is **not ready to be merged yet** because it only provides a failing test, I'd like to work on fixing this issue - but I would really appreciate some guidance with this. I've tried to understand what exactly is happening (wanted to send a PR with a fix already in it ðŸ˜‰ ), but failed to do so - need to dig deeper.\r\n\r\nMy current conclusion is that this fails because of the \"simple memo\" optimization - `workLoop` doesnt see this memo element at all, it \"jumps\" from working on Outer directly to Inner which has fresh `pendingProps` which are used as argument for working on Inner as it correctly has to rerender itself because it reads changed context. So it doesnt bail out on finished work (correctly) and commits used new props as memoized ones later.\r\n\r\n**Why this matters?**\r\nBecause it's inconsistent with \"regular\" memo component. Conceptually from the user's perspective `React.memo(Component)` & `React.memo(Component, shallowEqual)` should behave exactly the same (but they dont)\r\n\r\nI've prepared a demo to showcase the problem - https://codesandbox.io/s/jp21pwzrv9",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/14856",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/14856/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/14856/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/14856/events",
    "html_url": "https://github.com/facebook/react/issues/14856",
    "id": 410478306,
    "node_id": "MDU6SXNzdWU0MTA0NzgzMDY=",
    "number": 14856,
    "title": "Chrome 73 breaks wheel events",
    "user": {
      "login": "blixt",
      "id": 158591,
      "node_id": "MDQ6VXNlcjE1ODU5MQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/158591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/blixt",
      "html_url": "https://github.com/blixt",
      "followers_url": "https://api.github.com/users/blixt/followers",
      "following_url": "https://api.github.com/users/blixt/following{/other_user}",
      "gists_url": "https://api.github.com/users/blixt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/blixt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/blixt/subscriptions",
      "organizations_url": "https://api.github.com/users/blixt/orgs",
      "repos_url": "https://api.github.com/users/blixt/repos",
      "events_url": "https://api.github.com/users/blixt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/blixt/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710375792,
        "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 25,
    "created_at": "2019-02-14T20:28:58Z",
    "updated_at": "2020-08-31T00:37:58Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Similar to #8968, but for the `wheel` and `mousewheel` events. They are now passive by default for root elements in Chrome 73 (currently beta) which means React apps that have custom scrolling/zooming behaviors will run into issues.\r\n\r\nThe quick fix may be to manually add event listeners with `{passive: false}` but has the React team considered if this should be configurable for the React event handler?\r\n\r\nBlog post from the Chrome team here: https://developers.google.com/web/updates/2019/02/scrolling-intervention",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/14785",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/14785/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/14785/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/14785/events",
    "html_url": "https://github.com/facebook/react/issues/14785",
    "id": 407597506,
    "node_id": "MDU6SXNzdWU0MDc1OTc1MDY=",
    "number": 14785,
    "title": "defaultValue does not work with input when type is set to submit",
    "user": {
      "login": "jakubkosinski",
      "id": 2722,
      "node_id": "MDQ6VXNlcjI3MjI=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/2722?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jakubkosinski",
      "html_url": "https://github.com/jakubkosinski",
      "followers_url": "https://api.github.com/users/jakubkosinski/followers",
      "following_url": "https://api.github.com/users/jakubkosinski/following{/other_user}",
      "gists_url": "https://api.github.com/users/jakubkosinski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jakubkosinski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jakubkosinski/subscriptions",
      "organizations_url": "https://api.github.com/users/jakubkosinski/orgs",
      "repos_url": "https://api.github.com/users/jakubkosinski/repos",
      "events_url": "https://api.github.com/users/jakubkosinski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jakubkosinski/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710375792,
        "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2019-02-07T09:01:40Z",
    "updated_at": "2019-02-08T16:27:02Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nWhen you use uncontrolled `<input type=\"submit\" />` and set `defaultValue` attribute, it would be ignored in versions 1.5.0 or higher (there would be no `value` attribute in the HTML result). It was working correctly in older versions. Looks like only `type=\"submit\"` is affected, for other input types `defaultValue` behaves correctly.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nCorrect behaviour with react 16.4.2: https://codepen.io/anon/pen/zePmrZ\r\nIncorrect behaviour with react 16.8.1: https://codepen.io/anon/pen/PVOyqV\r\n\r\n**What is the expected behavior?**\r\n\r\nWhen `defaultValue=\"foo\"` is set on `<input type=\"submit\"/>` it should result in `<input type=\"submit\" value=\"foo\" />` in the HTML result.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nAll versions starting from 16.5.0\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/14750",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/14750/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/14750/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/14750/events",
    "html_url": "https://github.com/facebook/react/issues/14750",
    "id": 406046695,
    "node_id": "MDU6SXNzdWU0MDYwNDY2OTU=",
    "number": 14750,
    "title": "Simultaneous key events in effect handled out of order",
    "user": {
      "login": "stuartkeith",
      "id": 808880,
      "node_id": "MDQ6VXNlcjgwODg4MA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/808880?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stuartkeith",
      "html_url": "https://github.com/stuartkeith",
      "followers_url": "https://api.github.com/users/stuartkeith/followers",
      "following_url": "https://api.github.com/users/stuartkeith/following{/other_user}",
      "gists_url": "https://api.github.com/users/stuartkeith/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stuartkeith/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stuartkeith/subscriptions",
      "organizations_url": "https://api.github.com/users/stuartkeith/orgs",
      "repos_url": "https://api.github.com/users/stuartkeith/repos",
      "events_url": "https://api.github.com/users/stuartkeith/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stuartkeith/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1775955521,
        "node_id": "MDU6TGFiZWwxNzc1OTU1NTIx",
        "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Backlog",
        "name": "Resolution: Backlog",
        "color": "9dd1e8",
        "default": false,
        "description": ""
      },
      {
        "id": 121709921,
        "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
        "name": "Type: Feature Request",
        "color": "c7def8",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 13,
    "created_at": "2019-02-03T02:57:23Z",
    "updated_at": "2020-04-01T23:04:23Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nReport a bug.\r\n\r\n**What is the current behavior?**\r\n\r\nI have an app that's registering event listeners for `window`'s key events (via `useEffect`). Those event listeners are triggering state updates (via `useState`). I think I have found a bug where simultaneous key events occurring in the same frame (whether down or up) will be handled out of order, causing state to becoming out of sync.\r\n\r\nTake the following simple app (https://codesandbox.io/s/1z3v9zrk4j). I've kept this as keyup only for simplicity.\r\n\r\n```\r\nfunction App() {\r\n  const [keys, setKeys] = useState([]);\r\n\r\n  console.log('App', keys);\r\n\r\n  const onKeyUp = function (event) {\r\n    console.log('onKeyUp', event.key, keys);\r\n\r\n    setKeys([...keys, event.key]);\r\n  };\r\n\r\n  useEffect(function () {\r\n    console.log('effect', keys);\r\n\r\n    window.addEventListener('keyup', onKeyUp);\r\n\r\n    return function () {\r\n      console.log('removing event listener', keys);\r\n\r\n      window.removeEventListener('keyup', onKeyUp);\r\n    };\r\n  });\r\n\r\n  return <p>{keys.join(', ')}</p>;\r\n}\r\n```\r\n\r\nIf I press down any two keys, e.g. the \"q\" and \"w\" keys, and then release them at precisely the same time, the following happens:\r\n\r\n- The `keyup` event listener for `w` is called, which in turn calls `setKeys` with `['w']`\r\n- `App` is re-rendered with `keys === ['w']`\r\n- The `keyup` event listener for `q` is called, which in turn calls `setKeys` with `['q']`\r\n- The effect's cleanup function is called, removing the event listener with `keys === []`\r\n- The effect is run again, the event listener being added with `keys === ['w']`\r\n- `App` is re-rendered with `keys === ['q']`\r\n- The effect's cleanup function is called, removing the event listener with `keys ===['w']`\r\n- The effect is run again, the event listener being added with `keys === ['q']`\r\n\r\nThis results in `keys === ['q']`. The render with `w` has been lost.\r\n\r\nWith three keys, only two keys are reliably shown. Four keys - only two are reliably shown.\r\n\r\nIf I add another `useState` call, the first `useState` has no issues - all keys are reliably detected. See https://codesandbox.io/s/0yo51n5wv:\r\n\r\n```\r\nfunction App() {\r\n  const [keys, setKeys] = useState([]); \r\n  const [dummy, setDummy] = useState('foo');\r\n\r\n  console.log(\"rendering App\", keys);\r\n\r\n  const onKeyUp = function(event) {\r\n    console.log(\"onKeyUp event received\", event.key, keys);\r\n\r\n    setKeys([...keys, event.key]);\r\n    setDummy('foo');\r\n  };\r\n\r\n  useEffect(function() {\r\n    console.log(\"adding event listener\", keys);\r\n\r\n    window.addEventListener(\"keyup\", onKeyUp);\r\n\r\n    return function() {\r\n      console.log(\"removing event listener\", keys);\r\n\r\n      window.removeEventListener(\"keyup\", onKeyUp);\r\n    };\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <p>Keyups received:</p>\r\n      <p>{keys.join(\", \")}</p>\r\n      <button onClick={() => setKeys([])}>Reset</button>\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nI would expect the final state array to contain all keys released, in order. There are a few workarounds for this issue (e.g. passing a function to `setState` to retrieve the current value instead of using the rendered value), but from the documentation it seems that is an escape hatch for use when the effect's callback is not renewed on each state change, and should not be necessary in this case (unless I've misunderstood).\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nIt happens on both versions that support hooks - `16.8.0-alpha.0` and `16.8.0-alpha.1`. This is on Chrome/Safari/Firefox on MacOS Mojave.\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/14694",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/14694/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/14694/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/14694/events",
    "html_url": "https://github.com/facebook/react/issues/14694",
    "id": 402843937,
    "node_id": "MDU6SXNzdWU0MDI4NDM5Mzc=",
    "number": 14694,
    "title": "Chrome Autofill overwrites values on controlled components",
    "user": {
      "login": "epicfaace",
      "id": 1689183,
      "node_id": "MDQ6VXNlcjE2ODkxODM=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1689183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/epicfaace",
      "html_url": "https://github.com/epicfaace",
      "followers_url": "https://api.github.com/users/epicfaace/followers",
      "following_url": "https://api.github.com/users/epicfaace/following{/other_user}",
      "gists_url": "https://api.github.com/users/epicfaace/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/epicfaace/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/epicfaace/subscriptions",
      "organizations_url": "https://api.github.com/users/epicfaace/orgs",
      "repos_url": "https://api.github.com/users/epicfaace/repos",
      "events_url": "https://api.github.com/users/epicfaace/events{/privacy}",
      "received_events_url": "https://api.github.com/users/epicfaace/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 127893911,
        "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
        "name": "Component: DOM",
        "color": "fef2c0",
        "default": false,
        "description": null
      },
      {
        "id": 763742499,
        "node_id": "MDU6TGFiZWw3NjM3NDI0OTk=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Breaking%20Change",
        "name": "Type: Breaking Change",
        "color": "aa2608",
        "default": false,
        "description": null
      },
      {
        "id": 40929151,
        "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
        "name": "Type: Bug",
        "color": "b60205",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2019-01-24T18:42:29Z",
    "updated_at": "2019-02-04T15:19:29Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nReport a bug. Initially reported in https://github.com/mozilla-services/react-jsonschema-form/issues/1153\r\n\r\n**What is the current behavior?**\r\nAutofill overwrites existing values in fields when those fields are controlled components in React.\r\n\r\nSee https://jsfiddle.net/epicfaace/9p17e2qx/21/ -- to test this, add a \"Saved Address\" in the Chrome options.\r\n\r\n![2019-01-24 10 37 23](https://user-images.githubusercontent.com/1689183/51700667-91b32a80-1fc4-11e9-876b-6f795225d99b.gif)\r\n\r\n**What is the expected behavior?**\r\nAutofill does not overwrite existing fields. I've made a JSFiddle with a plain HTML form, which works with the expected behavior.\r\n\r\nSee https://jsfiddle.net/epicfaace/1my3f9n4/6/\r\n\r\n![2019-01-24 10 37 02](https://user-images.githubusercontent.com/1689183/51700679-9841a200-1fc4-11e9-9408-dae369ac5366.gif)\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact 15.3.2\r\nChrome 71.0.3578.98\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/14669",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/14669/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/14669/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/14669/events",
    "html_url": "https://github.com/facebook/react/issues/14669",
    "id": 402294005,
    "node_id": "MDU6SXNzdWU0MDIyOTQwMDU=",
    "number": 14669,
    "title": "Write a test for discrete events in Concurrent Mode",
    "user": {
      "login": "gaearon",
      "id": 810438,
      "node_id": "MDQ6VXNlcjgxMDQzOA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gaearon",
      "html_url": "https://github.com/gaearon",
      "followers_url": "https://api.github.com/users/gaearon/followers",
      "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
      "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
      "organizations_url": "https://api.github.com/users/gaearon/orgs",
      "repos_url": "https://api.github.com/users/gaearon/repos",
      "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gaearon/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 71502270,
        "node_id": "MDU6TGFiZWw3MTUwMjI3MA==",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Build%20Infrastructure",
        "name": "Component: Build Infrastructure",
        "color": "f9d0c4",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-01-23T15:29:27Z",
    "updated_at": "2020-10-07T18:38:25Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "See this review comment: \r\n\r\n>Need one more test for the \"counter\" example: each discrete event must commit in sequence. So if you click on an increment button five times, the final result should always be five.\r\n\r\nhttps://github.com/facebook/react/pull/14415#pullrequestreview-183478210",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/14658",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/14658/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/14658/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/14658/events",
    "html_url": "https://github.com/facebook/react/issues/14658",
    "id": 401823391,
    "node_id": "MDU6SXNzdWU0MDE4MjMzOTE=",
    "number": 14658,
    "title": "`useCallback()` & `useMemo()` automatically with a Babel Plug-in",
    "user": {
      "login": "DAB0mB",
      "id": 7648874,
      "node_id": "MDQ6VXNlcjc2NDg4NzQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/7648874?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DAB0mB",
      "html_url": "https://github.com/DAB0mB",
      "followers_url": "https://api.github.com/users/DAB0mB/followers",
      "following_url": "https://api.github.com/users/DAB0mB/following{/other_user}",
      "gists_url": "https://api.github.com/users/DAB0mB/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DAB0mB/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DAB0mB/subscriptions",
      "organizations_url": "https://api.github.com/users/DAB0mB/orgs",
      "repos_url": "https://api.github.com/users/DAB0mB/repos",
      "events_url": "https://api.github.com/users/DAB0mB/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DAB0mB/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710375792,
        "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2019-01-22T15:38:42Z",
    "updated_at": "2019-03-10T06:45:26Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature request.\r\n\r\n**What is the current behavior?**\r\n\r\nWe need to `useCallback()` and `useMemo()` which seems redundant and can cost us in performance if not used right, which is likely to happen.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n```js\r\nexport default ({ data, sortComparator, filterPredicate, history }) => {\r\n  const transformedData = data.filter(filterPredicate).sort(sortComparator)\r\n\r\n  return (\r\n    <div>\r\n      <button className=\"back-btn\" onClick={() => history.pop()} />\r\n      <ul className=\"data-list\">\r\n        {transformedData.map(({ id, value }) => (\r\n          <li className=\"data-item\" key={id} onClick={() => history.push(`data/${id}`)}>{value}</li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nJust like the [docs](https://reactjs.org/docs/hooks-reference.html#usecallback) suggest:\r\n\r\n```\r\nIn the future, a sufficiently advanced compiler could create this array automatically.\r\n```\r\n\r\nAccordingly, I have implemented a Babel-plug-in that does exactly that; see [babel-plugin-react-persist](https://github.com/DAB0mB/babel-plugin-react-persist). Given the code snippet above, the plug-in should generate the following output:\r\n\r\n```js\r\nlet _anonymousFnComponent, _anonymousFnComponent2\r\n\r\nexport default ({ data, sortComparator, filterPredicate, history }) => {\r\n  const transformedData = React.useMemo(() =>\r\n    data.filter(filterPredicate).sort(sortComparator)\r\n  , [data, data.filter, filterPredicate, sortComparator])\r\n\r\n  return React.createElement(_anonymousFnComponent2 = _anonymousFnComponent2 || (() => {\r\n    const _onClick2 = React.useCallback(() => history.pop(), [history, history.pop])\r\n\r\n    return (\r\n      <div>\r\n        <button className=\"back-btn\" onClick={_onClick2} />\r\n        <ul className=\"data-list\">\r\n          {transformedData.map(({ id, value }) =>\r\n            React.createElement(_anonymousFnComponent = _anonymousFnComponent || (() => {\r\n              const _onClick = React.useCallback(() =>\r\n                history.push(`data/${id}`)\r\n              , [history, history.push, id])\r\n\r\n              return (\r\n                <li className=\"data-item\" key={id} onClick={_onClick}>\r\n                  {value}\r\n                </li>\r\n              )\r\n            }), { key: id })\r\n          )}\r\n        </ul>\r\n      </div>\r\n    )\r\n  }), null)\r\n}\r\n```\r\n\r\nThe plug-in will:\r\n\r\n- `useCallback()` automatically when a function is created.\r\n- `useMemo()` automatically when a value is assigned.\r\n- Will memoize inline callbacks.\r\n\r\nI don't see however how can `useEffect()` be inferred automatically and if it's a good idea. The plug-in is not a feature request directly for React, but since it's stated in the docs I thought maybe it can be useful somehow. Maybe it can potentially be included as part of `create-react-app`? Would like to hear your thoughts about it. An alternative solution is suggested at #14406, but I don't see why do this at runtime when everything can be done ahead of time and save processing power.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.8-alpha (hooks)\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/14557",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/14557/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/14557/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/14557/events",
    "html_url": "https://github.com/facebook/react/pull/14557",
    "id": 397547195,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MjQzNDY5NDk1",
    "number": 14557,
    "title": "[WIP] Try to fix scheduler fixture",
    "user": {
      "login": "gaearon",
      "id": 810438,
      "node_id": "MDQ6VXNlcjgxMDQzOA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gaearon",
      "html_url": "https://github.com/gaearon",
      "followers_url": "https://api.github.com/users/gaearon/followers",
      "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
      "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
      "organizations_url": "https://api.github.com/users/gaearon/orgs",
      "repos_url": "https://api.github.com/users/gaearon/repos",
      "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gaearon/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2019-01-09T20:21:32Z",
    "updated_at": "2020-01-23T22:18:46Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/14557",
      "html_url": "https://github.com/facebook/react/pull/14557",
      "diff_url": "https://github.com/facebook/react/pull/14557.diff",
      "patch_url": "https://github.com/facebook/react/pull/14557.patch"
    },
    "body": "It's currently broken. Partially from #14025 but maybe there's bugs. I don't know yet.\r\n\r\nI tried to fix it but 4 is still broken.\r\n\r\n<img width=\"487\" alt=\"screen shot 2019-01-09 at 8 19 49 pm\" src=\"https://user-images.githubusercontent.com/810438/50926090-15f5a180-144c-11e9-9514-54dd1ee21e9c.png\">\r\n\r\nI'm not sure if I need to change the expectations?\r\n\r\nAlso, 8 is broken but only if I go through every test before it first:\r\n\r\n<img width=\"392\" alt=\"screen shot 2019-01-09 at 8 20 20 pm\" src=\"https://user-images.githubusercontent.com/810438/50926113-24dc5400-144c-11e9-8c70-0df37ab6ef3c.png\">\r\n\r\nIt passes in isolation.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/14543",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/14543/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/14543/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/14543/events",
    "html_url": "https://github.com/facebook/react/issues/14543",
    "id": 396786559,
    "node_id": "MDU6SXNzdWUzOTY3ODY1NTk=",
    "number": 14543,
    "title": "Add `get` function to `useState`",
    "user": {
      "login": "liyuanqiu",
      "id": 24999464,
      "node_id": "MDQ6VXNlcjI0OTk5NDY0",
      "avatar_url": "https://avatars1.githubusercontent.com/u/24999464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/liyuanqiu",
      "html_url": "https://github.com/liyuanqiu",
      "followers_url": "https://api.github.com/users/liyuanqiu/followers",
      "following_url": "https://api.github.com/users/liyuanqiu/following{/other_user}",
      "gists_url": "https://api.github.com/users/liyuanqiu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/liyuanqiu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/liyuanqiu/subscriptions",
      "organizations_url": "https://api.github.com/users/liyuanqiu/orgs",
      "repos_url": "https://api.github.com/users/liyuanqiu/repos",
      "events_url": "https://api.github.com/users/liyuanqiu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/liyuanqiu/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710375792,
        "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 29,
    "created_at": "2019-01-08T07:51:31Z",
    "updated_at": "2019-03-31T15:33:17Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n- feature\r\n\r\n**What is the current behavior?**\r\nCode from [Introducing Hooks](https://reactjs.org/docs/hooks-intro.html):\r\n```javascript\r\nimport { useState } from 'react';\r\n\r\nfunction Example() {\r\n  // Declare a new state variable, which we'll call \"count\"\r\n  const [count, setCount] = useState(0);\r\n\r\n  return (\r\n    <div>\r\n      <p>You clicked {count} times</p>\r\n      <button onClick={() => setCount(count + 1)}>\r\n        Click me\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n```\r\n```javascript\r\n// each time \"count\" changed, this arrow function will be created again.\r\n// so that it can access the latest \"count\"\r\nonClick={() => setCount(count + 1)}\r\n```\r\nI don't think it is good to create a fixed function many times, so I try to modify the code:\r\n```javascript\r\nconst [count, setCount] = useState(0);\r\nconst handleClick = useCallback(() => setCount(count + 1), []);\r\n```\r\nBut obviously the callback in `useCallback` couldn't get the latest `count` because I pass in an empty inputs array to avoid this callback been generated again and again.\r\n\r\nSo, in fact, the inputs array decide two things:\r\n1. when to recreate the callback\r\n2. which state can be accessed in the callback\r\n\r\nIn most situation, the two things are one thing, but here they conflict. \r\n\r\nSo I think maybe it's good to add a `get` function to `useState` like this:\r\n```javascript\r\nimport { useState, useCallback } from 'react';\r\n\r\nfunction Example() {\r\n  // Declare a new state variable, which we'll call \"count\"\r\n  const [count, setCount, getCount] = useState(0);\r\n\r\n  const handleClick = useCallback(() => setCount(getCount() + 1), []);\r\n\r\n  return (\r\n    <div>\r\n      <p>You clicked {count} times</p>\r\n      <button onClick={handleClick}>\r\n        Click me\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n```\r\nMaybe it's confusing because `getCount` can totally replace `count`, but it brings the possible to avoid creating callbacks again and again.\r\n\r\n### Edited\r\nhttps://github.com/facebook/react/issues/14543#issuecomment-452237355 exactly resolves the case above. But thereâ€˜re many other scenarios can't use `updater` to resolve. Here are some more code snippets:\r\n#### 1. Access states in a timer.\r\n```javascript\r\nuseEffect(() => {\r\n  // or setInterval\r\n  const id = setTimeout(() => {\r\n    // access states\r\n  }, period);\r\n  return () => clearTimeout(id);\r\n}, inputs);\r\n```\r\n#### 2. Access states in WebSocket callbacks\r\n```javascript\r\nuseEffect(() => {\r\n  // create a WebSocket client named \"ws\"\r\n  ws.onopen = () => {\r\n    // access states\r\n  };\r\n  ws.onmessage = () => {\r\n    // access states\r\n  };\r\n  return () => ws.close();\r\n}, inputs);\r\n```\r\n#### 3. Access states in Promise\r\n```javascript\r\nuseEffect(() => {\r\n  create_a_promise().then(() => {\r\n    // access states\r\n  });\r\n}, inputs);\r\n```\r\n#### 4. Access states in event callbacks\r\n```javascript\r\nuseEffect(() => {\r\n  function handleThatEvent() {\r\n    // access states\r\n  }\r\n  instance.addEventListener('eventName', handleThatEvent);\r\n  return instance.removeEventListener('eventName', handleThatEvent);\r\n}, inputs);\r\n```\r\n\r\nWe had to use some workaround patterns to resolve those cases, like\r\nhttps://github.com/facebook/react/issues/14543#issuecomment-452676760\r\nhttps://github.com/facebook/react/issues/14543#issuecomment-453058025\r\nhttps://github.com/facebook/react/issues/14543#issuecomment-453079958\r\nOr a funny way:\r\n```javascript\r\nconst [state, setState] = useState();\r\nuseEffect(() => {\r\n  // or setInterval\r\n  const id = setTimeout(() => {\r\n    // access states\r\n    setState((prevState) => {\r\n      // Now I can do anything with state...ðŸ¤®\r\n      ...\r\n      return prevState;\r\n    });\r\n  }, period);\r\n  return () => clearTimeout(id);\r\n}, inputs);\r\n```\r\n\r\nSo let's discuss and wait...\r\nhttps://github.com/facebook/react/issues/14543#issuecomment-452713416\r\n\r\n\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n**What is the expected behavior?**\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n- React 16.7.0-alpha.2\r\n\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/14540",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/14540/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/14540/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/14540/events",
    "html_url": "https://github.com/facebook/react/issues/14540",
    "id": 396340261,
    "node_id": "MDU6SXNzdWUzOTYzNDAyNjE=",
    "number": 14540,
    "title": "Nested portals should be discoverable",
    "user": {
      "login": "theKashey",
      "id": 582410,
      "node_id": "MDQ6VXNlcjU4MjQxMA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/582410?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theKashey",
      "html_url": "https://github.com/theKashey",
      "followers_url": "https://api.github.com/users/theKashey/followers",
      "following_url": "https://api.github.com/users/theKashey/following{/other_user}",
      "gists_url": "https://api.github.com/users/theKashey/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theKashey/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theKashey/subscriptions",
      "organizations_url": "https://api.github.com/users/theKashey/orgs",
      "repos_url": "https://api.github.com/users/theKashey/repos",
      "events_url": "https://api.github.com/users/theKashey/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theKashey/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1775957182,
        "node_id": "MDU6TGFiZWwxNzc1OTU3MTgy",
        "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Stale",
        "name": "Resolution: Stale",
        "color": "e6e6e6",
        "default": false,
        "description": "Automatically closed due to inactivity"
      },
      {
        "id": 121709921,
        "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
        "name": "Type: Feature Request",
        "color": "c7def8",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2019-01-07T04:02:48Z",
    "updated_at": "2020-10-12T01:57:04Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "This is more about a bridge between actual DOM Tree and React Tree.\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nfeature\r\n\r\n**What is the current behavior?**\r\nYou can _portal_ a part of your rendering tree to another place in Dom Tree, and React would handle events, including events on Capture Phase like there were no portals - events could dive through all the _react_ parents, and bubble up through all the _react_ parents.\r\n\r\nThis is quite useful, as long as portal is an implementation detail, but useful only for normal events; there are more cases around it.\r\n\r\n**What is the expected behavior?**\r\n\r\nIt's better to explain it by example\r\n- you have a Modal Dialog and it uses a Focus Lock, ie focus could not leave it.\r\n- inside Modal you have a Custom Select, with Dropdown menu rendered via a portal.\r\n- you could not use it, as long as from DOM prospective `ModalNode.contains(DropDownNode)` is always false, and Focus Lock will prevent focusing.\r\n\r\nIt's a real issue - https://github.com/reach/reach-ui/issues/83, https://github.com/theKashey/react-focus-lock/issues/19.\r\n\r\nProposed solution:\r\n- `containsNode(domNode):boolean` - _React-aware_ version of DOM API `node.contains(anotherNode)`.\r\n- `getHostNodes():Nodes[]` - returns a list of all root nodes inside \"current component\" including direct children and portals. Similar to `ReactDom.findDomNode`, and (proposed)refs attached to React.Fragment. It just finds all nodes \"you are consists of\". As a result you will be able to `tab` from one `piece` of you to another, making focus management independed of implementation details.\r\n\r\nCons:\r\n- requires Component to access fiber, DOM node to access fiber thought node, or an new `hook` to do it in a functional way.\r\n- does twice dreadfull things than deprecated `findDomNode`\r\n- usage scope is very narrow.\r\n\r\nPros:\r\n- _my_ use case requires _momentum_ access to a rendered tree, and does not suffer async stuff as `findDomNode`, where underlaying node might not be yet created. Stuff like \"_does something `containsNode` right now_\", or _\"`getHostNodes` I consist from right now\"_ are sync, and the question asked about actual DOM tree structure.\r\n\r\nExample using [react-dom-reflection](https://github.com/theKashey/react-dom-reflection), which implements required API - https://codesandbox.io/s/1or60v506l\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nNever worked",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/14535",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/14535/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/14535/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/14535/events",
    "html_url": "https://github.com/facebook/react/issues/14535",
    "id": 396203469,
    "node_id": "MDU6SXNzdWUzOTYyMDM0Njk=",
    "number": 14535,
    "title": "Concurrent mode iOS hover behaviour",
    "user": {
      "login": "subhero24",
      "id": 1171150,
      "node_id": "MDQ6VXNlcjExNzExNTA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1171150?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/subhero24",
      "html_url": "https://github.com/subhero24",
      "followers_url": "https://api.github.com/users/subhero24/followers",
      "following_url": "https://api.github.com/users/subhero24/following{/other_user}",
      "gists_url": "https://api.github.com/users/subhero24/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/subhero24/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/subhero24/subscriptions",
      "organizations_url": "https://api.github.com/users/subhero24/orgs",
      "repos_url": "https://api.github.com/users/subhero24/repos",
      "events_url": "https://api.github.com/users/subhero24/events{/privacy}",
      "received_events_url": "https://api.github.com/users/subhero24/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1205087127,
        "node_id": "MDU6TGFiZWwxMjA1MDg3MTI3",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Concurrent%20Mode",
        "name": "Component: Concurrent Mode",
        "color": "ffccd3",
        "default": false,
        "description": ""
      },
      {
        "id": 40929151,
        "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
        "name": "Type: Bug",
        "color": "b60205",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2019-01-05T21:56:43Z",
    "updated_at": "2019-01-23T14:39:26Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "I hope this is the place to submit issues regarding concurrent mode.\r\nI don't know if this is a bug or intended behaviour, but I have a situation where the my react app behaves differently depending on the use of concurrent mode.\r\n\r\nHere is a link to a codesandbox demo: https://codesandbox.io/s/5xl0vnx11p\r\n\r\nThe behaviour on mobile Safari on iOS (12.1.2) is different whether using ReactDOM.render vs ReactDOM.createRoot. When ReactDOM.render is used, a tap results in an alert and after the alert is dismissed, the hover styles are applied. When using ReactDOM.createRoot, a tap results in the hover styles being applied. A second tap is needed to invoke the click handler.\r\n\r\n(This double tap behaviour from iOS is described [here](https://css-tricks.com/annoying-mobile-double-tap-link-issue/))\r\n\r\nShouldn't the two render methods behave the same in this regard? or is this really intended behaviour?\r\n\r\nBTW: A setTimout arround the mouseEnter event handler body does make ReactDOM.createRoot behave the same way as ReactDOM.render\r\n\r\n\r\n\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/14452",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/14452/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/14452/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/14452/events",
    "html_url": "https://github.com/facebook/react/issues/14452",
    "id": 391754899,
    "node_id": "MDU6SXNzdWUzOTE3NTQ4OTk=",
    "number": 14452,
    "title": "Wrong visualization order in User Timing when profiling in Chrome",
    "user": {
      "login": "mareolan",
      "id": 4648469,
      "node_id": "MDQ6VXNlcjQ2NDg0Njk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/4648469?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mareolan",
      "html_url": "https://github.com/mareolan",
      "followers_url": "https://api.github.com/users/mareolan/followers",
      "following_url": "https://api.github.com/users/mareolan/following{/other_user}",
      "gists_url": "https://api.github.com/users/mareolan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mareolan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mareolan/subscriptions",
      "organizations_url": "https://api.github.com/users/mareolan/orgs",
      "repos_url": "https://api.github.com/users/mareolan/repos",
      "events_url": "https://api.github.com/users/mareolan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mareolan/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 40929151,
        "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
        "name": "Type: Bug",
        "color": "b60205",
        "default": false,
        "description": null
      },
      {
        "id": 710722093,
        "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
        "name": "Type: Needs Investigation",
        "color": "fbca04",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2018-12-17T15:10:19Z",
    "updated_at": "2019-02-08T17:17:59Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n\r\n**What is the current behavior?**\r\nIn the screenshot below the \"DropTarget(Tile) [update]\" should have been visualized above the \"Tile [mount]\". Similarly, the item with \"stop icon\" to the right should have been in the first row.\r\n![image](https://user-images.githubusercontent.com/4648469/50094133-b91f1680-0212-11e9-8cf7-17d131a09d4f.png)\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\nSorry, I don't have public demo. When the bug happens it doesn't seem to be specific to a specific component / lifecycle event. I'm not sure whether it's React's problem or Chrome's.\r\n\r\n**What is the expected behavior?**\r\nDifferent order.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact 16.6.3 (but I have seen this in 16.4.0 too)\r\nChrome 70.0.3538.110, Windows 10 Home\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/14443",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/14443/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/14443/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/14443/events",
    "html_url": "https://github.com/facebook/react/issues/14443",
    "id": 391218542,
    "node_id": "MDU6SXNzdWUzOTEyMTg1NDI=",
    "number": 14443,
    "title": "Warning should appear when versions of react and react-dom do not match",
    "user": {
      "login": "mjhoffm2",
      "id": 29382626,
      "node_id": "MDQ6VXNlcjI5MzgyNjI2",
      "avatar_url": "https://avatars1.githubusercontent.com/u/29382626?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjhoffm2",
      "html_url": "https://github.com/mjhoffm2",
      "followers_url": "https://api.github.com/users/mjhoffm2/followers",
      "following_url": "https://api.github.com/users/mjhoffm2/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjhoffm2/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjhoffm2/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjhoffm2/subscriptions",
      "organizations_url": "https://api.github.com/users/mjhoffm2/orgs",
      "repos_url": "https://api.github.com/users/mjhoffm2/repos",
      "events_url": "https://api.github.com/users/mjhoffm2/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjhoffm2/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710375792,
        "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2018-12-14T18:28:45Z",
    "updated_at": "2019-01-29T22:35:39Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nRequest a feature\r\n\r\n**What is the current behavior?**\r\n\r\nIf the version of react and react-dom do not match, some features fail silently.  See this issue for example: https://github.com/reduxjs/react-redux/issues/1125\r\n\r\nIn this issue, the new Context API wasn't working as intended, but no errors or warnings were visible.  Components simply did not update.  It turns out that this issue was because I updated react to version 16.6.3, but still had react-dom at version 16.5.\r\n\r\n**What is the expected behavior?**\r\n\r\nI would like to see some sort of warning message in the console in development mode when the versions of react and react-dom do not match.\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/14398",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/14398/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/14398/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/14398/events",
    "html_url": "https://github.com/facebook/react/issues/14398",
    "id": 388264035,
    "node_id": "MDU6SXNzdWUzODgyNjQwMzU=",
    "number": 14398,
    "title": "calculating context changes in componentDidUpdate",
    "user": {
      "login": "Lexicality",
      "id": 847422,
      "node_id": "MDQ6VXNlcjg0NzQyMg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/847422?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Lexicality",
      "html_url": "https://github.com/Lexicality",
      "followers_url": "https://api.github.com/users/Lexicality/followers",
      "following_url": "https://api.github.com/users/Lexicality/following{/other_user}",
      "gists_url": "https://api.github.com/users/Lexicality/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Lexicality/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Lexicality/subscriptions",
      "organizations_url": "https://api.github.com/users/Lexicality/orgs",
      "repos_url": "https://api.github.com/users/Lexicality/repos",
      "events_url": "https://api.github.com/users/Lexicality/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Lexicality/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 121709921,
        "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
        "name": "Type: Feature Request",
        "color": "c7def8",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 17,
    "created_at": "2018-12-06T15:26:50Z",
    "updated_at": "2020-10-27T17:09:47Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nThere is no way to see if `componentDidMount` was caused by a context change\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n```typescript\r\nimport React from 'react';\r\n\r\ninterface ExampleContext {\r\n    param: string;\r\n}\r\n\r\nconst ExampleContext = React.createContext<ExampleContext>({\r\n    param: 'foo',\r\n});\r\n\r\ninterface ExampleState {\r\n    data: any;\r\n}\r\n\r\nclass Example extends React.Component<{}, ExampleState> {\r\n    static contextType = ExampleContext;\r\n    context!: ExampleContext;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            data: [],\r\n        };\r\n    }\r\n\r\n    fetchData(param: string): void {\r\n        // whatever\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchData(this.context.param);\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        // ???        \r\n    }\r\n}\r\n```\r\n**What is the expected behavior?**\r\nA 4th parameter for `previousContext`\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n16.6",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/14357",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/14357/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/14357/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/14357/events",
    "html_url": "https://github.com/facebook/react/issues/14357",
    "id": 385816884,
    "node_id": "MDU6SXNzdWUzODU4MTY4ODQ=",
    "number": 14357,
    "title": "findDOMNode deprecation",
    "user": {
      "login": "eps1lon",
      "id": 12292047,
      "node_id": "MDQ6VXNlcjEyMjkyMDQ3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/12292047?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eps1lon",
      "html_url": "https://github.com/eps1lon",
      "followers_url": "https://api.github.com/users/eps1lon/followers",
      "following_url": "https://api.github.com/users/eps1lon/following{/other_user}",
      "gists_url": "https://api.github.com/users/eps1lon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eps1lon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eps1lon/subscriptions",
      "organizations_url": "https://api.github.com/users/eps1lon/orgs",
      "repos_url": "https://api.github.com/users/eps1lon/repos",
      "events_url": "https://api.github.com/users/eps1lon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eps1lon/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 121709921,
        "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
        "name": "Type: Feature Request",
        "color": "c7def8",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 18,
    "created_at": "2018-11-29T16:24:15Z",
    "updated_at": "2020-10-15T05:31:15Z",
    "closed_at": null,
    "author_association": "COLLABORATOR",
    "active_lock_reason": null,
    "body": "## Timeline\r\n1. <= 16.3: `findDOMNode` is *discouraged* but accepted for certain use cases\r\n2. 16.3 (2018-03-28): `forwardRef` is introduced:\r\n  It can be used in HOCs to avoid using `findDOMNode` on the enhanced component\r\n3. 16.6 (2018-10-23): `findDOMNode` is deprecated in `React.StrictMode`\r\n4. 16.7.alpha (2018-10-24): `React.Concurrent` mode is released:\r\n  This mode *extends* `React.StrictMode` in a way that `findDOMNode` is deprecated in that mode too.\r\n5. 16.8 (Q2 2019): stable `React.Concurrent` mode\r\n  \r\n## findDOMNode use cases\r\nIf you have more use cases please let me know. I only started with some examples from `mui-org/material-ui`.\r\n### with a planned alternative\r\n- focus handling (React Fire, \"exploratory phase\") \r\n- passive event listeners ([facebook/react#6436]). \"Passive events will likely be a part of [React Fire].\" - [facebook/react#13525]\r\n\r\n## State of `forwardRef`\r\n`react` has 3.4M downloads/week.\r\n\r\n### `hoist-non-react-statics` (3.9M downloads/week; not clear what percentage is 2.x)\r\nA utility mainly used in HOCs and [encouraged to use in the official react docs](https://reactjs.org/docs/higher-order-components.html#static-methods-must-be-copied-over). However everyone stuck at `2.x` will likely encounter issues with `forwardRef` since that version\r\ndoes not handle any `react@^16.3` features. ^3.2.0 should have no issues apart from some minor\r\nissues with propTypes hoisting from `forwardRef` to `forwardRef`. The latest stable from zeit/next still uses that outdated version. However the latest canary for 7.0.3 does not.\r\n\r\n### react-docgen (400k downloads/week)\r\nNot recognized as a valid component definition. PR open at [reactjs/react-docgen#311].\r\n\r\n### react-redux (1.4M downloads/week)\r\n`connect` does properly forward their refs in the beta release of 6.x. No timeline for stable release given\r\nhowever 3 betas have already been released so it's probably soon.\r\n\r\n### react-router (1.4M downloads/week)\r\n`withRouter` is planned to forward refs ([ReactTraining/react-router#6056#issuecomment-435524678]).\r\nHowever no comment about the other components and no major release candidate is published.\r\n\r\n### display name\r\n`React.forwardRef` components are recognized by `react-devtools`. However when wrapped\r\nin a HOC it's very likely that the display name is lost. See [facebook/react#14319]\r\n\r\n### The issue\r\n**Assumptions:**\r\n- you are not in control of your whole component tree i.e. you use components from 3rd party libraries\r\n- you want to use `React.ConcurrentMode`\r\n- Usable includes production and development. It specifically means for development that deprecation warnings in a component\r\n  make that component not usable in development mode because of all the *noise* it adds in those cases.\r\n  *Noise* because it's not actionable if that component is from a 3rd party library.\r\n\r\nIf none of those applies to you then you probably don't have an issue with `findDOMNode` deprecation.\r\n\r\nThe mode of a partial tree can only be made more restrictive but not loosened up. If\r\nyou wrap your tree in `React.StrictMode` and use a component from a 3rd party library\r\nthat 3rd party library has to be `React.StrictMode` compliant too. \r\n\r\nThis means that you can't use `React.StrictMode` effectiveley. This might be ok since it's for development only anyway and has no implications for production. However Concurrent mode can have actual implications for production.  Since it is new and the community wants to use new things libraries have to make sure that they are strict mode compliant too.\r\n\r\nIn addition between the relase of an alternative in the form of `React.forwardRef` and the deprecation only 7 months have passed. One could argue that this is plenty of time but (at least from my perspective) the work on migrating from `findDOMNode` to refs and `forwardRef` was postponed because `findDOMNode` was not deprecated yet.  However the actual deprecation happened one day before the release of `unstable_ConcurrentMode` virtually giving no time to migrate. ~We'll have to see when a stable `16.7` release will happen but assuming this happens today only a month has passed between deprecation and *virtual* removal.~ [React 16.x Roadmap] was release pointing towards Q2 2019 as a release date of stable `React.Concurrent` mode. This relaxes pressure for library maintainers quite a bit IMO.\r\n\r\n### Conclusion\r\nRefs are not a viable upgrade path to replace `findDOMNode` yet. \r\nUntil refs are usable without headaches from forwarding refs `findDOMNode` should be undeprecated.\r\n\r\n## Releated\r\n- [forwarding Refs guide on official react docs](https://reactjs.org/docs/forwarding-refs.html)\r\n- [findDOMNode API documentation](https://reactjs.org/docs/react-dom.html#finddomnode) (includes arguments against usage)\r\n- [pull request that deprecated findDOMNode](https://github.com/facebook/react/pull/13841)\r\n\r\n[facebook/react#6436]: https://github.com/facebook/react/issues/6436\r\n[facebook/react#13525]: https://github.com/facebook/react/issues/13525\r\n[facebook/react#14319]: https://github.com/facebook/react/issues/14319\r\n[reactjs/react-docgen#311]: https://github.com/reactjs/react-docgen/pull/311\r\n[ReactTraining/react-router#6056#issuecomment-435524678]: https://github.com/ReactTraining/react-router/issues/6056#issuecomment-435524678\r\n[React 16.x Roadmap]: https://reactjs.org/blog/2018/11/27/react-16-roadmap.html",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/14356",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/14356/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/14356/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/14356/events",
    "html_url": "https://github.com/facebook/react/issues/14356",
    "id": 385733855,
    "node_id": "MDU6SXNzdWUzODU3MzM4NTU=",
    "number": 14356,
    "title": "Sometimes controlled email inputs break in Chrome due to punycoding",
    "user": {
      "login": "Bastian",
      "id": 5033001,
      "node_id": "MDQ6VXNlcjUwMzMwMDE=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/5033001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Bastian",
      "html_url": "https://github.com/Bastian",
      "followers_url": "https://api.github.com/users/Bastian/followers",
      "following_url": "https://api.github.com/users/Bastian/following{/other_user}",
      "gists_url": "https://api.github.com/users/Bastian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Bastian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Bastian/subscriptions",
      "organizations_url": "https://api.github.com/users/Bastian/orgs",
      "repos_url": "https://api.github.com/users/Bastian/repos",
      "events_url": "https://api.github.com/users/Bastian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Bastian/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 127893911,
        "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
        "name": "Component: DOM",
        "color": "fef2c0",
        "default": false,
        "description": null
      },
      {
        "id": 40929151,
        "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
        "name": "Type: Bug",
        "color": "b60205",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2018-11-29T13:22:22Z",
    "updated_at": "2020-06-18T19:51:13Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nReport a  bug\r\n\r\n**What is the current behavior?**\r\n\r\nIn Chrome, when typing a sharp S (ÃŸ, a German letter) in an input field with `type=\"email\"`, it converts the `ÃŸ` to `ss` (~~expected~~ unexpected behaviour) and the cursor jumps back to the beginning of the input field (unexpected behaviour). This does only happen if the `ÃŸ` is part of the domain.\r\nTrying to type `test@testÃŸ.de` will end as `.detest@testss`:\r\n![Example](https://i.imgur.com/SWQ0p4f.gif)\r\n\r\nIt can be tested with the latest Google Chrome: \r\nhttps://codepen.io/anon/pen/MzzEqB\r\nIf you don't have a `ÃŸ` on your keyboard, you can reproduce the bug by just Copy&Pasting it.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nTested with Chrome Version 70.0.3538.110 (Official Build) (64-bit) on Ubuntu 18.04 and React 16.6.3\r\n\r\nIn Firefox, this does not happen, as it does not convert `ÃŸ` to `ss`. I didn't test other browsers.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/14342",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/14342/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/14342/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/14342/events",
    "html_url": "https://github.com/facebook/react/issues/14342",
    "id": 385132578,
    "node_id": "MDU6SXNzdWUzODUxMzI1Nzg=",
    "number": 14342,
    "title": "Fail to render input in a separate window on Edge",
    "user": {
      "login": "haojy",
      "id": 2277444,
      "node_id": "MDQ6VXNlcjIyNzc0NDQ=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2277444?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/haojy",
      "html_url": "https://github.com/haojy",
      "followers_url": "https://api.github.com/users/haojy/followers",
      "following_url": "https://api.github.com/users/haojy/following{/other_user}",
      "gists_url": "https://api.github.com/users/haojy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/haojy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/haojy/subscriptions",
      "organizations_url": "https://api.github.com/users/haojy/orgs",
      "repos_url": "https://api.github.com/users/haojy/repos",
      "events_url": "https://api.github.com/users/haojy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/haojy/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 69105383,
        "node_id": "MDU6TGFiZWw2OTEwNTM4Mw==",
        "url": "https://api.github.com/repos/facebook/react/labels/Browser:%20IE",
        "name": "Browser: IE",
        "color": "c7def8",
        "default": false,
        "description": null
      },
      {
        "id": 127893911,
        "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
        "name": "Component: DOM",
        "color": "fef2c0",
        "default": false,
        "description": null
      },
      {
        "id": 710722093,
        "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
        "name": "Type: Needs Investigation",
        "color": "fbca04",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2018-11-28T07:15:54Z",
    "updated_at": "2020-01-09T07:15:40Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nOn Edge, when to render any <input> components in a separate window, it comes to react-dom error for `<input>`, and JS error like\r\n\r\n> SCRIPT5673: Unknown runtime error\r\n\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. \r\n\r\n`window.open` dose not work well on JSFiddle or CodeSandbox, so put a page link to reproduce the behavior\r\n\r\nhttps://haojy.github.io/issues/input-error-in-separate-window.html\r\n\r\n**What is the expected behavior?**\r\n\r\n`<input>` component should be rendered as expected without errors\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact: v16.6.3 and V16.3.0\r\nbrowser:\r\n- only on Edge v42\r\n- works well on IE 11/Chrome 70/Safari 12",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/14337",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/14337/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/14337/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/14337/events",
    "html_url": "https://github.com/facebook/react/issues/14337",
    "id": 384982771,
    "node_id": "MDU6SXNzdWUzODQ5ODI3NzE=",
    "number": 14337,
    "title": "[react-dom] getEventKey has IE11 key mapping issue",
    "user": {
      "login": "icfantv",
      "id": 370054,
      "node_id": "MDQ6VXNlcjM3MDA1NA==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/370054?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/icfantv",
      "html_url": "https://github.com/icfantv",
      "followers_url": "https://api.github.com/users/icfantv/followers",
      "following_url": "https://api.github.com/users/icfantv/following{/other_user}",
      "gists_url": "https://api.github.com/users/icfantv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/icfantv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/icfantv/subscriptions",
      "organizations_url": "https://api.github.com/users/icfantv/orgs",
      "repos_url": "https://api.github.com/users/icfantv/repos",
      "events_url": "https://api.github.com/users/icfantv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/icfantv/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 69105383,
        "node_id": "MDU6TGFiZWw2OTEwNTM4Mw==",
        "url": "https://api.github.com/repos/facebook/react/labels/Browser:%20IE",
        "name": "Browser: IE",
        "color": "c7def8",
        "default": false,
        "description": null
      },
      {
        "id": 127893911,
        "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
        "name": "Component: DOM",
        "color": "fef2c0",
        "default": false,
        "description": null
      },
      {
        "id": 710722093,
        "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
        "name": "Type: Needs Investigation",
        "color": "fbca04",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2018-11-27T20:57:59Z",
    "updated_at": "2020-01-10T17:01:15Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug (possibly)\r\n\r\n**What is the current behavior?**\r\n\r\nThis may, in fact, fall under the purview of `Only special keys are supported, all others depend on keyboard layout or browser` but figured I'd enter this to be sure.  Additionally, the bookmark in the link specified in the `@see` comment is no longer valid so I can't confirm the official list of keys.  Looking at [the latest version of the spec](https://www.w3.org/TR/uievents/#determine-keydown-keyup-keyCode), the key in question appears in the `Optionally fixed virtual keys` section rather than the `Fixed virtual keys` section, but then, none of the 1xx keys appear at all in the fixed list.\r\n\r\nThe `translateToKey` hash in the `react-dom` package's `getEventKey` function appears to be missing the `-` (dash) key.  When used with CTRL+SHIFT, this key (and probably others) is reported as `Unidentified` in IE11 and since it's not in the `translateToKey` map, returns back to the code as `Unidentified` which breaks keyboard shortcut handling.\r\n\r\nThis can be seen by navigating to https://w3c.github.io/uievents/tools/key-event-viewer.html and in IE11, pressing `CTRL + SHIFT + -` (note that you will need to check `keydown` under `preventDefault` in the options table or the browser will zoom out.\r\n\r\n**What is the expected behavior?**\r\n\r\nIf it's a bug, it shouldn't allow resolution to just fall through back to the browser.  If it's not, then the code is correct - but then requires special handling.\r\n\r\nIf I add `'189': '-'` to the hash, it works...on a US Keyboard.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nTested on React 16.6.1 in IE11 on Windows.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/14319",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/14319/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/14319/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/14319/events",
    "html_url": "https://github.com/facebook/react/issues/14319",
    "id": 384019382,
    "node_id": "MDU6SXNzdWUzODQwMTkzODI=",
    "number": 14319,
    "title": "API for display name on forwardRef, memo and potential future exotic components",
    "user": {
      "login": "eps1lon",
      "id": 12292047,
      "node_id": "MDQ6VXNlcjEyMjkyMDQ3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/12292047?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eps1lon",
      "html_url": "https://github.com/eps1lon",
      "followers_url": "https://api.github.com/users/eps1lon/followers",
      "following_url": "https://api.github.com/users/eps1lon/following{/other_user}",
      "gists_url": "https://api.github.com/users/eps1lon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eps1lon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eps1lon/subscriptions",
      "organizations_url": "https://api.github.com/users/eps1lon/orgs",
      "repos_url": "https://api.github.com/users/eps1lon/repos",
      "events_url": "https://api.github.com/users/eps1lon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eps1lon/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 121709921,
        "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
        "name": "Type: Feature Request",
        "color": "c7def8",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 14,
    "created_at": "2018-11-24T20:28:16Z",
    "updated_at": "2020-07-18T09:24:57Z",
    "closed_at": null,
    "author_association": "COLLABORATOR",
    "active_lock_reason": null,
    "body": "TL;DR: Can you expose [shared/getComponentName](https://github.com/facebook/react/blob/master/packages/shared/getComponentName.js)?\r\n\r\n<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nExpose an API to get the display name of every component (in `__DEV__` only).\r\n\r\n**What is the current behavior?**\r\nMost of the ecosystem still uses `Component.displayName || Component.name || someFallbackName` \r\n (with some branching depending on the type of `Component`) when setting the display name of an enhanced component i.e. `connect()(WrappedComponent)` will result in `\"connect(WrappedComponent)\"` as a `displayName`.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\nSince components created by `forwardRef` or `memo` are not actual functions these higher-order components are not able to determine a proper display name while `react-devtools` is able to:\r\n\r\nhttps://codesandbox.io/s/zqj9v50243\r\n\r\n- `react-redux` creates `\"connect(Component)\"`\r\n- `react-router` creates `\"withRouter(undefined)\"`\r\n\r\n**What is the expected behavior?**\r\nThe new \"exotic-components\" should work with the existing 3rd party libraries WRT to `displayName`.\r\n\r\nNow there are a couple of solutions to this issue:\r\n1. **Edit:** Expose [shared/getComponentName](https://github.com/facebook/react/blob/master/packages/shared/getComponentName.js)\r\n2. This is the responsibility of the ecosystem. It should provide a solution and maintain it. Somewhat blocked by #12882, related: #12932\r\n3. Grant access to the functionality used in `react-devtools` (or would this only work on the fibers?)\r\n4. Set a `name` (or `displayName` no preference here) property on those \"exotic-components\" (don't know how to call them). Naive implementation e.g.: `name: 'ForwardRef(' + fn.name + ')'`.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nI guess this started with `forwardRef` in 16.3.\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/14292",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/14292/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/14292/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/14292/events",
    "html_url": "https://github.com/facebook/react/issues/14292",
    "id": 382670740,
    "node_id": "MDU6SXNzdWUzODI2NzA3NDA=",
    "number": 14292,
    "title": "Provide a way to pass context to renderToStaticMarkup on the client",
    "user": {
      "login": "gaearon",
      "id": 810438,
      "node_id": "MDQ6VXNlcjgxMDQzOA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gaearon",
      "html_url": "https://github.com/gaearon",
      "followers_url": "https://api.github.com/users/gaearon/followers",
      "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
      "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
      "organizations_url": "https://api.github.com/users/gaearon/orgs",
      "repos_url": "https://api.github.com/users/gaearon/repos",
      "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gaearon/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 739761016,
        "node_id": "MDU6TGFiZWw3Mzk3NjEwMTY=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler",
        "name": "Component: Reconciler",
        "color": "f9a798",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      },
      {
        "id": 121709921,
        "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
        "name": "Type: Feature Request",
        "color": "c7def8",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2018-11-20T13:47:08Z",
    "updated_at": "2020-01-08T19:14:36Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "See https://github.com/facebook/react/issues/14287#issuecomment-440277999 and https://github.com/facebook/react/pull/14182#issuecomment-440125029. This accidentally worked for a few releases but was a bug. However we might want to consider actually supporting this with an opt-in API.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/14285",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/14285/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/14285/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/14285/events",
    "html_url": "https://github.com/facebook/react/issues/14285",
    "id": 382486022,
    "node_id": "MDU6SXNzdWUzODI0ODYwMjI=",
    "number": 14285,
    "title": "Warn when calling dispatch() from useEffect() cleanup function on unmounting",
    "user": {
      "login": "merongmerongmerong",
      "id": 42024113,
      "node_id": "MDQ6VXNlcjQyMDI0MTEz",
      "avatar_url": "https://avatars3.githubusercontent.com/u/42024113?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/merongmerongmerong",
      "html_url": "https://github.com/merongmerongmerong",
      "followers_url": "https://api.github.com/users/merongmerongmerong/followers",
      "following_url": "https://api.github.com/users/merongmerongmerong/following{/other_user}",
      "gists_url": "https://api.github.com/users/merongmerongmerong/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/merongmerongmerong/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/merongmerongmerong/subscriptions",
      "organizations_url": "https://api.github.com/users/merongmerongmerong/orgs",
      "repos_url": "https://api.github.com/users/merongmerongmerong/repos",
      "events_url": "https://api.github.com/users/merongmerongmerong/events{/privacy}",
      "received_events_url": "https://api.github.com/users/merongmerongmerong/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1109410193,
        "node_id": "MDU6TGFiZWwxMTA5NDEwMTkz",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Hooks",
        "name": "Component: Hooks",
        "color": "c2f27b",
        "default": false,
        "description": ""
      },
      {
        "id": 710375792,
        "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 14,
    "created_at": "2018-11-20T03:34:44Z",
    "updated_at": "2019-03-15T08:36:24Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nbug\r\n\r\n**What is the current behavior?**\r\n\r\naction dispatched in return callback of `useEffect` seem to not work\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://codesandbox.io/s/5yqmo128v4\r\n\r\nonly foo -> baz is logged\r\n\r\n```javascript\r\nimport React, { useState, useEffect, useReducer } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport \"./styles.css\";\r\n\r\nfunction reducer(state, action) {\r\n  console.log(\"bar\", action); // not logged\r\n  // debugger\r\n  return state;\r\n}\r\n\r\nfunction Foo({ value }) {\r\n  const [state, dispatch] = useReducer(reducer, {});\r\n\r\n  useEffect(\r\n    () => {\r\n      return () => {\r\n        console.log(\"foo\");\r\n        // debugger\r\n        dispatch({ type: \"foo\" });\r\n        // debugger\r\n        console.log(\"baz\");\r\n      };\r\n    },\r\n    [state, value]\r\n  );\r\n\r\n  return <p>{value}</p>;\r\n}\r\n\r\nfunction App() {\r\n  const [value, set] = useState(0);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <button onClick={() => set(value + 1)}>INC</button>\r\n      {value % 2 ? <Foo value={value} /> : null}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);\r\n```\r\n\r\n**What is the expected behavior?**\r\nbar is logged in console\r\n(foo -> baz -> bar`action`)\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nreact: \"16.7.0-alpha.2\",\r\nreact-dom: \"16.7.0-alpha.2\"\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/14213",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/14213/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/14213/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/14213/events",
    "html_url": "https://github.com/facebook/react/issues/14213",
    "id": 380109743,
    "node_id": "MDU6SXNzdWUzODAxMDk3NDM=",
    "number": 14213,
    "title": "Textarea loses focus after inserting paired punctuation with Chinese IME",
    "user": {
      "login": "ghost",
      "id": 10137,
      "node_id": "MDQ6VXNlcjEwMTM3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/10137?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ghost",
      "html_url": "https://github.com/ghost",
      "followers_url": "https://api.github.com/users/ghost/followers",
      "following_url": "https://api.github.com/users/ghost/following{/other_user}",
      "gists_url": "https://api.github.com/users/ghost/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ghost/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
      "organizations_url": "https://api.github.com/users/ghost/orgs",
      "repos_url": "https://api.github.com/users/ghost/repos",
      "events_url": "https://api.github.com/users/ghost/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ghost/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 127893911,
        "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
        "name": "Component: DOM",
        "color": "fef2c0",
        "default": false,
        "description": null
      },
      {
        "id": 40929151,
        "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
        "name": "Type: Bug",
        "color": "b60205",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2018-11-13T08:26:59Z",
    "updated_at": "2018-11-15T03:06:55Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n\r\n**What is the current behavior?**\r\nTextarea lose focus after insert paired punctuation by \"Chinese-Pinyin 10 key\" input source on IOS safari. And then textarea can't be focused when I click it. But after other element has been focused, the textarea could be focused again.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n[CodeSandbox Demo](https://codesandbox.io/s/7w23wpl0q1)\r\n\r\n[steps(youtube video)](https://youtu.be/4PJ2WVD83Eg)\r\n\r\n**What is the expected behavior?**\r\njust work fine!\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nversions of React: 16+\r\nOS: IOS\r\nbrowser: safari\r\n\r\n\r\n\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/14170",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/14170/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/14170/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/14170/events",
    "html_url": "https://github.com/facebook/react/issues/14170",
    "id": 379051587,
    "node_id": "MDU6SXNzdWUzNzkwNTE1ODc=",
    "number": 14170,
    "title": "react-test-renderer doesn't support Suspense and lazy nodes",
    "user": {
      "login": "Dem0n13",
      "id": 1087430,
      "node_id": "MDQ6VXNlcjEwODc0MzA=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1087430?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dem0n13",
      "html_url": "https://github.com/Dem0n13",
      "followers_url": "https://api.github.com/users/Dem0n13/followers",
      "following_url": "https://api.github.com/users/Dem0n13/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dem0n13/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dem0n13/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dem0n13/subscriptions",
      "organizations_url": "https://api.github.com/users/Dem0n13/orgs",
      "repos_url": "https://api.github.com/users/Dem0n13/repos",
      "events_url": "https://api.github.com/users/Dem0n13/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dem0n13/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 40929151,
        "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
        "name": "Type: Bug",
        "color": "b60205",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2018-11-09T07:27:53Z",
    "updated_at": "2019-08-18T20:00:33Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Hello. How can I test components with Suspense/Lazy?\r\nnow renderer.create(...)toTree() throws\r\n\"toTree() does not yet know how to handle nodes with tag=13\"\r\n\r\nreact 16.6.1\r\nreact-test-renderer 16.6.1",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/14168",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/14168/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/14168/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/14168/events",
    "html_url": "https://github.com/facebook/react/issues/14168",
    "id": 379028337,
    "node_id": "MDU6SXNzdWUzNzkwMjgzMzc=",
    "number": 14168,
    "title": "Input type email bug",
    "user": {
      "login": "dominicarrojado",
      "id": 6789191,
      "node_id": "MDQ6VXNlcjY3ODkxOTE=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/6789191?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dominicarrojado",
      "html_url": "https://github.com/dominicarrojado",
      "followers_url": "https://api.github.com/users/dominicarrojado/followers",
      "following_url": "https://api.github.com/users/dominicarrojado/following{/other_user}",
      "gists_url": "https://api.github.com/users/dominicarrojado/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dominicarrojado/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dominicarrojado/subscriptions",
      "organizations_url": "https://api.github.com/users/dominicarrojado/orgs",
      "repos_url": "https://api.github.com/users/dominicarrojado/repos",
      "events_url": "https://api.github.com/users/dominicarrojado/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dominicarrojado/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 127893911,
        "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
        "name": "Component: DOM",
        "color": "fef2c0",
        "default": false,
        "description": null
      },
      {
        "id": 710722093,
        "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
        "name": "Type: Needs Investigation",
        "color": "fbca04",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 10,
    "created_at": "2018-11-09T05:28:29Z",
    "updated_at": "2020-07-04T15:52:08Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "https://codepen.io/anon/pen/GwZeNO\r\n\r\nOpen this codepen and paste this \"example@gmail.com 1\"\r\nThen press backspace, notice that the focus changes to the beginning of the input.\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/14125",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/14125/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/14125/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/14125/events",
    "html_url": "https://github.com/facebook/react/issues/14125",
    "id": 377987649,
    "node_id": "MDU6SXNzdWUzNzc5ODc2NDk=",
    "number": 14125,
    "title": "Autofocus Text puts cursor at end instead of beginning",
    "user": {
      "login": "Matthew-Goldberg",
      "id": 24279057,
      "node_id": "MDQ6VXNlcjI0Mjc5MDU3",
      "avatar_url": "https://avatars1.githubusercontent.com/u/24279057?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Matthew-Goldberg",
      "html_url": "https://github.com/Matthew-Goldberg",
      "followers_url": "https://api.github.com/users/Matthew-Goldberg/followers",
      "following_url": "https://api.github.com/users/Matthew-Goldberg/following{/other_user}",
      "gists_url": "https://api.github.com/users/Matthew-Goldberg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Matthew-Goldberg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Matthew-Goldberg/subscriptions",
      "organizations_url": "https://api.github.com/users/Matthew-Goldberg/orgs",
      "repos_url": "https://api.github.com/users/Matthew-Goldberg/repos",
      "events_url": "https://api.github.com/users/Matthew-Goldberg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Matthew-Goldberg/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 127893911,
        "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
        "name": "Component: DOM",
        "color": "fef2c0",
        "default": false,
        "description": null
      },
      {
        "id": 178761159,
        "node_id": "MDU6TGFiZWwxNzg3NjExNTk=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Regression",
        "name": "Type: Regression",
        "color": "e11d21",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 10,
    "created_at": "2018-11-06T18:57:12Z",
    "updated_at": "2020-03-25T07:45:56Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nIn React 16, a text input with a value and autofocus will set the cursor at the _end_ of the input.\r\n`<input autoFocus={true} type=\"text\" defaultValue=\"4444\" />`\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nSee the React 16 repro here: https://codepen.io/matthewg0/pen/XymjYo\r\n\r\n**What is the expected behavior?**\r\nIn React 15, and in plain HTML, the behavior is that the cursor is placed at the _start_ of the input.\r\nReact 15: https://codepen.io/matthewg0/pen/NEGRzv\r\nPlain HTML: https://codepen.io/matthewg0/pen/wQKoap\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReproduces as of React 16.  Worked as expected in React 15.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/14099",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/14099/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/14099/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/14099/events",
    "html_url": "https://github.com/facebook/react/issues/14099",
    "id": 377440465,
    "node_id": "MDU6SXNzdWUzNzc0NDA0NjU=",
    "number": 14099,
    "title": "useCallback() invalidates too often in practice",
    "user": {
      "login": "gaearon",
      "id": 810438,
      "node_id": "MDQ6VXNlcjgxMDQzOA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gaearon",
      "html_url": "https://github.com/gaearon",
      "followers_url": "https://api.github.com/users/gaearon/followers",
      "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
      "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
      "organizations_url": "https://api.github.com/users/gaearon/orgs",
      "repos_url": "https://api.github.com/users/gaearon/repos",
      "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gaearon/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1109410193,
        "node_id": "MDU6TGFiZWwxMTA5NDEwMTkz",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Hooks",
        "name": "Component: Hooks",
        "color": "c2f27b",
        "default": false,
        "description": ""
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 66,
    "created_at": "2018-11-05T15:06:53Z",
    "updated_at": "2020-07-16T09:40:09Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "This is related to https://github.com/facebook/react/issues/14092, https://github.com/facebook/react/issues/14066, https://github.com/reactjs/rfcs/issues/83, and some other issues.\r\n\r\nThe problem is that we often want to avoid invalidating a callback (e.g. to preserve shallow equality below or to avoid re-subscriptions in the effects). But if it depends on props or state, it's likely it'll invalidate too often. See https://github.com/facebook/react/issues/14092#issuecomment-435907249 for current workarounds.\r\n\r\n`useReducer` doesn't suffer from this because the reducer is evaluated directly in the render phase. @sebmarkbage had an idea about giving `useCallback` similar semantics but it'll likely require complex implementation work. Seems like we'd have to do _something_ like this though.\r\n\r\nI'm filing this just to acknowledge the issue exists, and to track further work on this.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/14057",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/14057/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/14057/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/14057/events",
    "html_url": "https://github.com/facebook/react/issues/14057",
    "id": 376232772,
    "node_id": "MDU6SXNzdWUzNzYyMzI3NzI=",
    "number": 14057,
    "title": "Unexpected copies of the props object retained in memory with the new hooks API",
    "user": {
      "login": "localvoid",
      "id": 132045,
      "node_id": "MDQ6VXNlcjEzMjA0NQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/132045?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/localvoid",
      "html_url": "https://github.com/localvoid",
      "followers_url": "https://api.github.com/users/localvoid/followers",
      "following_url": "https://api.github.com/users/localvoid/following{/other_user}",
      "gists_url": "https://api.github.com/users/localvoid/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/localvoid/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/localvoid/subscriptions",
      "organizations_url": "https://api.github.com/users/localvoid/orgs",
      "repos_url": "https://api.github.com/users/localvoid/repos",
      "events_url": "https://api.github.com/users/localvoid/events{/privacy}",
      "received_events_url": "https://api.github.com/users/localvoid/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 739761016,
        "node_id": "MDU6TGFiZWw3Mzk3NjEwMTY=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler",
        "name": "Component: Reconciler",
        "color": "f9a798",
        "default": false,
        "description": null
      },
      {
        "id": 710722093,
        "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
        "name": "Type: Needs Investigation",
        "color": "fbca04",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2018-11-01T02:48:53Z",
    "updated_at": "2020-01-11T16:36:25Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nbug\r\n\r\n**What is the current behavior?**\r\n\r\n```jsx\r\nfunction useCustomHook1() {\r\n  useEffect(() => {\r\n    console.log(\"mounted\");\r\n    return () => {\r\n      console.log(\"unmounted\");\r\n    };\r\n  }, []);\r\n}\r\n\r\nfunction Test3(props) {\r\n  useCustomHook1();\r\n  useEffect(() => {\r\n    console.log(props.test);\r\n  });\r\n\r\n  return <div onClick={() => console.log(props.test)}>{props.items.length}</div>;\r\n}\r\n```\r\n\r\n`props` object that were used when component was rendered for the first time is kept alive. Completely unexpected behavior even when developer understands [closure context sharing](https://mrale.ph/blog/2012/09/23/grokking-v8-closures-for-fun.html).\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://codesandbox.io/s/lz61v39r7\r\n\r\n- Select test **3** \r\n- Click on the button \"Create New Array\" 5 times\r\n- Take memory snapshot in the developer tools\r\n- Inspect (array) objects\r\n- There will be 4 arrays retained in memory `t0`, `t-2`, `t-1`, `t`\r\n\r\n**What is the expected behavior?**\r\n\r\nShould be 2 arrays retained in memory `t-1`, `t`.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/14049",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/14049/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/14049/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/14049/events",
    "html_url": "https://github.com/facebook/react/issues/14049",
    "id": 376140752,
    "node_id": "MDU6SXNzdWUzNzYxNDA3NTI=",
    "number": 14049,
    "title": "Using both getDerivedStateFromError and getDerivedStateFromProps can be a foot gun",
    "user": {
      "login": "blixt",
      "id": 158591,
      "node_id": "MDQ6VXNlcjE1ODU5MQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/158591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/blixt",
      "html_url": "https://github.com/blixt",
      "followers_url": "https://api.github.com/users/blixt/followers",
      "following_url": "https://api.github.com/users/blixt/following{/other_user}",
      "gists_url": "https://api.github.com/users/blixt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/blixt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/blixt/subscriptions",
      "organizations_url": "https://api.github.com/users/blixt/orgs",
      "repos_url": "https://api.github.com/users/blixt/repos",
      "events_url": "https://api.github.com/users/blixt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/blixt/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710375792,
        "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2018-10-31T20:10:47Z",
    "updated_at": "2020-09-15T11:28:27Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature\r\n\r\n**What is the current behavior?**\r\n\r\nIf `componentDidCatch` and/or `getDerivedStateFromError` put the component in a state that avoids the cause of the error, and `getDerivedStateFromProps` reverts that state change, the error boundary will (obviously) fail to avert disaster.\r\n\r\nhttps://codesandbox.io/s/pj0lwxk15j\r\n\r\nIt sounds very obvious when simplified like this, but when my team updated to React 16.5.x (and 16.6.0), suddenly this started happening for us. So something changed internally, but it's hard to pinpoint what. Unfortunately I haven't been able to create a small repro for that specific case that works in 16.4.2 but not 16.5.0 â€“ so I'm making this issue about avoiding the cause in the first place.\r\n\r\n**What is the expected behavior?**\r\n\r\nNaively, my thinking is that because errors are more exceptional, let the state from error handlers take precedence. Probably there's a reason why this can't happen so a warning of some kind when this can happen would be nice. Two ways to do this comes to mind:\r\n\r\n1. Cross-check that keys in state from `getDerivedStateFromProps` or `setState` in `componentDidCatch` don't collide with `getDerivedStateFromError` (sounds a bit far fetched?)\r\n2. Be more explicit in documentation for error boundaries about how `getDerivedStateFromProps` will run last so that a developer can consider this case\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.5.0 and up (16.4.2 behaves a bit differently â€“ see above), all platforms/browsers.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/13991",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/13991/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/13991/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/13991/events",
    "html_url": "https://github.com/facebook/react/issues/13991",
    "id": 374587589,
    "node_id": "MDU6SXNzdWUzNzQ1ODc1ODk=",
    "number": 13991,
    "title": "Hooks + multiple instances of React",
    "user": {
      "login": "brunolemos",
      "id": 619186,
      "node_id": "MDQ6VXNlcjYxOTE4Ng==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/619186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brunolemos",
      "html_url": "https://github.com/brunolemos",
      "followers_url": "https://api.github.com/users/brunolemos/followers",
      "following_url": "https://api.github.com/users/brunolemos/following{/other_user}",
      "gists_url": "https://api.github.com/users/brunolemos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brunolemos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brunolemos/subscriptions",
      "organizations_url": "https://api.github.com/users/brunolemos/orgs",
      "repos_url": "https://api.github.com/users/brunolemos/repos",
      "events_url": "https://api.github.com/users/brunolemos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brunolemos/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1109410193,
        "node_id": "MDU6TGFiZWwxMTA5NDEwMTkz",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Hooks",
        "name": "Component: Hooks",
        "color": "c2f27b",
        "default": false,
        "description": ""
      },
      {
        "id": 710375792,
        "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 278,
    "created_at": "2018-10-27T00:34:08Z",
    "updated_at": "2020-10-29T11:30:44Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "# To people coming from search: please [read this page first](https://reactjs.org/warnings/invalid-hook-call-warning.html). It contains most common possible fixes!\r\n\r\n\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nEnhancement\r\n\r\n**What is the current behavior?**\r\n\r\nI had multiple instances of React by mistake.\r\n\r\nWhen trying to use hooks, got this error:\r\n`hooks can only be called inside the body of a function component`\r\n\r\nWhich is not correct since I was using function components. Took me a while to find the real cause of the issue.\r\n\r\n**What is the expected behavior?**\r\n\r\nShow the correct error message. Maybe detect that the app has multiple instances of React and say that it may be the reason of bugs. ",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/13989",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/13989/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/13989/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/13989/events",
    "html_url": "https://github.com/facebook/react/issues/13989",
    "id": 374451049,
    "node_id": "MDU6SXNzdWUzNzQ0NTEwNDk=",
    "number": 13989,
    "title": "nextContext arg in shouldComponentUpdate() method",
    "user": {
      "login": "konsultacijos",
      "id": 25863232,
      "node_id": "MDQ6VXNlcjI1ODYzMjMy",
      "avatar_url": "https://avatars3.githubusercontent.com/u/25863232?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/konsultacijos",
      "html_url": "https://github.com/konsultacijos",
      "followers_url": "https://api.github.com/users/konsultacijos/followers",
      "following_url": "https://api.github.com/users/konsultacijos/following{/other_user}",
      "gists_url": "https://api.github.com/users/konsultacijos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/konsultacijos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/konsultacijos/subscriptions",
      "organizations_url": "https://api.github.com/users/konsultacijos/orgs",
      "repos_url": "https://api.github.com/users/konsultacijos/repos",
      "events_url": "https://api.github.com/users/konsultacijos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/konsultacijos/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 739761016,
        "node_id": "MDU6TGFiZWw3Mzk3NjEwMTY=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler",
        "name": "Component: Reconciler",
        "color": "f9a798",
        "default": false,
        "description": null
      },
      {
        "id": 710722093,
        "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
        "name": "Type: Needs Investigation",
        "color": "fbca04",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2018-10-26T16:09:52Z",
    "updated_at": "2020-01-16T20:21:43Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nI think it is feature, but could be a bug also\r\n\r\n**What is the current behavior?**\r\nWhen I subscribe to context using React16.6.0 contextType API, component rerenders even when unused context properties was changed. So, I want to use shouldComponentUpdate(), but that method don't have nextContext argument.\r\n\r\nIs there any other way to solve this problem?\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n**What is the expected behavior?**\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/13986",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/13986/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/13986/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/13986/events",
    "html_url": "https://github.com/facebook/react/pull/13986",
    "id": 374380406,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MjI2MDk1MzUz",
    "number": 13986,
    "title": "Add errorInfo and prevState parameters to getDerivedStateFromError",
    "user": {
      "login": "bisubus",
      "id": 2905949,
      "node_id": "MDQ6VXNlcjI5MDU5NDk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/2905949?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bisubus",
      "html_url": "https://github.com/bisubus",
      "followers_url": "https://api.github.com/users/bisubus/followers",
      "following_url": "https://api.github.com/users/bisubus/following{/other_user}",
      "gists_url": "https://api.github.com/users/bisubus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bisubus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bisubus/subscriptions",
      "organizations_url": "https://api.github.com/users/bisubus/orgs",
      "repos_url": "https://api.github.com/users/bisubus/repos",
      "events_url": "https://api.github.com/users/bisubus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bisubus/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 14,
    "created_at": "2018-10-26T13:19:04Z",
    "updated_at": "2020-10-12T02:02:59Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/13986",
      "html_url": "https://github.com/facebook/react/pull/13986",
      "diff_url": "https://github.com/facebook/react/pull/13986.diff",
      "patch_url": "https://github.com/facebook/react/pull/13986.patch"
    },
    "body": "Improves #13746 by providing `getDerivedStateFromError` with both `error` and `errorInfo` params that are available in `componentDidCatch`.\r\nCloses #13954.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/13970",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/13970/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/13970/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/13970/events",
    "html_url": "https://github.com/facebook/react/issues/13970",
    "id": 374044177,
    "node_id": "MDU6SXNzdWUzNzQwNDQxNzc=",
    "number": 13970,
    "title": "16.6 contextType + getDerivedStateFromProps",
    "user": {
      "login": "natew",
      "id": 12100,
      "node_id": "MDQ6VXNlcjEyMTAw",
      "avatar_url": "https://avatars0.githubusercontent.com/u/12100?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/natew",
      "html_url": "https://github.com/natew",
      "followers_url": "https://api.github.com/users/natew/followers",
      "following_url": "https://api.github.com/users/natew/following{/other_user}",
      "gists_url": "https://api.github.com/users/natew/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/natew/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/natew/subscriptions",
      "organizations_url": "https://api.github.com/users/natew/orgs",
      "repos_url": "https://api.github.com/users/natew/repos",
      "events_url": "https://api.github.com/users/natew/events{/privacy}",
      "received_events_url": "https://api.github.com/users/natew/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 121709921,
        "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
        "name": "Type: Feature Request",
        "color": "c7def8",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 10,
    "created_at": "2018-10-25T17:04:42Z",
    "updated_at": "2020-10-12T02:02:45Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Do you want to request a *feature* or report a *bug*?** Feature\r\n\r\n**What is the current behavior?**\r\n\r\nContext not passed into getDerivedStateFromProps:\r\n\r\n```\r\nstatic getDerivedStateFromProps(props, state, context) {}\r\n```\r\n\r\nJust curious with the new `static contextType`, it would save a lot of nesting if I could access context now from getDerivedStateFromProps when using this pattern. I gave it a shot assuming it may work already but I get undefined from the third argument.\r\n\r\nJust curious if there's been any discussion on this.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/13956",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/13956/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/13956/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/13956/events",
    "html_url": "https://github.com/facebook/react/issues/13956",
    "id": 373653023,
    "node_id": "MDU6SXNzdWUzNzM2NTMwMjM=",
    "number": 13956,
    "title": "onMouseEnter does not fire on an underlaying element if an element above is removed",
    "user": {
      "login": "amadeus",
      "id": 83376,
      "node_id": "MDQ6VXNlcjgzMzc2",
      "avatar_url": "https://avatars0.githubusercontent.com/u/83376?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amadeus",
      "html_url": "https://github.com/amadeus",
      "followers_url": "https://api.github.com/users/amadeus/followers",
      "following_url": "https://api.github.com/users/amadeus/following{/other_user}",
      "gists_url": "https://api.github.com/users/amadeus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amadeus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amadeus/subscriptions",
      "organizations_url": "https://api.github.com/users/amadeus/orgs",
      "repos_url": "https://api.github.com/users/amadeus/repos",
      "events_url": "https://api.github.com/users/amadeus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amadeus/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 127893911,
        "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
        "name": "Component: DOM",
        "color": "fef2c0",
        "default": false,
        "description": null
      },
      {
        "id": 710722093,
        "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
        "name": "Type: Needs Investigation",
        "color": "fbca04",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2018-10-24T19:59:53Z",
    "updated_at": "2020-04-01T21:11:58Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug - I did do some searching around the issues to see if there was a similar/dupe, but I could not find one.\r\n\r\n**What is the current behavior?**\r\n\r\nWith 2 elements overlaying on top of each other, if the upper element gets removed while the cursor is over both elements, mouse enter never fires on the element below. I compared this to native browser events and the issue does not appear to persist there (native browser events appear to fire mouse enter for the underlying div when the overlaying div gets removed).\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem.**\r\n\r\n[CodeSandbox Example](https://codesandbox.io/s/wonqx3lo7)\r\n\r\nI provided a top level boolean constant to switch between using react's synthetic events and the native browser events. In the console I keep track of state updates as console logs. The simple way to test - open the console, mouse over the upper div in a position that is also on top of the lower div, click to remove the upper div, the lower div SHOULD fire mouse enter. It does not with synthetic events, but it does with browser events.\r\n\r\n**What is the expected behavior?**\r\n\r\nExpected behavior for me would be if react would fire mouse enter on the underlaying div when the upper div is removed.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n```\r\n\"dependencies\": {\r\n    \"react\": \"16.5.2\",\r\n    \"react-dom\": \"16.5.2\",\r\n  },\r\n```\r\n\r\nI have not had a chance to test previous versions.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/13954",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/13954/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/13954/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/13954/events",
    "html_url": "https://github.com/facebook/react/issues/13954",
    "id": 373616895,
    "node_id": "MDU6SXNzdWUzNzM2MTY4OTU=",
    "number": 13954,
    "title": "Receive previous state in getDerivedStateFromError",
    "user": {
      "login": "bisubus",
      "id": 2905949,
      "node_id": "MDQ6VXNlcjI5MDU5NDk=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/2905949?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bisubus",
      "html_url": "https://github.com/bisubus",
      "followers_url": "https://api.github.com/users/bisubus/followers",
      "following_url": "https://api.github.com/users/bisubus/following{/other_user}",
      "gists_url": "https://api.github.com/users/bisubus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bisubus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bisubus/subscriptions",
      "organizations_url": "https://api.github.com/users/bisubus/orgs",
      "repos_url": "https://api.github.com/users/bisubus/repos",
      "events_url": "https://api.github.com/users/bisubus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bisubus/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 121709921,
        "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
        "name": "Type: Feature Request",
        "color": "c7def8",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 8,
    "created_at": "2018-10-24T18:28:10Z",
    "updated_at": "2020-08-17T06:02:35Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nThis is feature request.\r\n\r\n**What is the current behavior?**\r\n\r\n`getDerivedStateFromError` hook receives `error` and doesn't have access to `state` or component instance. This limits possible ways in which it could be used and requires to additionally use other hooks to derive the state:\r\n\r\n```js\r\nclass App extends Component {\r\n  state = {}\r\n\r\n  static getDerivedStateFromError(error) {\r\n    return { error }\r\n  }\r\n\r\n  static getDerivedStateFromProps(props, state) {\r\n    // do we really need this?\r\n    // the state is derived from error, not props\r\n    if (state.error)\r\n      return remapStateToPreferredStructure(state);\r\n  }\r\n\r\n  render() { /* ... */ }\r\n}\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\n`getDerivedStateFromError` is expected to receive previous state and have\r\n\r\n```\r\ngetDerivedStateFromError(error, state)\r\n```\r\nsignature to be consistent with related static hook, `getDerivedStateFromProps`. This `getDerivedStateFromError` signature is backward compatible with existing one (React 16.6.0).\r\n\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.6.0\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/13938",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/13938/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/13938/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/13938/events",
    "html_url": "https://github.com/facebook/react/issues/13938",
    "id": 373306184,
    "node_id": "MDU6SXNzdWUzNzMzMDYxODQ=",
    "number": 13938,
    "title": "Error line number in Error Boundary",
    "user": {
      "login": "dehghani-mehdi",
      "id": 9152330,
      "node_id": "MDQ6VXNlcjkxNTIzMzA=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/9152330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dehghani-mehdi",
      "html_url": "https://github.com/dehghani-mehdi",
      "followers_url": "https://api.github.com/users/dehghani-mehdi/followers",
      "following_url": "https://api.github.com/users/dehghani-mehdi/following{/other_user}",
      "gists_url": "https://api.github.com/users/dehghani-mehdi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dehghani-mehdi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dehghani-mehdi/subscriptions",
      "organizations_url": "https://api.github.com/users/dehghani-mehdi/orgs",
      "repos_url": "https://api.github.com/users/dehghani-mehdi/repos",
      "events_url": "https://api.github.com/users/dehghani-mehdi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dehghani-mehdi/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 620368407,
        "node_id": "MDU6TGFiZWw2MjAzNjg0MDc=",
        "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information",
        "name": "Resolution: Needs More Information",
        "color": "fffde7",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 14,
    "created_at": "2018-10-24T05:03:58Z",
    "updated_at": "2020-09-20T04:09:28Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Hey,\r\n\r\nAs I can not reopen issue #13790, I opened this.\r\n\r\nIf you don't like to fix/add my request, simply say `won't fox`, but don't close the issue with simple/not related answer, as @aweary did. React is pro library, you are pro, so act like pros.\r\n\r\nThanks.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/13934",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/13934/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/13934/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/13934/events",
    "html_url": "https://github.com/facebook/react/issues/13934",
    "id": 373231550,
    "node_id": "MDU6SXNzdWUzNzMyMzE1NTA=",
    "number": 13934,
    "title": "Update release script to handle alpha react-reconciler deps",
    "user": {
      "login": "bvaughn",
      "id": 29597,
      "node_id": "MDQ6VXNlcjI5NTk3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bvaughn",
      "html_url": "https://github.com/bvaughn",
      "followers_url": "https://api.github.com/users/bvaughn/followers",
      "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
      "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
      "organizations_url": "https://api.github.com/users/bvaughn/orgs",
      "repos_url": "https://api.github.com/users/bvaughn/repos",
      "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bvaughn/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 71502270,
        "node_id": "MDU6TGFiZWw3MTUwMjI3MA==",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Build%20Infrastructure",
        "name": "Component: Build Infrastructure",
        "color": "f9d0c4",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "bvaughn",
      "id": 29597,
      "node_id": "MDQ6VXNlcjI5NTk3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bvaughn",
      "html_url": "https://github.com/bvaughn",
      "followers_url": "https://api.github.com/users/bvaughn/followers",
      "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
      "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
      "organizations_url": "https://api.github.com/users/bvaughn/orgs",
      "repos_url": "https://api.github.com/users/bvaughn/repos",
      "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bvaughn/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "bvaughn",
        "id": 29597,
        "node_id": "MDQ6VXNlcjI5NTk3",
        "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bvaughn",
        "html_url": "https://github.com/bvaughn",
        "followers_url": "https://api.github.com/users/bvaughn/followers",
        "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
        "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
        "organizations_url": "https://api.github.com/users/bvaughn/orgs",
        "repos_url": "https://api.github.com/users/bvaughn/repos",
        "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bvaughn/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2018-10-23T22:37:35Z",
    "updated_at": "2020-01-08T19:15:21Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "This commit 1a57dc6 broke it",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/13876",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/13876/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/13876/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/13876/events",
    "html_url": "https://github.com/facebook/react/issues/13876",
    "id": 371236587,
    "node_id": "MDU6SXNzdWUzNzEyMzY1ODc=",
    "number": 13876,
    "title": "Uncontrolled input type=\"checkbox\" reflects updating `defaultChecked` in Edge and Safari",
    "user": {
      "login": "berlysia",
      "id": 950573,
      "node_id": "MDQ6VXNlcjk1MDU3Mw==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/950573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/berlysia",
      "html_url": "https://github.com/berlysia",
      "followers_url": "https://api.github.com/users/berlysia/followers",
      "following_url": "https://api.github.com/users/berlysia/following{/other_user}",
      "gists_url": "https://api.github.com/users/berlysia/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/berlysia/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/berlysia/subscriptions",
      "organizations_url": "https://api.github.com/users/berlysia/orgs",
      "repos_url": "https://api.github.com/users/berlysia/repos",
      "events_url": "https://api.github.com/users/berlysia/events{/privacy}",
      "received_events_url": "https://api.github.com/users/berlysia/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 127893911,
        "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
        "name": "Component: DOM",
        "color": "fef2c0",
        "default": false,
        "description": null
      },
      {
        "id": 710722093,
        "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
        "name": "Type: Needs Investigation",
        "color": "fbca04",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2018-10-17T19:40:11Z",
    "updated_at": "2020-04-01T23:12:47Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n\r\n**What is the current behavior?**\r\n\r\nUpdating the value of `defaultChecked` causes a change DOM property's `checked` value.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://codesandbox.io/s/yjop5zwmr9\r\n\r\n**What is the expected behavior?**\r\n\r\nUpdating the value of `defaultChecked` should not affect to DOM property's `checked` value.\r\n(no log in codesandbox is expected)\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nreproduce in React v15.2.0 and v16.5.2, ReactDOM v15.2.0 and v16.5.2.\r\nnot reproduce in v15.1\r\n\r\nbrowser: Safari 12 on macOS Sierra, Edge 42 on Windows 10\r\nnot reproduce in Chrome(70, beta), Chrome(72, canary), Firefox(62), IE11 on Win10\r\nsmartphone browsers are not checked.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/13862",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/13862/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/13862/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/13862/events",
    "html_url": "https://github.com/facebook/react/pull/13862",
    "id": 370742878,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MjIzMzUyNzc1",
    "number": 13862,
    "title": "[WIP] Replay load/error events that happen earlier than commit",
    "user": {
      "login": "sebmarkbage",
      "id": 63648,
      "node_id": "MDQ6VXNlcjYzNjQ4",
      "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sebmarkbage",
      "html_url": "https://github.com/sebmarkbage",
      "followers_url": "https://api.github.com/users/sebmarkbage/followers",
      "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
      "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
      "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
      "repos_url": "https://api.github.com/users/sebmarkbage/repos",
      "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2018-10-16T18:32:13Z",
    "updated_at": "2020-02-04T16:12:21Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/13862",
      "html_url": "https://github.com/facebook/react/pull/13862",
      "diff_url": "https://github.com/facebook/react/pull/13862.diff",
      "patch_url": "https://github.com/facebook/react/pull/13862.patch"
    },
    "body": "If we create an img/image/link those might fire their load event before we commit. If that happens, we need to store the event so that we can replay it during the commit phase.\r\n\r\nI had an idea to fix it but this is still WIP because I actually need to test if this approach works.\r\n\r\n- [x] Write code\r\n- [ ] Write unit tests\r\n- [ ] Write fixtures\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/13847",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/13847/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/13847/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/13847/events",
    "html_url": "https://github.com/facebook/react/pull/13847",
    "id": 369847701,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MjIyNjgwMTUx",
    "number": 13847,
    "title": "Add failing test for expiration",
    "user": {
      "login": "gaearon",
      "id": 810438,
      "node_id": "MDQ6VXNlcjgxMDQzOA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gaearon",
      "html_url": "https://github.com/gaearon",
      "followers_url": "https://api.github.com/users/gaearon/followers",
      "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
      "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
      "organizations_url": "https://api.github.com/users/gaearon/orgs",
      "repos_url": "https://api.github.com/users/gaearon/repos",
      "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gaearon/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2018-10-13T22:32:47Z",
    "updated_at": "2020-01-23T22:15:59Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/13847",
      "html_url": "https://github.com/facebook/react/pull/13847",
      "diff_url": "https://github.com/facebook/react/pull/13847.diff",
      "patch_url": "https://github.com/facebook/react/pull/13847.patch"
    },
    "body": "I don't know if this is a bug but this behavior seems weird.\r\n\r\nThe sequence is:\r\n\r\n* Perform update 1\r\n* Schedule update 2\r\n* Start rendering update 2\r\n* Advance time so that update 2 is expired\r\n* Schedule update 3\r\n* Flush expired work\r\n\r\nMy expectation is this should only flush update 2 (it's the one that expired). Update 3 hasn't expired yet.\r\n\r\nHowever, this flushes update 3 instead. If I revert https://github.com/facebook/react/pull/13503, this flushes both 2 and 3. I can't get it to only flush 2, but that seems like the desired behavior.\r\n\r\nBy itself flushing 3 isn't that bad. The real situation I was trying to reproduce is when we expire another update *while* rendering a just-expired update, and that kicks off another rendering cycle without yielding. But I couldn't get to reproducing that because even a more basic scenario above didn't work as I expected.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/13838",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/13838/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/13838/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/13838/events",
    "html_url": "https://github.com/facebook/react/issues/13838",
    "id": 369521758,
    "node_id": "MDU6SXNzdWUzNjk1MjE3NTg=",
    "number": 13838,
    "title": "head > meta > content escaping issue",
    "user": {
      "login": "oliviertassinari",
      "id": 3165635,
      "node_id": "MDQ6VXNlcjMxNjU2MzU=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/3165635?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/oliviertassinari",
      "html_url": "https://github.com/oliviertassinari",
      "followers_url": "https://api.github.com/users/oliviertassinari/followers",
      "following_url": "https://api.github.com/users/oliviertassinari/following{/other_user}",
      "gists_url": "https://api.github.com/users/oliviertassinari/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/oliviertassinari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/oliviertassinari/subscriptions",
      "organizations_url": "https://api.github.com/users/oliviertassinari/orgs",
      "repos_url": "https://api.github.com/users/oliviertassinari/repos",
      "events_url": "https://api.github.com/users/oliviertassinari/events{/privacy}",
      "received_events_url": "https://api.github.com/users/oliviertassinari/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710332294,
        "node_id": "MDU6TGFiZWw3MTAzMzIyOTQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Server%20Rendering",
        "name": "Component: Server Rendering",
        "color": "d4c5f9",
        "default": false,
        "description": null
      },
      {
        "id": 710722093,
        "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
        "name": "Type: Needs Investigation",
        "color": "fbca04",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 10,
    "created_at": "2018-10-12T12:01:36Z",
    "updated_at": "2020-08-18T17:59:22Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nI'm guessing it's a bug.\r\n\r\n**What is the current behavior?**\r\n\r\nThe following source code,\r\n\r\n```jsx\r\n<meta property=\"og:image\" content=\"https://onepixel.imgix.net/60366a63-1ac8-9626-1df8-9d8d5e5e2601_1000.jpg?auto=format&q=80&mark=watermark%2Fcenter-v5.png&markalign=center%2Cmiddle&h=500&w=500&s=60ec785603e5f71fe944f76b4dacef08\" />\r\n```\r\n\r\n, is being escaped once server side rendered:\r\n```jsx\r\n<meta property=\"og:image\" content=\"https://onepixel.imgix.net/60366a63-1ac8-9626-1df8-9d8d5e5e2601_1000.jpg?auto=format&amp;q=80&amp;mark=watermark%2Fcenter-v5.png&amp;markalign=center%2Cmiddle&amp;h=500&amp;w=500&amp;s=60ec785603e5f71fe944f76b4dacef08\"/>\r\n```\r\n\r\nYou can reproduce the behavior like this:\r\n```jsx\r\nconst React = require(\"react\");\r\nconst ReactDOMServer = require(\"react-dom/server\");\r\nconst http = require(\"http\");\r\n\r\nconst doc = React.createElement(\"html\", {\r\n  children: [\r\n    React.createElement(\"head\", {\r\n      children: React.createElement(\"meta\", {\r\n        property: \"og:image\",\r\n        content:\r\n          \"https://onepixel.imgix.net/60366a63-1ac8-9626-1df8-9d8d5e5e2601_1000.jpg?auto=format&q=80&mark=watermark%2Fcenter-v5.png&markalign=center%2Cmiddle&h=500&w=500&s=60ec785603e5f71fe944f76b4dacef08\"\r\n      })\r\n    }),\r\n    React.createElement(\"body\", { children: \"og:image\" })\r\n  ]\r\n});\r\n\r\n//create a server object:\r\nhttp\r\n  .createServer(function(req, res) {\r\n    res.write(\"<!DOCTYPE html>\" + ReactDOMServer.renderToStaticMarkup(doc)); //write a response to the client\r\n    res.end(); //end the response\r\n  })\r\n  .listen(8080); //the server object listens on port 8080\r\n```\r\neditor: https://codesandbox.io/s/my299jk7qp\r\noutput : https://my299jk7qp.sse.codesandbox.io/\r\n\r\n**What is the expected behavior?**\r\n\r\nI would expect the content not being escaped. It's related to https://github.com/zeit/next.js/issues/2006#issuecomment-355917446.\r\nI'm using the `og:image` meta element so my pages can have nice previews within Facebook :).\r\n\r\n![capture d ecran 2018-10-12 a 14 15 26](https://user-images.githubusercontent.com/3165635/46868650-52076f00-ce29-11e8-892f-cfbf924bba82.png)\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n16.5.2",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/13832",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/13832/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/13832/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/13832/events",
    "html_url": "https://github.com/facebook/react/pull/13832",
    "id": 369335880,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MjIyMzAyNjYy",
    "number": 13832,
    "title": "Add failing test for Suspense bug",
    "user": {
      "login": "gaearon",
      "id": 810438,
      "node_id": "MDQ6VXNlcjgxMDQzOA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gaearon",
      "html_url": "https://github.com/gaearon",
      "followers_url": "https://api.github.com/users/gaearon/followers",
      "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
      "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
      "organizations_url": "https://api.github.com/users/gaearon/orgs",
      "repos_url": "https://api.github.com/users/gaearon/repos",
      "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gaearon/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2018-10-11T22:51:30Z",
    "updated_at": "2020-01-23T22:14:43Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/13832",
      "html_url": "https://github.com/facebook/react/pull/13832",
      "diff_url": "https://github.com/facebook/react/pull/13832.diff",
      "patch_url": "https://github.com/facebook/react/pull/13832.patch"
    },
    "body": "I expect that `maxDuration` that is larger than both the actual waiting time *and* the current expiration context timeout should be equivalent to not specifying `maxDuration` at all. But that doesn't seem like what happens. \r\n\r\nA more concrete example:\r\n\r\n```js\r\nimport React, { lazy, unstable_Suspense as Suspense } from \"react\";\r\nimport { unstable_createRoot as createRoot } from \"react-dom\";\r\n\r\nlet done = false;\r\nlet promise;\r\nfunction Delay({ ms, children }) {\r\n  if (done) {\r\n    return children;\r\n  }\r\n  if (!promise) {\r\n    promise = new Promise(resolve => {\r\n      setTimeout(() => {\r\n        done = true;\r\n        resolve();\r\n      }, ms);\r\n    });\r\n  }\r\n  throw promise;\r\n}\r\n\r\nclass Spinner extends React.Component {\r\n  componentDidMount() {\r\n    alert(\"spin\");\r\n  }\r\n  render() {\r\n    console.log(\"spinner\");\r\n    return <h1>ðŸŒ€ 'Loading....'</h1>;\r\n  }\r\n}\r\n\r\nclass App extends React.Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <>\r\n        <h1 onClick={() => this.setState({ showStuff: true })}>Suspense</h1>\r\n        {this.state.showStuff && (\r\n          <Suspense maxDuration={2000} fallback={<Spinner />}>\r\n            <Delay ms={10}>Ready</Delay>\r\n          </Suspense>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\ncreateRoot(document.getElementById(\"root\")).render(<App />);\r\n```\r\n\r\nI'd expect `Spinner` to never be shown â€” or at least the behavior to be consistent between `maxDuration={2000}` and missing `maxDuration`.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/13798",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/13798/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/13798/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/13798/events",
    "html_url": "https://github.com/facebook/react/issues/13798",
    "id": 368684060,
    "node_id": "MDU6SXNzdWUzNjg2ODQwNjA=",
    "number": 13798,
    "title": "JAWS reads non-interactive elements as Clickable",
    "user": {
      "login": "Lily418",
      "id": 1368025,
      "node_id": "MDQ6VXNlcjEzNjgwMjU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1368025?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Lily418",
      "html_url": "https://github.com/Lily418",
      "followers_url": "https://api.github.com/users/Lily418/followers",
      "following_url": "https://api.github.com/users/Lily418/following{/other_user}",
      "gists_url": "https://api.github.com/users/Lily418/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Lily418/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Lily418/subscriptions",
      "organizations_url": "https://api.github.com/users/Lily418/orgs",
      "repos_url": "https://api.github.com/users/Lily418/repos",
      "events_url": "https://api.github.com/users/Lily418/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Lily418/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 40929151,
        "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
        "name": "Type: Bug",
        "color": "b60205",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2018-10-10T14:07:16Z",
    "updated_at": "2019-01-29T20:48:00Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\n1. I create an app using [create-react-app](https://github.com/facebook/create-react-app)\r\n2. I use JAWS Professional Edition Version 2018 (build 1710.42 ILM) and Internet Explorer 11 on Windows 7\r\n3. I use arrow keys to navigate to paragraph \"Edit src/App.js and save to reload.\"\r\n4. Jaws announces \"Edit src/App.js and save to reload. **clickable**\"\r\n\r\n**What is the expected behavior?**\r\nThis paragraph is non interactive, it should not be announced as clickable.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n- JAWS Professional Edition Version 2018 (build 1710.42 ILM) \r\n- Internet Explorer 11\r\n- Windows 7\r\n- create-react-app 2.0.3\r\n\r\n**suspected cause**\r\nUsing Chrome Event Listener Breakpoints I observed there's a function called `trapClickOnNonInteractiveElement` which is the onclick handler for non interactive elements. This noop function is causing JAWS to think this is an interactive element\r\n\r\n**possible solution**\r\nIn [trapClickOnNonInteractiveElement](https://github.com/facebook/react/blob/8a8d973d3cc5623676a84f87af66ef9259c3937c/packages/react-dom/src/client/ReactDOMComponent.js#L245) there is a comment which reads \r\n```\r\n// TODO: Only do this for the relevant Safaris maybe?\r\n```\r\nI think that this would fix this issue.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/13796",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/13796/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/13796/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/13796/events",
    "html_url": "https://github.com/facebook/react/issues/13796",
    "id": 368331135,
    "node_id": "MDU6SXNzdWUzNjgzMzExMzU=",
    "number": 13796,
    "title": "batch.commit() doesn't empty existing container",
    "user": {
      "login": "sophiebits",
      "id": 6820,
      "node_id": "MDQ6VXNlcjY4MjA=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/6820?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sophiebits",
      "html_url": "https://github.com/sophiebits",
      "followers_url": "https://api.github.com/users/sophiebits/followers",
      "following_url": "https://api.github.com/users/sophiebits/following{/other_user}",
      "gists_url": "https://api.github.com/users/sophiebits/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sophiebits/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sophiebits/subscriptions",
      "organizations_url": "https://api.github.com/users/sophiebits/orgs",
      "repos_url": "https://api.github.com/users/sophiebits/repos",
      "events_url": "https://api.github.com/users/sophiebits/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sophiebits/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1776420141,
        "node_id": "MDU6TGFiZWwxNzc2NDIwMTQx",
        "url": "https://api.github.com/repos/facebook/react/labels/Partner",
        "name": "Partner",
        "color": "e4bef7",
        "default": false,
        "description": ""
      },
      {
        "id": 710722093,
        "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
        "name": "Type: Needs Investigation",
        "color": "fbca04",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2018-10-09T18:07:22Z",
    "updated_at": "2020-01-08T23:42:28Z",
    "closed_at": null,
    "author_association": "COLLABORATOR",
    "active_lock_reason": null,
    "body": "If you have\r\n\r\n```\r\n<div id=\"main\">hello</div>\r\n```\r\n\r\nthen run\r\n\r\n```\r\nconst root = ReactDOM.unstable_createRoot($('main'));\r\nconst batch = root.createBatch();\r\nbatch.render('goodbye');\r\nawait batch;\r\nbatch.commit();\r\n```\r\n\r\nthen the div should contain \"goodbye\" but instead contains \"hellogoodbye\". Looks like we are forgetting to empty the container.\r\n\r\nSame issue exists with `unstable_createRoot(...).render(...)`.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/13681",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/13681/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/13681/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/13681/events",
    "html_url": "https://github.com/facebook/react/issues/13681",
    "id": 361413793,
    "node_id": "MDU6SXNzdWUzNjE0MTM3OTM=",
    "number": 13681,
    "title": "How to prevent ReactDOM.render errors from bubbling when otherwise explicitly handled",
    "user": {
      "login": "jneander",
      "id": 880186,
      "node_id": "MDQ6VXNlcjg4MDE4Ng==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/880186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jneander",
      "html_url": "https://github.com/jneander",
      "followers_url": "https://api.github.com/users/jneander/followers",
      "following_url": "https://api.github.com/users/jneander/following{/other_user}",
      "gists_url": "https://api.github.com/users/jneander/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jneander/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jneander/subscriptions",
      "organizations_url": "https://api.github.com/users/jneander/orgs",
      "repos_url": "https://api.github.com/users/jneander/repos",
      "events_url": "https://api.github.com/users/jneander/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jneander/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710375792,
        "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2018-09-18T17:48:47Z",
    "updated_at": "2019-10-02T00:27:48Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nThis is a bug. Ordinarily, this would probably be considered a feature request. However, the stated purpose of the feature referenced below is being violated in certain environments.\r\n\r\n**What is the current behavior?** \r\n\r\nReact 16+ surfaces an uncaught error during render, even when using `componentDidCatch` as designed or using try/catch around the render. As described in the comment [above the related code](https://github.com/facebook/react/blob/master/packages/shared/invokeGuardedCallbackImpl.js#L32:L49), this is a convenience provided for developers using DevTools for debugging purposes. However, the convenience provided for development debugging is changing behavior in specs, causing failures for otherwise protected code paths, which goes against this statement from the comment description for the code:\r\n\r\n> But because the error happens in a different event loop context, it does not interrupt the normal program flow.\r\n\r\nWhen the error occurs, a spec runner such as Mocha will fail the test with the uncaught error, then continue with the next test. After advancing, the second render of the component will complete and call the ReactDOM.render callback, which continues code from the already-failed test while a subsequent test is in progress. This pollutes the spec suite and leads to other issues that are not produced when using the Production version of React.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nAll relevant code and content has been included in [this CodeSandbox](https://codesandbox.io/s/vvmv7q7o7y). Due to the use of karma/mocha, tests must be run locally. Inline comments add detail to behavior and expectations.\r\n\r\nTo see the tests pass, switch \"test\" to \"production\" in the `karma.js` file.\r\n\r\n**What is the expected behavior?**\r\n\r\nTypically, DevTools are used in a different context from running specsâ€”automation vs investigation, for lack of more precise terms. It should be an option rather than the default when using React in a non-production environment. At least in an environment of `test`, where spec runners are conditionally sensitive to global errors, developers must have the option to disable or disallow this behavior as it is implemented at this time.\r\n\r\nFor a second, perhaps more intuitive option, refer to this portion of the mentioned comment, talking about \"pause on caught exceptions\":\r\n\r\n> This is untintuitive, though, because even though React has caught the error, from the developer's perspective, the error is uncaught.\r\n\r\nWhen an exception during render is captured using `componentDidCatch` or try/catch as mentioned above, the exception should be considered \"caught,\" as the developer has explicitly created an error boundary around this render. In this case, expected behavior would be for the error to not be surfaced globally and for the developer to debug any exceptions within the error boundary they defined.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nThis is present only in the non-production version of React 16+. The `development` or `test` environments of React 16+ feature this behavior. React 15.* and below do not have this issue. Prior to React 16, explicit try/catch handlers were solely responsible for being an error boundary during render.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/13651",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/13651/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/13651/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/13651/events",
    "html_url": "https://github.com/facebook/react/issues/13651",
    "id": 360309327,
    "node_id": "MDU6SXNzdWUzNjAzMDkzMjc=",
    "number": 13651,
    "title": "input[type='number'] value isn't updated",
    "user": {
      "login": "youen123",
      "id": 15847491,
      "node_id": "MDQ6VXNlcjE1ODQ3NDkx",
      "avatar_url": "https://avatars3.githubusercontent.com/u/15847491?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/youen123",
      "html_url": "https://github.com/youen123",
      "followers_url": "https://api.github.com/users/youen123/followers",
      "following_url": "https://api.github.com/users/youen123/following{/other_user}",
      "gists_url": "https://api.github.com/users/youen123/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/youen123/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/youen123/subscriptions",
      "organizations_url": "https://api.github.com/users/youen123/orgs",
      "repos_url": "https://api.github.com/users/youen123/repos",
      "events_url": "https://api.github.com/users/youen123/events{/privacy}",
      "received_events_url": "https://api.github.com/users/youen123/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 127893911,
        "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
        "name": "Component: DOM",
        "color": "fef2c0",
        "default": false,
        "description": null
      },
      {
        "id": 710722093,
        "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
        "name": "Type: Needs Investigation",
        "color": "fbca04",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2018-09-14T13:40:11Z",
    "updated_at": "2020-04-01T23:16:06Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n**What is the current behavior?**\r\nwhen I enter \"01\" into input[type=number]ï¼ŒI set the value to 1, but it doesn't work. It still show \"01\"\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://codesandbox.io/s/20ywk1x71n\r\n\r\n**What is the expected behavior?**\r\nwhen I enter \"01\", it should show \"1\"\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n15.6.2.   I think it should update in \"updatewrapper\" in  https://github.com/facebook/react/blob/master/packages/react-dom/src/client/ReactDOMInput.js.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/13567",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/13567/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/13567/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/13567/events",
    "html_url": "https://github.com/facebook/react/issues/13567",
    "id": 357300893,
    "node_id": "MDU6SXNzdWUzNTczMDA4OTM=",
    "number": 13567,
    "title": "Consider stopping auto-adding `px` to number style values (except for a small whitelist)",
    "user": {
      "login": "mgol",
      "id": 1758366,
      "node_id": "MDQ6VXNlcjE3NTgzNjY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1758366?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mgol",
      "html_url": "https://github.com/mgol",
      "followers_url": "https://api.github.com/users/mgol/followers",
      "following_url": "https://api.github.com/users/mgol/following{/other_user}",
      "gists_url": "https://api.github.com/users/mgol/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mgol/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mgol/subscriptions",
      "organizations_url": "https://api.github.com/users/mgol/orgs",
      "repos_url": "https://api.github.com/users/mgol/repos",
      "events_url": "https://api.github.com/users/mgol/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mgol/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 127893911,
        "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
        "name": "Component: DOM",
        "color": "fef2c0",
        "default": false,
        "description": null
      },
      {
        "id": 710375792,
        "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 11,
    "created_at": "2018-09-05T16:08:37Z",
    "updated_at": "2019-05-14T14:49:38Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nA removal of a feature, in a sense.\r\n\r\n**What is the current behavior?**\r\n\r\nReact automatically adds the `px` suffix for numerical values passed to the `style` prop. As some CSS properties accept unitless values, React maintains a blacklist of properties that shouldn't get `px` auto-appended.\r\n\r\nThe problem is that this solution doesn't scale. It requires us to add more & more properties to the list as CSS specs expand and recently the list grows faster; Flexbox & Grid added quite a few of them. What's more confusing, some of those props would work both with & without the `px` suffix and that changes the meaning (`lineHeight` is suffering from that).\r\n\r\nAlthough I'm a React newbie I'm quite familiar with this issue due to being a member of the jQuery Core team. jQuery has the same logic as React here and we keep having to add to the list. We've actually exposed the list at [jQuery.cssNumber](https://api.jquery.com/jQuery.cssNumber/) so that people don't always have to wait for us to add support for a property and do a release.\r\n\r\nThat's why we decided that in jQuery 4 we'll drop the auto-prefixing blacklist and turn to a whitelist that lists only a few most common properties to which we want to auto-append `px` (mostly because they're extremely common and we don't want to break the world too much); we plan to _not_ expand that list unless we missed something really common. You can see the current plan in my PR: https://github.com/jquery/jquery/pull/4055. In particular, see the proposed whitelist in a (visualized) regexp in:\r\nhttps://github.com/jquery/jquery/blob/03e9dba3882868e1ee79f1fb0504326da925644f/src/css/isAutoPx.js.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n**What is the expected behavior?**\r\n\r\nI propose that React could do the same thing jQuery is planning to and switch the ever-expanding blacklist of CSS props that shouldn't have the `px` suffix applied to a small whitelist that should have the suffix applied.\r\n\r\nThis topic has been initially described in #13550.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nAll browses & OSs. I don't know how old this logic is in React.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/13560",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/13560/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/13560/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/13560/events",
    "html_url": "https://github.com/facebook/react/issues/13560",
    "id": 357004895,
    "node_id": "MDU6SXNzdWUzNTcwMDQ4OTU=",
    "number": 13560,
    "title": "Remove Factory Components",
    "user": {
      "login": "gaearon",
      "id": 810438,
      "node_id": "MDQ6VXNlcjgxMDQzOA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gaearon",
      "html_url": "https://github.com/gaearon",
      "followers_url": "https://api.github.com/users/gaearon/followers",
      "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
      "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
      "organizations_url": "https://api.github.com/users/gaearon/orgs",
      "repos_url": "https://api.github.com/users/gaearon/repos",
      "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gaearon/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 739761016,
        "node_id": "MDU6TGFiZWw3Mzk3NjEwMTY=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler",
        "name": "Component: Reconciler",
        "color": "f9a798",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      },
      {
        "id": 763742499,
        "node_id": "MDU6TGFiZWw3NjM3NDI0OTk=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Breaking%20Change",
        "name": "Type: Breaking Change",
        "color": "aa2608",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": {
      "url": "https://api.github.com/repos/facebook/react/milestones/40",
      "html_url": "https://github.com/facebook/react/milestone/40",
      "labels_url": "https://api.github.com/repos/facebook/react/milestones/40/labels",
      "id": 2937756,
      "node_id": "MDk6TWlsZXN0b25lMjkzNzc1Ng==",
      "number": 40,
      "title": "18.0.0",
      "description": "",
      "creator": {
        "login": "gaearon",
        "id": 810438,
        "node_id": "MDQ6VXNlcjgxMDQzOA==",
        "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gaearon",
        "html_url": "https://github.com/gaearon",
        "followers_url": "https://api.github.com/users/gaearon/followers",
        "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
        "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
        "organizations_url": "https://api.github.com/users/gaearon/orgs",
        "repos_url": "https://api.github.com/users/gaearon/repos",
        "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gaearon/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 8,
      "closed_issues": 2,
      "state": "open",
      "created_at": "2017-11-26T22:47:57Z",
      "updated_at": "2020-08-28T18:04:04Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 7,
    "created_at": "2018-09-04T22:54:03Z",
    "updated_at": "2020-01-08T19:16:13Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "We support a very unusual kind of components that look like functional components but return an *instance*.\r\n\r\n```js\r\nfunction Hello(props) {\r\n  return {\r\n    componentDidMount() {\r\n      alert('wow')\r\n    }\r\n    render() {\r\n      return <div>Hi, {this.props.name}</div>\r\n    }\r\n  };\r\n}\r\n```\r\n\r\nNote these are *not* functional components. They're pretty exotic and don't offer any practical benefits over classes. At the time they were added (I think 0.14?) it was because we thought other type systems might want to compile to a format like this instead of ES classes-like output. But that didn't happen.\r\n\r\nThere's some complexity associated with continuing to support this. Since this is more confusing than useful, I think we should deprecate them in 16.x and remove in 17.x.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/13559",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/13559/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/13559/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/13559/events",
    "html_url": "https://github.com/facebook/react/issues/13559",
    "id": 357001465,
    "node_id": "MDU6SXNzdWUzNTcwMDE0NjU=",
    "number": 13559,
    "title": "\"scheduler\" package umbrella",
    "user": {
      "login": "bvaughn",
      "id": 29597,
      "node_id": "MDQ6VXNlcjI5NTk3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bvaughn",
      "html_url": "https://github.com/bvaughn",
      "followers_url": "https://api.github.com/users/bvaughn/followers",
      "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
      "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
      "organizations_url": "https://api.github.com/users/bvaughn/orgs",
      "repos_url": "https://api.github.com/users/bvaughn/repos",
      "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bvaughn/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      },
      {
        "id": 710615342,
        "node_id": "MDU6TGFiZWw3MTA2MTUzNDI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Umbrella",
        "name": "Type: Umbrella",
        "color": "5319e7",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "bvaughn",
      "id": 29597,
      "node_id": "MDQ6VXNlcjI5NTk3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bvaughn",
      "html_url": "https://github.com/bvaughn",
      "followers_url": "https://api.github.com/users/bvaughn/followers",
      "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
      "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
      "organizations_url": "https://api.github.com/users/bvaughn/orgs",
      "repos_url": "https://api.github.com/users/bvaughn/repos",
      "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bvaughn/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "bvaughn",
        "id": 29597,
        "node_id": "MDQ6VXNlcjI5NTk3",
        "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bvaughn",
        "html_url": "https://github.com/bvaughn",
        "followers_url": "https://api.github.com/users/bvaughn/followers",
        "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
        "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
        "organizations_url": "https://api.github.com/users/bvaughn/orgs",
        "repos_url": "https://api.github.com/users/bvaughn/repos",
        "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bvaughn/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2018-09-04T22:38:53Z",
    "updated_at": "2020-01-08T19:16:13Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "### Short term\r\n- [x] #13561: Replace the [`__getInteractionsRef` and `__getSubscriberRef` methods](https://github.com/facebook/react/blob/fb88fd9d8c9f72b8e2e7e1ae89652d2a6a707562/packages/schedule/src/Tracking.js#L84-L90) with direct ~~mutable~~ exports  (`__interactions` and `__subscriber`)  and [update the `ScheduleTracking` UMD fork](https://github.com/facebook/react/blob/master/packages/shared/forks/ScheduleTracking.umd.js).\r\n- [x] #13561: Remove `__getInteractionsRef` and `__getSubscriberRef` from the `schedule/tracking` UMD [dev](https://github.com/facebook/react/blob/master/packages/schedule/npm/umd/schedule-tracking.development.js) and [prod](https://github.com/facebook/react/blob/master/packages/schedule/npm/umd/schedule-tracking.production.min.js) bundles since it's not part of the public API.\r\n- [x] Fix interaction-tracking reference count bug (#13574)\r\n- [ ] Split subscriptions entry point apart from tracking (e.g. break `scheduler/tracking` into `scheduler/tracking` and `scheduler/subscriptions`)\r\n\r\n### Long term\r\n- [ ] Move `scheduler` to is own git repo (maybe even its own org) prior to a 1.0 release.\r\n- [ ] Enable it to be used without a build step by replacing the dev/prod check with a single export.\r\n- [ ] Add an ES module entry point as well as the CJS and UMD entry points",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/13508",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/13508/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/13508/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/13508/events",
    "html_url": "https://github.com/facebook/react/issues/13508",
    "id": 355198151,
    "node_id": "MDU6SXNzdWUzNTUxOTgxNTE=",
    "number": 13508,
    "title": "Relax ToString consistency guarantees",
    "user": {
      "login": "gaearon",
      "id": 810438,
      "node_id": "MDQ6VXNlcjgxMDQzOA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gaearon",
      "html_url": "https://github.com/gaearon",
      "followers_url": "https://api.github.com/users/gaearon/followers",
      "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
      "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
      "organizations_url": "https://api.github.com/users/gaearon/orgs",
      "repos_url": "https://api.github.com/users/gaearon/repos",
      "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gaearon/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 127893911,
        "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
        "name": "Component: DOM",
        "color": "fef2c0",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      },
      {
        "id": 40929153,
        "node_id": "MDU6TGFiZWw0MDkyOTE1Mw==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
        "name": "Type: Enhancement",
        "color": "84b6eb",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2018-08-29T14:50:15Z",
    "updated_at": "2020-01-08T19:16:11Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "We recently chatted about https://github.com/facebook/react/pull/13367 and related work (e.g. https://github.com/facebook/react/pull/13394) with @sebmarkbage, and he raised a good point.\r\n\r\nIt seems like overall treating them consistently is adding significant overhead in the implementation readability. And thereâ€™s undoubtedly runtime overhead to it too. There are two separate issues here:\r\n\r\n* **warning** for invalid values\r\n* ensuring that the output for invalid values is **consistent** (e.g. functions are always skipped)\r\n\r\nThe conclusion we came to is that we should keep **warning** for bad values, but **as long as we warn, consistency is not necessary**. It's fine if we sometimes stringify a function, and sometimes skip it, as long as we always warn for those cases\r\n\r\n**Our guiding principle for invalid inputs should be that we handle them with the least amount of overhead** (both at runtime, and in terms of code size), not that theyâ€™re always handled the same way.\r\n\r\nOne exception to this is probably Symbols because they throw when stringified. So it seems like skipping them is actually desirable â€” unless we're okay with errors.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/13499",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/13499/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/13499/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/13499/events",
    "html_url": "https://github.com/facebook/react/issues/13499",
    "id": 354697758,
    "node_id": "MDU6SXNzdWUzNTQ2OTc3NTg=",
    "number": 13499,
    "title": "Number input breaks when letter \"e\" is entered",
    "user": {
      "login": "vahnag",
      "id": 5208783,
      "node_id": "MDQ6VXNlcjUyMDg3ODM=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/5208783?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vahnag",
      "html_url": "https://github.com/vahnag",
      "followers_url": "https://api.github.com/users/vahnag/followers",
      "following_url": "https://api.github.com/users/vahnag/following{/other_user}",
      "gists_url": "https://api.github.com/users/vahnag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vahnag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vahnag/subscriptions",
      "organizations_url": "https://api.github.com/users/vahnag/orgs",
      "repos_url": "https://api.github.com/users/vahnag/repos",
      "events_url": "https://api.github.com/users/vahnag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vahnag/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 127893911,
        "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
        "name": "Component: DOM",
        "color": "fef2c0",
        "default": false,
        "description": null
      },
      {
        "id": 710722093,
        "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
        "name": "Type: Needs Investigation",
        "color": "fbca04",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 14,
    "created_at": "2018-08-28T11:58:08Z",
    "updated_at": "2020-01-10T16:26:31Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n\r\n**What is the current behavior?**\r\ninput[type=number] only allows entering numbers and letter \"e\" in the input. Native \"input\" input event is called for both numbers and the letter \"e\". With React the `onChange` event is only called for numbers. There's no way to catch \"e\" with `onChange`.\r\n\r\nThe \"e\" is even being filled when the input is controlled. The only way I can think of to work around this bug right now is to use `onKeyDown` and `preventDefault` when \"e\" or \"E\" is pressed.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\nhttps://codesandbox.io/s/ov3ql3ljwz\r\n\r\n**What is the expected behavior?**\r\nIt should pass anything that is being filled into the input to the onChange handler and should not break controlled component.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact: 16.4.2\r\nChrome: 68.0.3440.106\r\nWindows 10",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/13483",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/13483/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/13483/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/13483/events",
    "html_url": "https://github.com/facebook/react/pull/13483",
    "id": 354035894,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MjEwOTE2NjQ4",
    "number": 13483,
    "title": "Add a failing test for unnecessary commits",
    "user": {
      "login": "gaearon",
      "id": 810438,
      "node_id": "MDQ6VXNlcjgxMDQzOA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gaearon",
      "html_url": "https://github.com/gaearon",
      "followers_url": "https://api.github.com/users/gaearon/followers",
      "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
      "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
      "organizations_url": "https://api.github.com/users/gaearon/orgs",
      "repos_url": "https://api.github.com/users/gaearon/repos",
      "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gaearon/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2018-08-25T19:02:14Z",
    "updated_at": "2020-06-19T06:53:39Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/13483",
      "html_url": "https://github.com/facebook/react/pull/13483",
      "diff_url": "https://github.com/facebook/react/pull/13483.diff",
      "patch_url": "https://github.com/facebook/react/pull/13483.patch"
    },
    "body": "I think this demonstrates what I've been running into with my time slicing demo. Not sure though â€” maybe it's a different problem. If there is a good explanation for this behavior I can dig further.\r\n\r\nThe symptom I was seeing is that if I flood the scheduler with enough low pri work, it would make a synchronous long chain of commits during expiration â€” sometimes locking up the thread for 20 seconds or so. I couldn't find a way to reproduce more than one extra commit in this test, but maybe this is enough to demonstrate the issue?",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/13450",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/13450/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/13450/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/13450/events",
    "html_url": "https://github.com/facebook/react/issues/13450",
    "id": 352431414,
    "node_id": "MDU6SXNzdWUzNTI0MzE0MTQ=",
    "number": 13450,
    "title": "UMD builds are not enabled on UNPKG",
    "user": {
      "login": "nickmccurdy",
      "id": 927220,
      "node_id": "MDQ6VXNlcjkyNzIyMA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/927220?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nickmccurdy",
      "html_url": "https://github.com/nickmccurdy",
      "followers_url": "https://api.github.com/users/nickmccurdy/followers",
      "following_url": "https://api.github.com/users/nickmccurdy/following{/other_user}",
      "gists_url": "https://api.github.com/users/nickmccurdy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nickmccurdy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nickmccurdy/subscriptions",
      "organizations_url": "https://api.github.com/users/nickmccurdy/orgs",
      "repos_url": "https://api.github.com/users/nickmccurdy/repos",
      "events_url": "https://api.github.com/users/nickmccurdy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nickmccurdy/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710375792,
        "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 12,
    "created_at": "2018-08-21T08:14:19Z",
    "updated_at": "2020-09-03T19:52:10Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Visiting https://unpkg.com/react displays the CJS build (https://unpkg.com/react@16.4.2/index.js) when the UMD build (https://unpkg.com/react@16.4.2/umd/react.development.js) should be displayed instead. I also noticed this issue with react-dom, so I assume all packages need to be fixed.\r\n\r\nPlease refer to the usage instructions at the bottom of https://unpkg.com/.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/13424",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/13424/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/13424/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/13424/events",
    "html_url": "https://github.com/facebook/react/issues/13424",
    "id": 351662938,
    "node_id": "MDU6SXNzdWUzNTE2NjI5Mzg=",
    "number": 13424,
    "title": "onChange doesn't fire if input re-renders due to a setState() in a non-React capture phase listener",
    "user": {
      "login": "gaearon",
      "id": 810438,
      "node_id": "MDQ6VXNlcjgxMDQzOA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gaearon",
      "html_url": "https://github.com/gaearon",
      "followers_url": "https://api.github.com/users/gaearon/followers",
      "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
      "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
      "organizations_url": "https://api.github.com/users/gaearon/orgs",
      "repos_url": "https://api.github.com/users/gaearon/repos",
      "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gaearon/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 127893911,
        "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
        "name": "Component: DOM",
        "color": "fef2c0",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      },
      {
        "id": 40929151,
        "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
        "name": "Type: Bug",
        "color": "b60205",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 10,
    "created_at": "2018-08-17T16:41:41Z",
    "updated_at": "2020-11-04T17:11:52Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "Extracting from https://github.com/facebook/react/issues/12643.\r\n\r\nThis issue has always been in React. I can reproduce it up to React 0.11. However **it's probably extremely rare in practice and isn't worth fixing**. I'm just filing this for posterity.\r\n\r\nHere is a minimal example.\r\n\r\n```js\r\nclass App extends React.Component {\r\n  state = {value: ''}\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      value: e.target.value\r\n    });\r\n  }\r\n  componentDidMount() {\r\n    document.addEventListener(\r\n      \"input\",\r\n      () => {\r\n        // COMMENT OUT THIS LINE TO FIX:\r\n        this.setState({});\r\n      },\r\n      true\r\n    );\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <input\r\n          value={this.state.value}\r\n          onChange={this.handleChange}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nReactDOM.render(<App />, document.getElementById(\"container\"));\r\n```\r\n\r\nTyping doesn't work â€” unless I comment out that `setState` call in the capture phase listener.\r\n\r\nSay the input is empty and we're typing `a`.\r\n\r\nWhat happens here is that `setState({})` in the capture phase non-React listener runs first. When re-rendering due to that first empty `setState({})`, input props still contain the old value (`\"\"`) while the DOM node's value is new (`\"a\"`). They're not equal, so we'll set the DOM node value to `\"\"` (according to the props) and remember `\"\"` as the current value.\r\n\r\n<img width=\"549\" alt=\"screen shot 2018-08-17 at 1 08 42 am\" src=\"https://user-images.githubusercontent.com/810438/44241204-4b0e0880-a1ba-11e8-847d-bf9ca43eb954.png\">\r\n\r\nThen, `ChangeEventPlugin` tries to decide whether to emit a change event. It asks the tracker whether the value has changed. The tracker compares the presumably \"new\" `node.value` (it's `\"\"` â€” we've just set it earlier!) with the `lastValue` it has stored (also `\"\"` â€” and also just updated). No changes!\r\n\r\n<img width=\"505\" alt=\"screen shot 2018-08-17 at 1 10 59 am\" src=\"https://user-images.githubusercontent.com/810438/44241293-e0110180-a1ba-11e8-9c5a-b0d808f745cd.png\">\r\n\r\n\r\nOur `\"a\"` update is lost. We never get the change event, and never actually get a chance to set the correct state.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/13413",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/13413/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/13413/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/13413/events",
    "html_url": "https://github.com/facebook/react/issues/13413",
    "id": 351045644,
    "node_id": "MDU6SXNzdWUzNTEwNDU2NDQ=",
    "number": 13413,
    "title": "Umbrella: Chopping Block",
    "user": {
      "login": "sebmarkbage",
      "id": 63648,
      "node_id": "MDQ6VXNlcjYzNjQ4",
      "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sebmarkbage",
      "html_url": "https://github.com/sebmarkbage",
      "followers_url": "https://api.github.com/users/sebmarkbage/followers",
      "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
      "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
      "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
      "repos_url": "https://api.github.com/users/sebmarkbage/repos",
      "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      },
      {
        "id": 710615342,
        "node_id": "MDU6TGFiZWw3MTA2MTUzNDI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Umbrella",
        "name": "Type: Umbrella",
        "color": "5319e7",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2018-08-16T03:50:15Z",
    "updated_at": "2020-01-08T19:16:11Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "I wanted to create a list of things whose existence makes React bigger and more complicated than necessary. This makes them more likely to need to be deprecated and actually removed in a future version. No clue of when this will happen and what the recommended upgrade path will be so don't take this issue as advice that you should move away from them until there's clear upgrade advice. You might make it worse by doing so.\r\n\r\n(This has some overlap with https://github.com/facebook/react/issues/9475 but those seem more longer term.)\r\n\r\n- [ ] __Unsafe Life Cycles without UNSAFE prefix__ - We'll keep the ones prefixed UNSAFE indefinitely but the original ones will likely be deprecated and removed.\r\n\r\n- [ ] __Legacy context__ - `.contextTypes`, `.childContextTypes`, `getChildContext` - The old context is full of edge cases for when it is accidentally supposed to work and the way it is designed requires all React code to become slower just to support this feature.\r\n\r\n- [ ] __String refs__ - This requires current owner to be exposed at runtime. While it is likely that some form of owner will remain, this particular semantics is likely not what we want out of it. So rather than having two owners, we should just remove this feature. It also requires an extra field on every ReactElement which is otherwise not needed.\r\n\r\n- [ ] __Module pattern components__ - This is a little used feature that lets you return a class instance from a regular function without extending `React.Component`. This is not that useful. In practice the ecosystem has moved around ES class like usage, and other language compiling to JS tries to comply with that model as well. The existence of this feature means that we don't know that something is a functional component by just testing if it's a function that is not extending `React.Component`. Instead we have to do some extra feature testing for every functional component there is. It also prevents us from passing the ref as the second argument by default for all functional components without using `forwardRef` since that wouldn't be valid for class components.\r\n\r\n- [ ] __Uncontrolled onInput__ - This is described in #9657. Because we support uncontrolled polyfilling of this event, we have to do pretty invasive operations to the DOM like attaching setters. This is all in support of imperative usage of the DOM which should be out-of-scope for React.\r\n\r\n- [ ] __setState in componentDidCatch__ - Currently we support error recovery in `componentDidCatch` but once we support `getDerivedStateFromCatch` we might want to consider deprecating the old mechanism which automatically first commits null. The semantics of this are a bit weird and requires complicated code that we likely get wrong sometimes.\r\n\r\n- [ ] __Context Object As Consumer__ - Right now it is possible to use the Context object as a Consumer render prop. That's an artifact of reusing the same object allocation but not documented. We'll want to deprecate that and make it the Provider instead.\r\n\r\n- [ ] __No GC of not unmounted roots__ - This likely won't come with a warning. We'll just do it. It's not a breaking behavior other than memory usage. You have to call `unmountComponentAtNode` or that component won't be cleaned up. Almost always it is not cleaned up anyway since if you have at least one subscription that still holds onto it. Arguably this is not even a breaking change. #13293\r\n\r\n- [ ] __unstable_renderSubtreeIntoContainer__ - This is replaced by Portals. It is already problematic since it can't be used in life-cycles but it also add lots of special case code to transfer the context. Since legacy context itself likely will be deprecated, this serves no purposes.\r\n\r\n- [x] __ReactDOM.render with hydration__ - This has already been deprecated. This requires extra code and requires us to generate an extra attribute in the HTML to auto-select hydration. People should be using ReactDOM.hydrate instead. We just need to remove the old behavior and the attribute in ReactDOMServer.\r\n\r\n- [ ] __Return value of `ReactDOM.render()`__ - We can't synchronously return an instance when inside a lifecycle/callback/effect, or in concurrent mode. Should use a ref instead.\r\n\r\n- [ ] __All of `ReactDOM.render()`__ - Switch everyone over to `createRoot`, with an option to make `createRoot` sync.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/13400",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/13400/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/13400/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/13400/events",
    "html_url": "https://github.com/facebook/react/issues/13400",
    "id": 350627761,
    "node_id": "MDU6SXNzdWUzNTA2Mjc3NjE=",
    "number": 13400,
    "title": "Boolean DOM properties coerce empty string to false, contrary to HTML standard",
    "user": {
      "login": "motiz88",
      "id": 2246565,
      "node_id": "MDQ6VXNlcjIyNDY1NjU=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2246565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/motiz88",
      "html_url": "https://github.com/motiz88",
      "followers_url": "https://api.github.com/users/motiz88/followers",
      "following_url": "https://api.github.com/users/motiz88/following{/other_user}",
      "gists_url": "https://api.github.com/users/motiz88/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/motiz88/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/motiz88/subscriptions",
      "organizations_url": "https://api.github.com/users/motiz88/orgs",
      "repos_url": "https://api.github.com/users/motiz88/repos",
      "events_url": "https://api.github.com/users/motiz88/events{/privacy}",
      "received_events_url": "https://api.github.com/users/motiz88/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710375792,
        "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2018-08-14T23:04:45Z",
    "updated_at": "2018-08-15T00:22:01Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\nThis is in kind of the same space as https://github.com/facebook/react/pull/13372 and is an offshoot of my attempt to better [model React DOM props in Flow](https://github.com/facebook/flow/pull/6727).\r\n\r\n**tl;dr:** Should React warn when the value `\"\"` is passed into a known boolean DOM prop?\r\n\r\n---\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nDepends on interpretation ðŸ˜…  This is possibly a bug, definitely an inconsistency worth mitigating IMHO.\r\n\r\n**What is the current behavior?**\r\n\r\nReact normalises values supplied to [known DOM boolean props](https://github.com/facebook/react/blob/69e2a0d732e1ca74f6dc5df9d0ddd0bf24373965/packages/react-dom/src/shared/DOMProperty.js#L278-L331) (e.g. `readOnly`) such that passing the empty string `\"\"` (being falsy in JavaScript) results in the corresponding attribute being omitted from the HTML output. However, in [HTML](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attribute), the empty string is a truthy value in this context; it's one of the values that the standard specifically allows in boolean attributes.\r\n\r\nThe above is a potential source of confusion in itself, but React 16's handling of unknown attributes gives rise to the following hypothetical scenario: a new DOM boolean attribute `foobar` is introduced, some people write JSX code that uses it as `foobar=\"\"` (passed through to HTML, truthy), and later React adds `foobar` to its internal whitelist in a minor/patch version and starts processing it as a boolean (JS falsy, omitted from HTML); this would _technically_ be a breaking change for those people.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem.**\r\n\r\nhttps://codesandbox.io/s/y0pmz9149x\r\n\r\n**What is the expected behavior?**\r\n\r\nThere is definitely a clash of expectations here at the interface of JS and HTML.\r\n\r\n1. Coming from JS, `\"\"` is falsy and treating it as such in a \"boolean\" prop is fine; from this perspective, the current behaviour is justifiable.\r\n2. Coming from HTML, it might not be obvious that React is doing this \"extra\" processing and deviating from what's clearly stated in the HTML spec; from this perspective, the current behaviour is surprising.\r\n\r\nThere probably isn't justification for changing React's actual handling of `\"\"` (not least for fear of breaking code that relies on this long-standing behaviour, see version information below), but perhaps a warning about the ambiguity is warranted, a la #13372?\r\n\r\nNote that a warning won't fully mitigate the worst-case scenario I mentioned above (since we can't warn about a prop that we don't _know_ is a DOM boolean), but at least it would give some signal _after_ the React version update that the code might not be doing the expected thing anymore.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nVersions of React as far back as 0.14 (and probably way older) process whitelisted boolean DOM props the same way.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/13342",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/13342/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/13342/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/13342/events",
    "html_url": "https://github.com/facebook/react/issues/13342",
    "id": 348420896,
    "node_id": "MDU6SXNzdWUzNDg0MjA4OTY=",
    "number": 13342,
    "title": "RFC: Omit end tags when possible in ReactDOMServerRenderer",
    "user": {
      "login": "tvler",
      "id": 4934193,
      "node_id": "MDQ6VXNlcjQ5MzQxOTM=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/4934193?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tvler",
      "html_url": "https://github.com/tvler",
      "followers_url": "https://api.github.com/users/tvler/followers",
      "following_url": "https://api.github.com/users/tvler/following{/other_user}",
      "gists_url": "https://api.github.com/users/tvler/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tvler/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tvler/subscriptions",
      "organizations_url": "https://api.github.com/users/tvler/orgs",
      "repos_url": "https://api.github.com/users/tvler/repos",
      "events_url": "https://api.github.com/users/tvler/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tvler/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710332294,
        "node_id": "MDU6TGFiZWw3MTAzMzIyOTQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Server%20Rendering",
        "name": "Component: Server Rendering",
        "color": "d4c5f9",
        "default": false,
        "description": null
      },
      {
        "id": 710375792,
        "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2018-08-07T17:41:53Z",
    "updated_at": "2018-10-05T20:56:08Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "# Background\r\n\r\nThere are a lot of instances defined in the HTML spec where end tags can be omitted while still maintaining valid markup.\r\n\r\nSome examples:\r\n\r\n> An li elementâ€™s end tag may be omitted if the li element is immediately followed by another li element or if there is no more content in the parent element.\r\n\r\n> A p elementâ€™s end tag may be omitted if the p element is immediately followed by an address, article, aside, blockquote, details, div, dl, fieldset, figcaption, figure, footer, form, h1, h2, h3, h4, h5, h6, header, hr, main, nav, ol, p, pre, section, table, or ul element, or if there is no more content in the parent element and the parent element is an HTML element that is not an a, audio, del, ins, map, noscript, or video element, or an autonomous custom element.\r\n\r\nYou can see all of them over at https://www.w3.org/TR/html5/syntax.html#optional-tags\r\n\r\nUtilizing these rules, I think it may be possible to reduce the amount of html needed to be initially downloaded by the user for serverside rendering.\r\n\r\nDepending on what's being rendered, there could be a significant decrease in html size. Here's an example I pulled from the W3C of a table element utilizing these rules. The difference is 464 bytes compared to 629 â€“ about a **26% decrease** in size.\r\n\r\n```html\r\n<table>\r\n<caption>37547 TEE Electric Powered Rail Car Train Functions (Abbreviated)\r\n<colgroup><col><col><col>\r\n<thead>\r\n<tr>\r\n  <th>Function\r\n  <th>Control Unit\r\n  <th>Central Station\r\n<tbody>\r\n<tr>\r\n  <td>Headlights\r\n  <td>âœ”\r\n  <td>âœ”\r\n<tr>\r\n  <td>Interior Lights\r\n  <td>âœ”\r\n  <td>âœ”\r\n<tr>\r\n  <td>Electric locomotive operating sounds\r\n  <td>âœ”\r\n  <td>âœ”\r\n<tr>\r\n  <td>Engineerâ€™s cab lighting\r\n  <td>\r\n  <td>âœ”\r\n<tr>\r\n  <td>Station Announcements - Swiss\r\n  <td>\r\n  <td>âœ”\r\n</table>\r\n```\r\n\r\n# Caveats\r\n\r\n- Even though these rules are in the spec, they still feel like quirks to me. There probably are some browser-to-browser differences in how these are handled.\r\n- Should this even be handled by React? I could see a babel plugin or something like that being a good fit for an optimization like this too.\r\n\r\n# Possible roadmap\r\n\r\n- Research what end tags would be stable to omit (https://www.w3.org/TR/html5/syntax.html#optional-tags)\r\n- Roll out this optimization for a subset of tags\r\n- Gauge real-world load time improvements and continue adding omission cases if everything is looking good",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/13332",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/13332/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/13332/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/13332/events",
    "html_url": "https://github.com/facebook/react/issues/13332",
    "id": 348051866,
    "node_id": "MDU6SXNzdWUzNDgwNTE4NjY=",
    "number": 13332,
    "title": "Support cross-renderer portals",
    "user": {
      "login": "gaearon",
      "id": 810438,
      "node_id": "MDQ6VXNlcjgxMDQzOA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gaearon",
      "html_url": "https://github.com/gaearon",
      "followers_url": "https://api.github.com/users/gaearon/followers",
      "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
      "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
      "organizations_url": "https://api.github.com/users/gaearon/orgs",
      "repos_url": "https://api.github.com/users/gaearon/repos",
      "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gaearon/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 739761016,
        "node_id": "MDU6TGFiZWw3Mzk3NjEwMTY=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler",
        "name": "Component: Reconciler",
        "color": "f9a798",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      },
      {
        "id": 270986513,
        "node_id": "MDU6TGFiZWwyNzA5ODY1MTM=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Big%20Picture",
        "name": "Type: Big Picture",
        "color": "61dafb",
        "default": false,
        "description": null
      },
      {
        "id": 121709921,
        "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
        "name": "Type: Feature Request",
        "color": "c7def8",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2018-08-06T19:26:11Z",
    "updated_at": "2020-09-01T02:06:42Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "Currently `createPortal` only works within the current renderer.\r\n\r\nThis means that if you want to embed one renderer into another (e.g. `react-art` in `react-dom`), your only option is to do an imperative render in a commit-time hook like `componentDidMount` or `componentDidUpdate` of the outer renderer's component. In fact that's exactly how `react-art` works today.\r\n\r\nWith this approach, nested renderers like `react-art` can't read the context of the outer renderers (https://github.com/facebook/react/issues/12796). Similarly, we can't time-slice updates in inner renderers because we only update the inner container at the host renderer's commit time.\r\n\r\nAt the time we originally discussed portals we wanted to make them work across renderers. So that you could do something like\r\n\r\n```js\r\n<div>\r\n  <Portal to={ReactART}>\r\n    <surface>\r\n      <rect />\r\n    </surface>\r\n  </Portal>\r\n</div>\r\n```\r\n\r\nBut it's not super clear how this should work because renderers can bundle incompatible Fiber implementations. Whose implementation takes charge?\r\n\r\nWe'll want to figure something out eventually. For now I'm filing this for future reference.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/13306",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/13306/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/13306/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/13306/events",
    "html_url": "https://github.com/facebook/react/issues/13306",
    "id": 346806017,
    "node_id": "MDU6SXNzdWUzNDY4MDYwMTc=",
    "number": 13306,
    "title": "[Umbrella] Releasing Time Slicing",
    "user": {
      "login": "gaearon",
      "id": 810438,
      "node_id": "MDQ6VXNlcjgxMDQzOA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gaearon",
      "html_url": "https://github.com/gaearon",
      "followers_url": "https://api.github.com/users/gaearon/followers",
      "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
      "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
      "organizations_url": "https://api.github.com/users/gaearon/orgs",
      "repos_url": "https://api.github.com/users/gaearon/repos",
      "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gaearon/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      },
      {
        "id": 710615342,
        "node_id": "MDU6TGFiZWw3MTA2MTUzNDI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Umbrella",
        "name": "Type: Umbrella",
        "color": "5319e7",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 8,
    "created_at": "2018-08-01T23:28:02Z",
    "updated_at": "2020-01-08T19:16:10Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "Let's use this to track what's missing before Time Slicing is usable internally and in open source.\r\n**This list is probably very incomplete, feel free to add more.**\r\n\r\n## Initial release (MVP)\r\n\r\n### Core\r\n- [x] Decide on the recommended low/high pri split pattern\r\n- [x] Fix `unstable_deferredUpdates` not being respected in interactive event handlers (reproducible in the fixture) https://github.com/facebook/react/pull/13488\r\n- [x] Fix or provide a workaround for an issue with a chain of synchronous commits on expiration (reproducible in the fixture) https://github.com/facebook/react/pull/13483\r\n- [ ] Resuming\r\n- [ ] Off-screen `<div hidden>` API\r\n\r\n### Scheduler\r\n\r\n- [ ] Decide on naming (@flarnie, React Core team)\r\n- [ ] Adding support for priority (@flarnie)\r\n    * May involve bikeshedding, iteration\r\n    * Will require changes to React Fiber Scheduler\r\n    - [ ] Add a fixture showing using JS Scheduler with React and also external JS\r\n- [ ] Better handle when tab is backgrounded (@flarnie)\r\n- [ ] Improvements to polyfill for rAF\r\n- [ ] Integrate and dogfood with internal FB products - see internal task T32773869 (@flarnie)\r\n- [ ] Create final API which is not renderer-dependent \r\n- [ ] Make `react-dom` depend on it, and publish it in open source (@flarnie, others internally)\r\n\r\n\r\n\r\n---\r\n\r\nRelated: Suspense Umbrella (https://github.com/facebook/react/issues/13206)",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/13224",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/13224/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/13224/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/13224/events",
    "html_url": "https://github.com/facebook/react/issues/13224",
    "id": 342104031,
    "node_id": "MDU6SXNzdWUzNDIxMDQwMzE=",
    "number": 13224,
    "title": "Seal or Prevent Extensions on Pooled Events",
    "user": {
      "login": "gaearon",
      "id": 810438,
      "node_id": "MDQ6VXNlcjgxMDQzOA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gaearon",
      "html_url": "https://github.com/gaearon",
      "followers_url": "https://api.github.com/users/gaearon/followers",
      "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
      "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
      "organizations_url": "https://api.github.com/users/gaearon/orgs",
      "repos_url": "https://api.github.com/users/gaearon/repos",
      "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gaearon/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      },
      {
        "id": 763742499,
        "node_id": "MDU6TGFiZWw3NjM3NDI0OTk=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Breaking%20Change",
        "name": "Type: Breaking Change",
        "color": "aa2608",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": {
      "url": "https://api.github.com/repos/facebook/react/milestones/40",
      "html_url": "https://github.com/facebook/react/milestone/40",
      "labels_url": "https://api.github.com/repos/facebook/react/milestones/40/labels",
      "id": 2937756,
      "node_id": "MDk6TWlsZXN0b25lMjkzNzc1Ng==",
      "number": 40,
      "title": "18.0.0",
      "description": "",
      "creator": {
        "login": "gaearon",
        "id": 810438,
        "node_id": "MDQ6VXNlcjgxMDQzOA==",
        "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gaearon",
        "html_url": "https://github.com/gaearon",
        "followers_url": "https://api.github.com/users/gaearon/followers",
        "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
        "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
        "organizations_url": "https://api.github.com/users/gaearon/orgs",
        "repos_url": "https://api.github.com/users/gaearon/repos",
        "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gaearon/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 8,
      "closed_issues": 2,
      "state": "open",
      "created_at": "2017-11-26T22:47:57Z",
      "updated_at": "2020-08-28T18:04:04Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 1,
    "created_at": "2018-07-17T21:57:39Z",
    "updated_at": "2020-01-08T19:16:45Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "<s>I'm going to revert</s> I have reverted https://github.com/facebook/react/pull/5947 because it's [very confusing](https://mobile.twitter.com/ReactStudent/status/1018749513572368384) to see Proxies in the console. The warning is just not worth the debugging impediment.\r\n\r\nIn the future, we should consider sealing or preventing extensions to pooled events (if we're not getting rid of pooling altogether, that is). But that would be a breaking change.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/13212",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/13212/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/13212/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/13212/events",
    "html_url": "https://github.com/facebook/react/issues/13212",
    "id": 341354341,
    "node_id": "MDU6SXNzdWUzNDEzNTQzNDE=",
    "number": 13212,
    "title": "Investigate IE/Edge select rendering bug",
    "user": {
      "login": "nhunzaker",
      "id": 590904,
      "node_id": "MDQ6VXNlcjU5MDkwNA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/590904?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nhunzaker",
      "html_url": "https://github.com/nhunzaker",
      "followers_url": "https://api.github.com/users/nhunzaker/followers",
      "following_url": "https://api.github.com/users/nhunzaker/following{/other_user}",
      "gists_url": "https://api.github.com/users/nhunzaker/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nhunzaker/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nhunzaker/subscriptions",
      "organizations_url": "https://api.github.com/users/nhunzaker/orgs",
      "repos_url": "https://api.github.com/users/nhunzaker/repos",
      "events_url": "https://api.github.com/users/nhunzaker/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nhunzaker/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 69105383,
        "node_id": "MDU6TGFiZWw2OTEwNTM4Mw==",
        "url": "https://api.github.com/repos/facebook/react/labels/Browser:%20IE",
        "name": "Browser: IE",
        "color": "c7def8",
        "default": false,
        "description": null
      },
      {
        "id": 127893911,
        "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
        "name": "Component: DOM",
        "color": "fef2c0",
        "default": false,
        "description": null
      },
      {
        "id": 710722093,
        "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
        "name": "Type: Needs Investigation",
        "color": "fbca04",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2018-07-15T21:36:18Z",
    "updated_at": "2020-04-01T21:08:37Z",
    "closed_at": null,
    "author_association": "COLLABORATOR",
    "active_lock_reason": null,
    "body": "This is a follow up from an issue related to change events on selects in IE/Edge (https://github.com/facebook/react/issues/4672). It looks like this is no longer an issue, but there's a visual regression on IE/Edge that might be avoidable.\r\n\r\n**Reproduction**\r\n\r\nhttps://codepen.io/nhunzaker/pen/qybxmz\r\n\r\n**Observation**\r\n\r\nFrom @jasonwilliams (https://github.com/facebook/react/issues/4672#issuecomment-404534681):\r\n\r\n> change and MouseUp both fire for me in Microsoft Edge 42.17134.1.0 @nhunzaker\r\nAlthough, the rendering of the select box is weird, it doesn't appear to expand when i click on it\r\n\r\n**We need to:**\r\n\r\n- [ ] Capture a GIF of the behavior for documentation purposes (this can just live in this thread)\r\n- [ ] Reproduce the test case outside of React, so that we can isolate the mechanics involved\r\n- [ ] Fix it :)",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/13206",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/13206/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/13206/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/13206/events",
    "html_url": "https://github.com/facebook/react/issues/13206",
    "id": 341142665,
    "node_id": "MDU6SXNzdWUzNDExNDI2NjU=",
    "number": 13206,
    "title": "[Umbrella] Releasing Suspense",
    "user": {
      "login": "acdlite",
      "id": 3624098,
      "node_id": "MDQ6VXNlcjM2MjQwOTg=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3624098?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/acdlite",
      "html_url": "https://github.com/acdlite",
      "followers_url": "https://api.github.com/users/acdlite/followers",
      "following_url": "https://api.github.com/users/acdlite/following{/other_user}",
      "gists_url": "https://api.github.com/users/acdlite/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/acdlite/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/acdlite/subscriptions",
      "organizations_url": "https://api.github.com/users/acdlite/orgs",
      "repos_url": "https://api.github.com/users/acdlite/repos",
      "events_url": "https://api.github.com/users/acdlite/events{/privacy}",
      "received_events_url": "https://api.github.com/users/acdlite/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      },
      {
        "id": 710615342,
        "node_id": "MDU6TGFiZWw3MTA2MTUzNDI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Umbrella",
        "name": "Type: Umbrella",
        "color": "5319e7",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 83,
    "created_at": "2018-07-13T20:01:03Z",
    "updated_at": "2020-10-20T03:35:06Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "Let's use this issue to track the remaining tasks for releasing Suspense to open source.\r\n\r\n## Initial release (MVP)\r\n\r\n### Core\r\n- [x] API to read context from within any render phase function (@acdlite) [#13139]\r\n- [x] Hide timed-out content instead of deleting it  (@acdlite) [#13120]\r\n- [ ] Automatic injection of context providers per React root (@acdlite) [#13293]\r\n- [ ] Remove `unstable_` prefix from `AsyncMode` (maybe?)\r\n- [ ] Support for synchronous thenables, and for promises that resolve before the render phase is complete.\r\n  - [ ] Confirm that a synchronous thenable that throws an error is handled correctly\r\n- [ ] Confirm it works with `<div hidden>` [#13089]\r\n- [ ] Why does clicking on several detail links in the fixture one by one eventually causes a big placeholder even if I wait for each of them for less than the placeholder delay before clicking the next one ([see tweet](https://mobile.twitter.com/niklasbostrom/status/1025278135082934272))?\r\n\r\n### Simple Cache Provider\r\n- [ ] Cache invalidation (@acdlite) [#13337]\r\n- [ ] Subscriptions (@acdlite) [#13337]\r\n- [ ] Decide on actual name\r\n\r\n### Code splitting\r\n- [x] Support promise as a component type\r\n- [x] (maybe) Open source `lazyLoadComponent`?\r\n\r\n### Test renderer\r\n- [ ] Finalize public APIs for `flushAll`, `yield`, etc\r\n  - Tentative plan is to publish custom matchers for each of the major testing frameworks, a la #13236.\r\n\r\n### Docs\r\n- [ ] Blog post\r\n- [ ] `React.Placeholder`\r\n- [ ] simple-cache-provider\r\n- [ ] Unnamed code-splitting library\r\n\r\n## Follow ups\r\n\r\n### Soft expiration (https://github.com/facebook/react/issues/14248)\r\n- [ ] Implement an API for in-place loading indicators that aren't ancestors\r\n- [ ] Make sure there's a way to avoid flashing the inline spinner if it's fast enough\r\n\r\n### Streaming server renderer\r\n- [ ] Implement a streaming server renderer like the one in @acdlite's ZEIT talk\r\n- [ ] Partial hydration\r\n\r\n------\r\n\r\nRelated: Time Slicing Umbrella (https://github.com/facebook/react/issues/13306)",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/13204",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/13204/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/13204/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/13204/events",
    "html_url": "https://github.com/facebook/react/issues/13204",
    "id": 341038585,
    "node_id": "MDU6SXNzdWUzNDEwMzg1ODU=",
    "number": 13204,
    "title": "Longterm support for Internet Explorer",
    "user": {
      "login": "a-reuss",
      "id": 41198378,
      "node_id": "MDQ6VXNlcjQxMTk4Mzc4",
      "avatar_url": "https://avatars3.githubusercontent.com/u/41198378?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/a-reuss",
      "html_url": "https://github.com/a-reuss",
      "followers_url": "https://api.github.com/users/a-reuss/followers",
      "following_url": "https://api.github.com/users/a-reuss/following{/other_user}",
      "gists_url": "https://api.github.com/users/a-reuss/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/a-reuss/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/a-reuss/subscriptions",
      "organizations_url": "https://api.github.com/users/a-reuss/orgs",
      "repos_url": "https://api.github.com/users/a-reuss/repos",
      "events_url": "https://api.github.com/users/a-reuss/events{/privacy}",
      "received_events_url": "https://api.github.com/users/a-reuss/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710375792,
        "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2018-07-13T14:23:24Z",
    "updated_at": "2019-02-01T23:07:14Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**feature**\r\n\r\nI'd like to know how the current roadmap for support of the Internet Explorer (namely the IE11) is. Is there a time frame for which react guarantees IE support and if yes for how long?\r\n\r\nBest regards and thanks for any answer! ",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/13115",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/13115/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/13115/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/13115/events",
    "html_url": "https://github.com/facebook/react/issues/13115",
    "id": 336202288,
    "node_id": "MDU6SXNzdWUzMzYyMDIyODg=",
    "number": 13115,
    "title": "onMouseLeave false triggering when using svg <use> in IE11",
    "user": {
      "login": "kuzkokov",
      "id": 12381291,
      "node_id": "MDQ6VXNlcjEyMzgxMjkx",
      "avatar_url": "https://avatars2.githubusercontent.com/u/12381291?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kuzkokov",
      "html_url": "https://github.com/kuzkokov",
      "followers_url": "https://api.github.com/users/kuzkokov/followers",
      "following_url": "https://api.github.com/users/kuzkokov/following{/other_user}",
      "gists_url": "https://api.github.com/users/kuzkokov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kuzkokov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kuzkokov/subscriptions",
      "organizations_url": "https://api.github.com/users/kuzkokov/orgs",
      "repos_url": "https://api.github.com/users/kuzkokov/repos",
      "events_url": "https://api.github.com/users/kuzkokov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kuzkokov/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 69105383,
        "node_id": "MDU6TGFiZWw2OTEwNTM4Mw==",
        "url": "https://api.github.com/repos/facebook/react/labels/Browser:%20IE",
        "name": "Browser: IE",
        "color": "c7def8",
        "default": false,
        "description": null
      },
      {
        "id": 127893911,
        "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
        "name": "Component: DOM",
        "color": "fef2c0",
        "default": false,
        "description": null
      },
      {
        "id": 710722093,
        "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
        "name": "Type: Needs Investigation",
        "color": "fbca04",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2018-06-27T12:11:18Z",
    "updated_at": "2020-04-01T21:06:37Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug.\r\n\r\n**What is the current behavior?**\r\nAs you can see in the example below, onMouseLeave of parent element get triggered every time, when you hover the svg which is get element to render by `<use>` in IE11 (and probably lower).  \r\nIt works as expected in other browsers and with regular `<path>` inside svg. And also, the native event work as expected too (as you can see in expample), so I identify the bug as React's.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\nhttps://codesandbox.io/s/jnn8w7940w\r\n\r\n**What is the expected behavior?**\r\nTo not trigger onMouseLeave when mouse doesn't leave the parent element.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nTested on React 16.3.2 and 16.4.1.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/13104",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/13104/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/13104/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/13104/events",
    "html_url": "https://github.com/facebook/react/issues/13104",
    "id": 335214547,
    "node_id": "MDU6SXNzdWUzMzUyMTQ1NDc=",
    "number": 13104,
    "title": "add support for SyntheticKeyboardEvent#isComposing",
    "user": {
      "login": "mattkrick",
      "id": 5514175,
      "node_id": "MDQ6VXNlcjU1MTQxNzU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5514175?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattkrick",
      "html_url": "https://github.com/mattkrick",
      "followers_url": "https://api.github.com/users/mattkrick/followers",
      "following_url": "https://api.github.com/users/mattkrick/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattkrick/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattkrick/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattkrick/subscriptions",
      "organizations_url": "https://api.github.com/users/mattkrick/orgs",
      "repos_url": "https://api.github.com/users/mattkrick/repos",
      "events_url": "https://api.github.com/users/mattkrick/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattkrick/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 127893911,
        "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
        "name": "Component: DOM",
        "color": "fef2c0",
        "default": false,
        "description": null
      },
      {
        "id": 121709921,
        "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
        "name": "Type: Feature Request",
        "color": "c7def8",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 13,
    "created_at": "2018-06-24T21:49:31Z",
    "updated_at": "2020-09-12T03:15:55Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nSynthetic keyboard events do not contain `isComposing`.\r\nThey should if the value is true, per the w3 spec 4.7.5: https://www.w3.org/TR/uievents/#events-compositionevents\r\n \r\n**What is the expected behavior?**\r\n`event.isComposing === event.nativeEvent.isComposing`\r\n\r\nSyntheticKeyboardEvent#isComposing is true when a keydown even is fired after compositionstart and before compositionend.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nall versions, up through at least 16.4.1",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/13097",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/13097/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/13097/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/13097/events",
    "html_url": "https://github.com/facebook/react/issues/13097",
    "id": 334981118,
    "node_id": "MDU6SXNzdWUzMzQ5ODExMTg=",
    "number": 13097,
    "title": "Add support for hydrating portals",
    "user": {
      "login": "marcusdarmstrong",
      "id": 3826925,
      "node_id": "MDQ6VXNlcjM4MjY5MjU=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/3826925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/marcusdarmstrong",
      "html_url": "https://github.com/marcusdarmstrong",
      "followers_url": "https://api.github.com/users/marcusdarmstrong/followers",
      "following_url": "https://api.github.com/users/marcusdarmstrong/following{/other_user}",
      "gists_url": "https://api.github.com/users/marcusdarmstrong/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/marcusdarmstrong/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/marcusdarmstrong/subscriptions",
      "organizations_url": "https://api.github.com/users/marcusdarmstrong/orgs",
      "repos_url": "https://api.github.com/users/marcusdarmstrong/repos",
      "events_url": "https://api.github.com/users/marcusdarmstrong/events{/privacy}",
      "received_events_url": "https://api.github.com/users/marcusdarmstrong/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 121709921,
        "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
        "name": "Type: Feature Request",
        "color": "c7def8",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 24,
    "created_at": "2018-06-22T18:45:31Z",
    "updated_at": "2020-08-05T20:50:18Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nProbably bug, but arguably a feature request, I suppose.\r\n\r\n**What is the current behavior?**\r\n\r\nI've attempted my best effort at a fiddle that shows off the particular issue. Obviously server side rendering is impossible via JSFiddle, but the markup should be equivalent to having rendered `Test` into a div with id `test-1` during server side render.\r\n\r\nhttps://jsfiddle.net/y8o5n2zg/\r\n\r\nAs seen in the fiddle, an attempt to ReactDOM.hydrate() a portal results in:\r\n> `Warning: Expected server HTML to contain a matching text node for \"Hello World\" in <div>.`\r\n\r\nAdditionally, after failing to hydrate, React renders the component and appends it resulting in a duplicated section of DOM:\r\n> `<div id=\"test-1\">Hello WorldHello World</div>`\r\n\r\n**What is the expected behavior?**\r\n\r\nIn an ideal world, calling hydrate on a component that has portals would allow those DOM containers to hydrate into the components they were rendered with.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nI've only tested this in 16.4.1, but I've confirmed the behavior in Chrome and Firefox. Given that I'm really looking at an edge case here I doubt it worked previously.\r\n\r\n\r\n#### *Why* I'm doing this edge-case-y nonsense:\r\n\r\nWe're currently using multiple React roots on our pages (as some portions of the pages are not rendered by React yet), most of which are server-side rendered. We'd like to be able to hydrate them into a single React root on page, so that we can share contexts between them without difficulty and without repeating those context components in memory (in some cases we can have a good number of roots on the pageâ€”20-30, perhaps?).\r\n\r\nIn searching, I found a few potentially related bugs (#12615, #10713, #11169), but it seemed like these really didn't line up with my (hopefully valid?) use case.\r\n\r\nThanks!\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/13044",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/13044/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/13044/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/13044/events",
    "html_url": "https://github.com/facebook/react/issues/13044",
    "id": 332416688,
    "node_id": "MDU6SXNzdWUzMzI0MTY2ODg=",
    "number": 13044,
    "title": "Allow Portals to be used for Reparenting",
    "user": {
      "login": "philipp-spiess",
      "id": 458591,
      "node_id": "MDQ6VXNlcjQ1ODU5MQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/458591?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/philipp-spiess",
      "html_url": "https://github.com/philipp-spiess",
      "followers_url": "https://api.github.com/users/philipp-spiess/followers",
      "following_url": "https://api.github.com/users/philipp-spiess/following{/other_user}",
      "gists_url": "https://api.github.com/users/philipp-spiess/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/philipp-spiess/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/philipp-spiess/subscriptions",
      "organizations_url": "https://api.github.com/users/philipp-spiess/orgs",
      "repos_url": "https://api.github.com/users/philipp-spiess/repos",
      "events_url": "https://api.github.com/users/philipp-spiess/events{/privacy}",
      "received_events_url": "https://api.github.com/users/philipp-spiess/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 121709921,
        "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
        "name": "Type: Feature Request",
        "color": "c7def8",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 27,
    "created_at": "2018-06-14T14:01:27Z",
    "updated_at": "2020-08-04T18:12:34Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nfeature\r\n\r\n**What is the current behavior?**\r\n\r\n[Reparenting](https://github.com/facebook/react/issues/3965) is an unsolved issues of React(DOM). So far, it was possible to hack around the missing support for it by relying on unstable API (`unstable_renderSubtreeIntoContainer`) to render **and update** a subtree inside a different container. It's important to note that this API was using React's diffing algorithm so that, similar to `ReactDOM.render()`, it is possible to keep components mounted.\r\n\r\n```js\r\nReactDOM.render(<Foo />, container);\r\n// This won't get <Foo /> to be unmounted and mounted again:\r\nReactDOM.render(<Foo />, container);\r\n\r\nReactDOM.unstable_renderSubtreeIntoContainer(\r\n  parentComponent,\r\n  <Foo />,\r\n  container\r\n);\r\n// This also won't get <Foo /> to be unmounted and mounted again, no matter if \r\n// we change parentComponent (and thus call it from a different parent):\r\nReactDOM.unstable_renderSubtreeIntoContainer(\r\n  parentComponent,\r\n  <Foo />,\r\n  container\r\n);\r\n```\r\n\r\nHowever this unstable API is [going to be deprecated soon](https://github.com/facebook/react/issues/10143) and recent features like the introduction of the new context API introduced [additional issues](https://github.com/facebook/react/issues/12493).\r\n\r\nAs an alternative to this unstable API, `ReactDOM.createPortal(children, container)` was introduced. However this API is unsuitable for the reparenting issue since it will always [create a new mount point](https://github.com/facebook/react/issues/10713) inside the `container` instead of applying the diffing _when called from a different parent_ (Check out this [CodeSandbox](https://codesandbox.io/s/91o7oovo54) where calling the portal from a different portal will cause the `<Leaf />` to have a new uuid). The reason for this is that we want multiple portals to be able to render inside the same `container` which makes perfect sense for more common use cases like popovers, etc.\r\n\r\nBefore we're going to remove `unstable_renderSubtreeIntoContainer`, I suggest we find a way to portal into a specific node instead of appending to it so that we can diff its contents instead (or implement a solution for #3965 although that seems to be more complicated), similar to `unstable_renderSubtreeIntoContainer`.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/12989",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/12989/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/12989/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/12989/events",
    "html_url": "https://github.com/facebook/react/issues/12989",
    "id": 330078193,
    "node_id": "MDU6SXNzdWUzMzAwNzgxOTM=",
    "number": 12989,
    "title": "Consider removing Mobile Safari empty onclick hack",
    "user": {
      "login": "gaearon",
      "id": 810438,
      "node_id": "MDQ6VXNlcjgxMDQzOA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gaearon",
      "html_url": "https://github.com/gaearon",
      "followers_url": "https://api.github.com/users/gaearon/followers",
      "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
      "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
      "organizations_url": "https://api.github.com/users/gaearon/orgs",
      "repos_url": "https://api.github.com/users/gaearon/repos",
      "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gaearon/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 127893911,
        "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
        "name": "Component: DOM",
        "color": "fef2c0",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      },
      {
        "id": 710722093,
        "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
        "name": "Type: Needs Investigation",
        "color": "fbca04",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 13,
    "created_at": "2018-06-07T00:36:14Z",
    "updated_at": "2020-01-08T19:16:44Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "See https://github.com/facebook/react/issues/238 and https://github.com/facebook/react/pull/1536 for historical context.\r\n\r\nIs that still relevant? The code is here:\r\n\r\nhttps://github.com/facebook/react/blob/52fbe7612e0527b8c86decac519c344626f6bd72/packages/react-dom/src/client/ReactDOMFiberComponent.js#L244-L245\r\n\r\nEven if it's relevant, can we just feature test it, and not do this hack on other browsers? Seems like a waste of memory for event handlers (even though the function is the same every time).",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/12749",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/12749/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/12749/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/12749/events",
    "html_url": "https://github.com/facebook/react/issues/12749",
    "id": 320516537,
    "node_id": "MDU6SXNzdWUzMjA1MTY1Mzc=",
    "number": 12749,
    "title": "IE 11 \"prompt to remember password\" regression bug since 15.2.0",
    "user": {
      "login": "luisrudge",
      "id": 941075,
      "node_id": "MDQ6VXNlcjk0MTA3NQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/941075?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luisrudge",
      "html_url": "https://github.com/luisrudge",
      "followers_url": "https://api.github.com/users/luisrudge/followers",
      "following_url": "https://api.github.com/users/luisrudge/following{/other_user}",
      "gists_url": "https://api.github.com/users/luisrudge/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luisrudge/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luisrudge/subscriptions",
      "organizations_url": "https://api.github.com/users/luisrudge/orgs",
      "repos_url": "https://api.github.com/users/luisrudge/repos",
      "events_url": "https://api.github.com/users/luisrudge/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luisrudge/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 69105383,
        "node_id": "MDU6TGFiZWw2OTEwNTM4Mw==",
        "url": "https://api.github.com/repos/facebook/react/labels/Browser:%20IE",
        "name": "Browser: IE",
        "color": "c7def8",
        "default": false,
        "description": null
      },
      {
        "id": 127893911,
        "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
        "name": "Component: DOM",
        "color": "fef2c0",
        "default": false,
        "description": null
      },
      {
        "id": 710722093,
        "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
        "name": "Type: Needs Investigation",
        "color": "fbca04",
        "default": false,
        "description": null
      },
      {
        "id": 178761159,
        "node_id": "MDU6TGFiZWwxNzg3NjExNTk=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Regression",
        "name": "Type: Regression",
        "color": "e11d21",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 16,
    "created_at": "2018-05-05T15:09:17Z",
    "updated_at": "2019-03-04T12:21:15Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "\r\n## Note: this issue seems solved for Edge but not for IE 11, see https://github.com/facebook/react/issues/12749#issuecomment-412671171\r\n\r\n\r\n\r\nThis issue was [already raised](https://github.com/facebook/react/issues/7328), but since it was closed, I'm opening a new one so we can get more traction on this.\r\n\r\nI'm still having this issue with both IE and Edge:\r\n\r\nWorks with 15.1.0: https://codesandbox.io/s/lpvz0zy9wq\r\nDoesn't work with 15.2.0: https://codesandbox.io/s/o9kl2jzo1q\r\nDoesn't work with 15.6.2: https://codesandbox.io/s/38kp95wl96\r\nDoesn't work with 16.3.1: https://codesandbox.io/s/xjpk3wr55p\r\n\r\nIn order to test this effectively, you have to follow a few steps:\r\n\r\n### Using Edge, go to **Settings** >> **View Advanced Settings**, under **Privacy and Services**\r\n\r\n- make sure you have **Offer to save passwords** enabled:\r\n![image](https://user-images.githubusercontent.com/941075/38700796-9c04a542-3e72-11e8-9aa5-b7e068c300b3.png)\r\n\r\n- make sure you don't have any passwords saved in the codesandbox.io domain:\r\n![image](https://user-images.githubusercontent.com/941075/38700921-ee497666-3e72-11e8-8b27-8e64fb6a4e2e.png)\r\n\r\n\r\n## Steps to reproduce when IT WORKS (15.1.0)\r\n\r\n- go to the [15.1.0](https://codesandbox.io/s/lpvz0zy9wq) sandbox\r\n- type a username and a password and hit submit\r\n- you'll see a confirmation panel about saving passwords:\r\n![image](https://user-images.githubusercontent.com/941075/38701037-409fdc70-3e73-11e8-8997-ec8ecc082163.png)\r\n- refresh the page\r\n- type another username and a password and hit submit\r\n- you'll see another confirmation panel about saving passwords:\r\n![image](https://user-images.githubusercontent.com/941075/38701037-409fdc70-3e73-11e8-8997-ec8ecc082163.png)\r\n- refresh the page\r\n- click on the first input\r\n- you'll see a list of the previously used usernames: ![image](https://user-images.githubusercontent.com/941075/38701545-8b5e1e2e-3e74-11e8-932a-ccf18b6a07fc.png)\r\n\r\n## Steps to reproduce when IT DOESN'T WORK (15.2.0, 15.6.2, 16.3.1)\r\n\r\n- remove previously saved passwords from the codesandbox.io domain:\r\n![image](https://user-images.githubusercontent.com/941075/38700921-ee497666-3e72-11e8-8b27-8e64fb6a4e2e.png) \r\n- go to any of the non-working sandboxes ([15.2.0](https://codesandbox.io/s/o9kl2jzo1q), [15.6.2](https://codesandbox.io/s/38kp95wl96), [16.3.1](https://codesandbox.io/s/xjpk3wr55p)\r\n- type a username and a password and hit submit\r\n- there will be no password confirmation panel\r\n- refresh the page\r\n- click on the first input\r\n- there will be no list of previously used usernames",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/12717",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/12717/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/12717/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/12717/events",
    "html_url": "https://github.com/facebook/react/issues/12717",
    "id": 318721365,
    "node_id": "MDU6SXNzdWUzMTg3MjEzNjU=",
    "number": 12717,
    "title": "onMouseDown causes splash on real ios browsers",
    "user": {
      "login": "huhaixiao",
      "id": 11453698,
      "node_id": "MDQ6VXNlcjExNDUzNjk4",
      "avatar_url": "https://avatars2.githubusercontent.com/u/11453698?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/huhaixiao",
      "html_url": "https://github.com/huhaixiao",
      "followers_url": "https://api.github.com/users/huhaixiao/followers",
      "following_url": "https://api.github.com/users/huhaixiao/following{/other_user}",
      "gists_url": "https://api.github.com/users/huhaixiao/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/huhaixiao/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/huhaixiao/subscriptions",
      "organizations_url": "https://api.github.com/users/huhaixiao/orgs",
      "repos_url": "https://api.github.com/users/huhaixiao/repos",
      "events_url": "https://api.github.com/users/huhaixiao/events{/privacy}",
      "received_events_url": "https://api.github.com/users/huhaixiao/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 69105358,
        "node_id": "MDU6TGFiZWw2OTEwNTM1OA==",
        "url": "https://api.github.com/repos/facebook/react/labels/Browser:%20Safari",
        "name": "Browser: Safari",
        "color": "c7def8",
        "default": false,
        "description": null
      },
      {
        "id": 127893911,
        "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
        "name": "Component: DOM",
        "color": "fef2c0",
        "default": false,
        "description": null
      },
      {
        "id": 40929151,
        "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
        "name": "Type: Bug",
        "color": "b60205",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2018-04-29T14:27:00Z",
    "updated_at": "2018-08-06T23:10:50Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\n*bug*\r\n\r\n**What is the current behavior?**\r\n\r\nunexpected **grey splash** caused by `onMouseDown` on real ios device's browsers, both safari and chrome.\r\n[Please checkout this **grey splash** issue first](https://github.com/mui-org/material-ui/issues/11154)\r\nI did some trial later, and find out that vanilla html `<button onmousedown=\"\">btn</button>` doesn't cause **grey splash**, but with React's jsx `<button onMouseDown={()=>{}}></button>`, there is a noticeable **grey splash**\r\n\r\n**What is the expected behavior?**\r\n\r\nwho wants a splash?\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n\"react\": \"^16.3.2\"\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/12615",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/12615/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/12615/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/12615/events",
    "html_url": "https://github.com/facebook/react/issues/12615",
    "id": 314394404,
    "node_id": "MDU6SXNzdWUzMTQzOTQ0MDQ=",
    "number": 12615,
    "title": "Unexpected warning when hydrating with portal and SSR",
    "user": {
      "login": "majelbstoat",
      "id": 425787,
      "node_id": "MDQ6VXNlcjQyNTc4Nw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/425787?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/majelbstoat",
      "html_url": "https://github.com/majelbstoat",
      "followers_url": "https://api.github.com/users/majelbstoat/followers",
      "following_url": "https://api.github.com/users/majelbstoat/following{/other_user}",
      "gists_url": "https://api.github.com/users/majelbstoat/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/majelbstoat/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/majelbstoat/subscriptions",
      "organizations_url": "https://api.github.com/users/majelbstoat/orgs",
      "repos_url": "https://api.github.com/users/majelbstoat/repos",
      "events_url": "https://api.github.com/users/majelbstoat/events{/privacy}",
      "received_events_url": "https://api.github.com/users/majelbstoat/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 588833528,
        "node_id": "MDU6TGFiZWw1ODg4MzM1Mjg=",
        "url": "https://api.github.com/repos/facebook/react/labels/Difficulty:%20medium",
        "name": "Difficulty: medium",
        "color": "fbca04",
        "default": false,
        "description": null
      },
      {
        "id": 40929151,
        "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
        "name": "Type: Bug",
        "color": "b60205",
        "default": false,
        "description": null
      },
      {
        "id": 717031390,
        "node_id": "MDU6TGFiZWw3MTcwMzEzOTA=",
        "url": "https://api.github.com/repos/facebook/react/labels/good%20first%20issue",
        "name": "good first issue",
        "color": "6ce26a",
        "default": true,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 24,
    "created_at": "2018-04-15T07:50:53Z",
    "updated_at": "2020-09-25T23:50:56Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\n*bug*\r\n\r\n**What is the current behavior?**\r\n\r\nGiven the following (simplified) snippet:\r\n\r\n```jsx\r\nclass HoverMenu extends React.Component {\r\n  render() {\r\n    if (typeof document === 'undefined') return null\r\n    const root = document.getElementById('root')\r\n    return ReactDOM.createPortal(<div>Hello World</div>, root)\r\n  }\r\n}\r\n\r\nclass Para extends React.Component {\r\n  render() {\r\n    return (\r\n      <span>\r\n        Some Text\r\n        <HoverMenu />\r\n      </span>\r\n    )\r\n  }\r\n} \r\n```\r\n\r\nwhere `div#root` is a valid `div` that exists, the following error is shown when hydrating after SSR:\r\n\r\n`Warning: Expected server HTML to contain a matching <div> in <span>`\r\n\r\nThe warning goes away if I update the definition of `HoverMenu` to:\r\n\r\n```jsx\r\nclass HoverMenu extends React.Component {\r\n  componentDidMount() {\r\n    this.setState({ isActive: true })\r\n  }\r\n  render() {\r\n    const { isActive} = this.state\r\n    if (!isActive) return null\r\n    const root = document.getElementById('root')\r\n    return ReactDOM.createPortal(<div>Hello World</div>, root)\r\n  }\r\n}\r\n```\r\n\r\nI'd prefer not to do that because of the double rendering caused by `setState` in `componentDidMount`.\r\n\r\nI don't quite understand what that error is telling me. No `<div />` is rendered server-side in either case. The error is particularly confusing, as the `HoverMenu` DOM `div` is not even rendered inside a DOM `span`. (I wonder if this is happening because `HoverMenu` is nested inside a React `span`.)\r\n\r\n**What is the expected behavior?**\r\n\r\nNo error is thrown. Or, at least that the error message is clearer.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nChrome 65\r\nReact 16.2\r\n(SSR through Next 5.1)\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/12441",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/12441/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/12441/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/12441/events",
    "html_url": "https://github.com/facebook/react/issues/12441",
    "id": 308069851,
    "node_id": "MDU6SXNzdWUzMDgwNjk4NTE=",
    "number": 12441,
    "title": "Dangerous strings can reach browser builtins",
    "user": {
      "login": "mikesamuel",
      "id": 368886,
      "node_id": "MDQ6VXNlcjM2ODg4Ng==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/368886?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikesamuel",
      "html_url": "https://github.com/mikesamuel",
      "followers_url": "https://api.github.com/users/mikesamuel/followers",
      "following_url": "https://api.github.com/users/mikesamuel/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikesamuel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikesamuel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikesamuel/subscriptions",
      "organizations_url": "https://api.github.com/users/mikesamuel/orgs",
      "repos_url": "https://api.github.com/users/mikesamuel/repos",
      "events_url": "https://api.github.com/users/mikesamuel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikesamuel/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 127893911,
        "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
        "name": "Component: DOM",
        "color": "fef2c0",
        "default": false,
        "description": null
      },
      {
        "id": 710375792,
        "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 8,
    "created_at": "2018-03-23T15:16:28Z",
    "updated_at": "2019-04-24T15:28:16Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nA bug, but a well known and worked-around one.\r\n\r\n**What is the current behavior?**\r\n\r\n```jsx\r\nvar x = 'javascript:alert(1)';\r\nReactDOM.render(\r\n  (<a href={x}>Link</a>),\r\n  document.getElementById('container')\r\n);\r\n```\r\n\r\nproduces a link that alerts.\r\n\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n* [Load the code above in the codepen REPL](https://jsfiddle.net/Luktwrdm/202/)\r\n* After the REPL loads, click the \"Run\" button at the top left.\r\n* You should see a blue \"link\" in the bottom-right pane.\r\n* Click it.  An alert will popup.\r\n\r\nThe alert should not pop up.\r\n\r\nA simple string that reaches an `href` attribute should not cause arbitrary code execution even with user interaction.\r\n\r\n\r\n**What is the expected behavior?**\r\nA string that reaches a browser builtin like the `HTMLAElement.prototype.href` setter should not cause code execution.\r\n\r\n**Discussion**\r\n\r\n[Polymer Resin](https://docs.google.com/presentation/d/1hepAXMroHSNTM0NV1aGlntjHrw0a0QOM5X5JvfXv_N0/edit#slide=id.g227691820f_0_198) uses hooks in another webcomponents framework to intercept value before they reach browser builtins where they can be vetted.  A similar approach could work for React.\r\n\r\nIt allows values to reach browser builtins when they are innocuous or have a runtime type that indicates that the author intentionally marked them as safe for that kind of browser builtin.\r\n\r\nFor example, an `instanceof SafeURL` would be allowed to reach `HTMLAElement.prototype.href` as would any string that is a relative URL, or one with a whitelisted protocol in (`http`, `https`, `mailto`, `tel`) but not `javascript:...`.\r\n\r\nMany developers know that `<a href={...}>` is risky, but if the link is an implementation detail of a custom React element, then developers don't have the context to know which attributes they need to be careful with.  They shouldn't have to either since it is an implementation detail.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nI believe this is widespread across versions.\r\n\r\nAn earlier REPL I tried showed that it worked on version 16.2.0 from https://unpkg.com/react-dom/umd/react-dom.development.js but I don't know what version the jsfiddle above uses.\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/12363",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/12363/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/12363/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/12363/events",
    "html_url": "https://github.com/facebook/react/issues/12363",
    "id": 304866202,
    "node_id": "MDU6SXNzdWUzMDQ4NjYyMDI=",
    "number": 12363,
    "title": "React onBlur events not firing during unmount",
    "user": {
      "login": "timjim-kr",
      "id": 13425297,
      "node_id": "MDQ6VXNlcjEzNDI1Mjk3",
      "avatar_url": "https://avatars3.githubusercontent.com/u/13425297?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/timjim-kr",
      "html_url": "https://github.com/timjim-kr",
      "followers_url": "https://api.github.com/users/timjim-kr/followers",
      "following_url": "https://api.github.com/users/timjim-kr/following{/other_user}",
      "gists_url": "https://api.github.com/users/timjim-kr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/timjim-kr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/timjim-kr/subscriptions",
      "organizations_url": "https://api.github.com/users/timjim-kr/orgs",
      "repos_url": "https://api.github.com/users/timjim-kr/repos",
      "events_url": "https://api.github.com/users/timjim-kr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/timjim-kr/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 127893911,
        "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
        "name": "Component: DOM",
        "color": "fef2c0",
        "default": false,
        "description": null
      },
      {
        "id": 40929151,
        "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
        "name": "Type: Bug",
        "color": "b60205",
        "default": false,
        "description": null
      },
      {
        "id": 710722093,
        "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
        "name": "Type: Needs Investigation",
        "color": "fbca04",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 12,
    "created_at": "2018-03-13T17:38:08Z",
    "updated_at": "2020-07-08T10:47:47Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nbug\r\n\r\n**What is the current behavior?**\r\n\r\nIf a DOM element rendered by a React component has focus, and the React component unmounts, the React `onBlur` event does not fire on parent DOM elements.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://codesandbox.io/s/134wrzy6q7\r\n\r\n**What is the expected behavior?**\r\n\r\nI would expect that, just like the browser fires a `focusout` event when removing a DOM node, React would fire an `onBlur` events up to parent nodes when the focused node is removed / unmounted.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact: 16.2\r\nMac OS X: 10.13.2\r\nBrowser: Chrome 67.0.3366.0, Chrome 64.0.3282.186\r\n\r\nNo idea if this worked in earlier versions of React.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/12334",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/12334/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/12334/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/12334/events",
    "html_url": "https://github.com/facebook/react/issues/12334",
    "id": 302645565,
    "node_id": "MDU6SXNzdWUzMDI2NDU1NjU=",
    "number": 12334,
    "title": "For Controlled Input, step does not work as expected unless initialized with null or \"\".",
    "user": {
      "login": "andyboyne",
      "id": 3295544,
      "node_id": "MDQ6VXNlcjMyOTU1NDQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/3295544?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andyboyne",
      "html_url": "https://github.com/andyboyne",
      "followers_url": "https://api.github.com/users/andyboyne/followers",
      "following_url": "https://api.github.com/users/andyboyne/following{/other_user}",
      "gists_url": "https://api.github.com/users/andyboyne/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andyboyne/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andyboyne/subscriptions",
      "organizations_url": "https://api.github.com/users/andyboyne/orgs",
      "repos_url": "https://api.github.com/users/andyboyne/repos",
      "events_url": "https://api.github.com/users/andyboyne/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andyboyne/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 127893911,
        "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
        "name": "Component: DOM",
        "color": "fef2c0",
        "default": false,
        "description": null
      },
      {
        "id": 40929151,
        "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
        "name": "Type: Bug",
        "color": "b60205",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2018-03-06T10:30:40Z",
    "updated_at": "2019-01-12T18:45:17Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "*BUG*\r\n\r\n**What is the current behavior?**\r\nFor input type=\"number\", step does not work as expected if there is an initial value set. Step only seems to get honored if the initial value is \"\" or null.\r\n\r\nExample:\r\nhttps://codepen.io/anon/pen/MQMBmX\r\n\r\nThe example uses a controlled input binding value and step. Step is 1/10th of the value. If you edit the value in the textbox to 50000 and increment using the stepper, it will increment to 50100 (i.e. by the initial value and not by the current step).\r\n\r\nEdit the code so initial value is \"\" or null. Edit textbox to 50000 and step up - value goes to 55000 as expected.\r\n\r\n**What is the expected behavior?**\r\nIt should be possible to render a number input that honors step without having to initialize the input component value to null or \"\" first.\r\n\r\nIt seems when there is an initial value provided, it will write a value attribute into the DOM (e.g. value=\"100\").  When initial value is \"\" or null then just the value attribute is written to DOM with no assignment. e.g. (value).\r\n\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.3.0-alpha.1  (ported to this version to confirm if still an issue)\r\n0.14.7 (originally found in this version)\r\n\r\nSeems to affect Chrome only (confirmed windows and mac, versions 59 and 64). Bug does not appear in Safari (on a mac at least).",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/12235",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/12235/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/12235/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/12235/events",
    "html_url": "https://github.com/facebook/react/issues/12235",
    "id": 297641027,
    "node_id": "MDU6SXNzdWUyOTc2NDEwMjc=",
    "number": 12235,
    "title": "Extracting a Context Stack",
    "user": {
      "login": "sebmarkbage",
      "id": 63648,
      "node_id": "MDQ6VXNlcjYzNjQ4",
      "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sebmarkbage",
      "html_url": "https://github.com/sebmarkbage",
      "followers_url": "https://api.github.com/users/sebmarkbage/followers",
      "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
      "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
      "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
      "repos_url": "https://api.github.com/users/sebmarkbage/repos",
      "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 739761016,
        "node_id": "MDU6TGFiZWw3Mzk3NjEwMTY=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler",
        "name": "Component: Reconciler",
        "color": "f9a798",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      },
      {
        "id": 121709921,
        "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
        "name": "Type: Feature Request",
        "color": "c7def8",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2018-02-16T00:04:58Z",
    "updated_at": "2020-01-08T19:17:21Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "A useful feature of context is creating a custom stack of things to see what your component is embedded in side.\r\n\r\nI think the primary use case is logging explicitly.\r\n\r\nCurrently that is pretty expensive to maintain just *in case* you need it. See #12234 as an example.\r\n\r\nWe could provide an API that lazily extracts a whole path of contexts from the tree.\r\n\r\n```js\r\n<FooContext.Provider value={\"foo\"}>\r\n  <FooContext.Provider value={\"bar\"}>\r\n    <FooContext.Provider value={\"baz\"}>\r\n      <App />\r\n    </FooContext.Provider>\r\n  </FooContext.Provider>\r\n</FooContext.Provider>\r\n```\r\n\r\n```js\r\nclass App extends React.Component {\r\n  log() {\r\n    var stack = this.getContextStack(FooContext);\r\n    logToServer(stack); // [\"foo\", \"bar\", \"baz\"]\r\n  }\r\n  render() {\r\n    return <div onClick={this.log} />;\r\n  }\r\n}\r\n```\r\n\r\nIt would basically synchronously rerender the shortest path to recreate the context at the time of the call to create the stack lazily.\r\n\r\ncc @acdlite ",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/12209",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/12209/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/12209/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/12209/events",
    "html_url": "https://github.com/facebook/react/issues/12209",
    "id": 296211558,
    "node_id": "MDU6SXNzdWUyOTYyMTE1NTg=",
    "number": 12209,
    "title": "Warn if stringifying an attribute takes too long",
    "user": {
      "login": "gaearon",
      "id": 810438,
      "node_id": "MDQ6VXNlcjgxMDQzOA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gaearon",
      "html_url": "https://github.com/gaearon",
      "followers_url": "https://api.github.com/users/gaearon/followers",
      "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
      "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
      "organizations_url": "https://api.github.com/users/gaearon/orgs",
      "repos_url": "https://api.github.com/users/gaearon/repos",
      "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gaearon/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 127893911,
        "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
        "name": "Component: DOM",
        "color": "fef2c0",
        "default": false,
        "description": null
      },
      {
        "id": 588833528,
        "node_id": "MDU6TGFiZWw1ODg4MzM1Mjg=",
        "url": "https://api.github.com/repos/facebook/react/labels/Difficulty:%20medium",
        "name": "Difficulty: medium",
        "color": "fbca04",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      },
      {
        "id": 725156255,
        "node_id": "MDU6TGFiZWw3MjUxNTYyNTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/good%20first%20issue%20(taken)",
        "name": "good first issue (taken)",
        "color": "b60205",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 18,
    "created_at": "2018-02-11T18:14:28Z",
    "updated_at": "2020-10-07T13:54:30Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "With React 16 we don't have an attribute whitelist so both `src={obj}` and `myattribute={obj}` would be valid. The objects get stringified and added as attributes for smooth migration path because a lot of the existing code already depends on this behavior.\r\n\r\nThere is, however, one pitfall here. Sometimes you made do `<div {...rest}>` and not realize that `rest` includes an object whose stringifying is unusually expensive. For example a deeply nested Immutable Map. Now, this wouldn't produce an error, but it would slow down rendering for no good reason.\r\n\r\nWe could protect against this by putting `performance.now()` counters around the places where we stringify attributes. If stringification takes more than, say, 2 milliseconds, then something bad is going on, and we should probably warn.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/12073",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/12073/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/12073/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/12073/events",
    "html_url": "https://github.com/facebook/react/issues/12073",
    "id": 290557932,
    "node_id": "MDU6SXNzdWUyOTA1NTc5MzI=",
    "number": 12073,
    "title": "Fabric Todos",
    "user": {
      "login": "sebmarkbage",
      "id": 63648,
      "node_id": "MDQ6VXNlcjYzNjQ4",
      "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sebmarkbage",
      "html_url": "https://github.com/sebmarkbage",
      "followers_url": "https://api.github.com/users/sebmarkbage/followers",
      "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
      "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
      "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
      "repos_url": "https://api.github.com/users/sebmarkbage/repos",
      "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      },
      {
        "id": 710615342,
        "node_id": "MDU6TGFiZWw3MTA2MTUzNDI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Umbrella",
        "name": "Type: Umbrella",
        "color": "5319e7",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2018-01-22T17:55:39Z",
    "updated_at": "2020-01-08T19:17:20Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "For my own notes here are some spill-overs from the Fabric renderer commit.\r\n\r\n- [ ] Update currentProps for updates in the commit phase. Needs a host effect to be marked and we need a hook to do host updates in the persistent mode.\r\n- [x] Actually use currentProps when extracting events in the component tree.\r\n- [ ] Resuming will need to be able to not reuse host nodes used by another thread.\r\n- [ ] Should always clone direct siblings of a changed node, in case they will relayout.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/11972",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/11972/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/11972/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/11972/events",
    "html_url": "https://github.com/facebook/react/issues/11972",
    "id": 286328956,
    "node_id": "MDU6SXNzdWUyODYzMjg5NTY=",
    "number": 11972,
    "title": "Consider removing mouseenter/mouseleave polyfill",
    "user": {
      "login": "gaearon",
      "id": 810438,
      "node_id": "MDQ6VXNlcjgxMDQzOA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gaearon",
      "html_url": "https://github.com/gaearon",
      "followers_url": "https://api.github.com/users/gaearon/followers",
      "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
      "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
      "organizations_url": "https://api.github.com/users/gaearon/orgs",
      "repos_url": "https://api.github.com/users/gaearon/repos",
      "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gaearon/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 127893911,
        "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
        "name": "Component: DOM",
        "color": "fef2c0",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      },
      {
        "id": 763742499,
        "node_id": "MDU6TGFiZWw3NjM3NDI0OTk=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Breaking%20Change",
        "name": "Type: Breaking Change",
        "color": "aa2608",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": {
      "url": "https://api.github.com/repos/facebook/react/milestones/40",
      "html_url": "https://github.com/facebook/react/milestone/40",
      "labels_url": "https://api.github.com/repos/facebook/react/milestones/40/labels",
      "id": 2937756,
      "node_id": "MDk6TWlsZXN0b25lMjkzNzc1Ng==",
      "number": 40,
      "title": "18.0.0",
      "description": "",
      "creator": {
        "login": "gaearon",
        "id": 810438,
        "node_id": "MDQ6VXNlcjgxMDQzOA==",
        "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gaearon",
        "html_url": "https://github.com/gaearon",
        "followers_url": "https://api.github.com/users/gaearon/followers",
        "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
        "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
        "organizations_url": "https://api.github.com/users/gaearon/orgs",
        "repos_url": "https://api.github.com/users/gaearon/repos",
        "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gaearon/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 8,
      "closed_issues": 2,
      "state": "open",
      "created_at": "2017-11-26T22:47:57Z",
      "updated_at": "2020-08-28T18:04:04Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 3,
    "created_at": "2018-01-05T16:00:10Z",
    "updated_at": "2020-01-08T19:17:20Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "As suggested in https://github.com/facebook/react/pull/10247.\r\nNot sure we want to do it, but I decided to create an issue to track future attempts (the PR is stale).",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/11949",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/11949/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/11949/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/11949/events",
    "html_url": "https://github.com/facebook/react/issues/11949",
    "id": 285498529,
    "node_id": "MDU6SXNzdWUyODU0OTg1Mjk=",
    "number": 11949,
    "title": "Output JUnit XML test metadata for CircleCI",
    "user": {
      "login": "sophiebits",
      "id": 6820,
      "node_id": "MDQ6VXNlcjY4MjA=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/6820?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sophiebits",
      "html_url": "https://github.com/sophiebits",
      "followers_url": "https://api.github.com/users/sophiebits/followers",
      "following_url": "https://api.github.com/users/sophiebits/following{/other_user}",
      "gists_url": "https://api.github.com/users/sophiebits/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sophiebits/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sophiebits/subscriptions",
      "organizations_url": "https://api.github.com/users/sophiebits/orgs",
      "repos_url": "https://api.github.com/users/sophiebits/repos",
      "events_url": "https://api.github.com/users/sophiebits/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sophiebits/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 71502270,
        "node_id": "MDU6TGFiZWw3MTUwMjI3MA==",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Build%20Infrastructure",
        "name": "Component: Build Infrastructure",
        "color": "f9d0c4",
        "default": false,
        "description": null
      },
      {
        "id": 588833528,
        "node_id": "MDU6TGFiZWw1ODg4MzM1Mjg=",
        "url": "https://api.github.com/repos/facebook/react/labels/Difficulty:%20medium",
        "name": "Difficulty: medium",
        "color": "fbca04",
        "default": false,
        "description": null
      },
      {
        "id": 1776420141,
        "node_id": "MDU6TGFiZWwxNzc2NDIwMTQx",
        "url": "https://api.github.com/repos/facebook/react/labels/Partner",
        "name": "Partner",
        "color": "e4bef7",
        "default": false,
        "description": ""
      },
      {
        "id": 725156255,
        "node_id": "MDU6TGFiZWw3MjUxNTYyNTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/good%20first%20issue%20(taken)",
        "name": "good first issue (taken)",
        "color": "b60205",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 8,
    "created_at": "2018-01-02T18:08:39Z",
    "updated_at": "2020-01-08T23:42:28Z",
    "closed_at": null,
    "author_association": "COLLABORATOR",
    "active_lock_reason": null,
    "body": "# @benbraou has claimed this issue. Please give them a chance to work on this.\r\n\r\n---\r\n\r\nHere's a screenshot of a CircleCI build for another (private) project I'm a part of:\r\n\r\n![image](https://user-images.githubusercontent.com/6820/34494194-1d3d3f70-efa4-11e7-87b7-0ca9961b2934.png)\r\n\r\nIt clearly highlights the parts of the build that failed.\r\n\r\nIn contrast, see one of our builds: https://circleci.com/gh/facebook/react/8402. In this one the ./scripts/circleci/upload_build.sh step failed but you need to scroll through the output a significant amount to see that. This is in part because we have a custom entry point for all our CI steps ([scripts/circleci/test_entry_point.sh](https://github.com/facebook/react/blob/v16.2.0/scripts/circleci/test_entry_point.sh)) to make it easier for us to parallelize some build steps.\r\n\r\nI'd like us to change that test_entry_point.sh script to output JUnit XML metadata for CircleCI as described in https://circleci.com/docs/2.0/collect-test-data/. Then I believe the CircleCI build results page will show exactly which step failed.\r\n\r\n(Bonus: If we can show individual Jest tests that would be even cooler. But I think the most important part is breaking out jest vs flow vs prettier, etc. into separate chunks.)",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/11935",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/11935/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/11935/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/11935/events",
    "html_url": "https://github.com/facebook/react/issues/11935",
    "id": 285212510,
    "node_id": "MDU6SXNzdWUyODUyMTI1MTA=",
    "number": 11935,
    "title": "Consider a more specific warning for key={undefined}",
    "user": {
      "login": "gaearon",
      "id": 810438,
      "node_id": "MDQ6VXNlcjgxMDQzOA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gaearon",
      "html_url": "https://github.com/gaearon",
      "followers_url": "https://api.github.com/users/gaearon/followers",
      "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
      "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
      "organizations_url": "https://api.github.com/users/gaearon/orgs",
      "repos_url": "https://api.github.com/users/gaearon/repos",
      "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gaearon/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 139653724,
        "node_id": "MDU6TGFiZWwxMzk2NTM3MjQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Core%20Utilities",
        "name": "Component: Core Utilities",
        "color": "c5def5",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      },
      {
        "id": 40929153,
        "node_id": "MDU6TGFiZWw0MDkyOTE1Mw==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
        "name": "Type: Enhancement",
        "color": "84b6eb",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2017-12-30T17:00:45Z",
    "updated_at": "2020-01-30T13:30:33Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "Proposed in [this comment](https://dev.to/k1sul1/comment/1o68):\r\n\r\n>I had changed the casing of \"ID\" in the response, but forgot to commit it aaaaaand I ended up with it happening.\r\n\r\n>Basically I was doing key={undefined}. Could React warn user when this happens, something like \"Looks like you tried to supply a key, but the value supplied is undefined. Check the render...\" and so on?\r\n\r\nI think it might make sense to give a more specific warning in this case. Open to suggestions about specific wording and in which case it would be used.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/11896",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/11896/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/11896/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/11896/events",
    "html_url": "https://github.com/facebook/react/issues/11896",
    "id": 283653451,
    "node_id": "MDU6SXNzdWUyODM2NTM0NTE=",
    "number": 11896,
    "title": "Stop syncing value attribute for controlled inputs",
    "user": {
      "login": "aweary",
      "id": 6886061,
      "node_id": "MDQ6VXNlcjY4ODYwNjE=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/6886061?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aweary",
      "html_url": "https://github.com/aweary",
      "followers_url": "https://api.github.com/users/aweary/followers",
      "following_url": "https://api.github.com/users/aweary/following{/other_user}",
      "gists_url": "https://api.github.com/users/aweary/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aweary/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aweary/subscriptions",
      "organizations_url": "https://api.github.com/users/aweary/orgs",
      "repos_url": "https://api.github.com/users/aweary/repos",
      "events_url": "https://api.github.com/users/aweary/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aweary/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 127893911,
        "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
        "name": "Component: DOM",
        "color": "fef2c0",
        "default": false,
        "description": null
      },
      {
        "id": 763742499,
        "node_id": "MDU6TGFiZWw3NjM3NDI0OTk=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Breaking%20Change",
        "name": "Type: Breaking Change",
        "color": "aa2608",
        "default": false,
        "description": null
      },
      {
        "id": 710375792,
        "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": {
      "url": "https://api.github.com/repos/facebook/react/milestones/40",
      "html_url": "https://github.com/facebook/react/milestone/40",
      "labels_url": "https://api.github.com/repos/facebook/react/milestones/40/labels",
      "id": 2937756,
      "node_id": "MDk6TWlsZXN0b25lMjkzNzc1Ng==",
      "number": 40,
      "title": "18.0.0",
      "description": "",
      "creator": {
        "login": "gaearon",
        "id": 810438,
        "node_id": "MDQ6VXNlcjgxMDQzOA==",
        "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gaearon",
        "html_url": "https://github.com/gaearon",
        "followers_url": "https://api.github.com/users/gaearon/followers",
        "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
        "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
        "organizations_url": "https://api.github.com/users/gaearon/orgs",
        "repos_url": "https://api.github.com/users/gaearon/repos",
        "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gaearon/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 8,
      "closed_issues": 2,
      "state": "open",
      "created_at": "2017-11-26T22:47:57Z",
      "updated_at": "2020-08-28T18:04:04Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 22,
    "created_at": "2017-12-20T18:21:41Z",
    "updated_at": "2018-10-04T06:30:59Z",
    "closed_at": null,
    "author_association": "COLLABORATOR",
    "active_lock_reason": null,
    "body": "Opening this as a follow up to some quick discussions in https://github.com/facebook/react/issues/11881. Syncing the `value` attribute has been a consistent source of bugs for us, and the benefits of doing so seem minimal. There's some previous discussion on the topic in https://github.com/facebook/react/pull/7359 and in other issues, I can't remember right now ðŸ˜„ \r\n\r\nThis would be a breaking change, so it would have to be done in a major release. \r\n\r\n## Reasons to keep syncing\r\n\r\n* It prevents `form.reset()` from putting controlled form inputs into a weird state\r\n* Some browser extensions (not sure which) read from the `value` attribute in some cases (not sure which)\r\n* It can be useful for querying inputs with a specific value using an attribute selector\r\n\r\n## Reasons to stop syncing\r\n\r\n* It will reduce the complexity of `react-dom` in a non-trivial way\r\n* In turn, it will likely reduce bundle size as well\r\n* We remove a whole class of bugs (fighting with browsers that want to be helpful about input values)\r\n* Syncing the input value to the attribute potentially exposes sensitive data to third party tools ([1](https://www.reddit.com/r/analytics/comments/7ukw4n/mixpanel_js_library_has_been_harvesting_passwords/))\r\n\r\n______\r\n\r\nWhat do we think? Are these reasons good enough to keep syncing the `value` attribute? Are there other more critical reasons we should keep doing so?\r\n\r\n\r\ncc @nhunzaker @jquense @gaearon ",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/11881",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/11881/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/11881/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/11881/events",
    "html_url": "https://github.com/facebook/react/issues/11881",
    "id": 282975575,
    "node_id": "MDU6SXNzdWUyODI5NzU1NzU=",
    "number": 11881,
    "title": "backspace fails to clear values on input type='email'",
    "user": {
      "login": "codeangler",
      "id": 1369197,
      "node_id": "MDQ6VXNlcjEzNjkxOTc=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1369197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/codeangler",
      "html_url": "https://github.com/codeangler",
      "followers_url": "https://api.github.com/users/codeangler/followers",
      "following_url": "https://api.github.com/users/codeangler/following{/other_user}",
      "gists_url": "https://api.github.com/users/codeangler/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/codeangler/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/codeangler/subscriptions",
      "organizations_url": "https://api.github.com/users/codeangler/orgs",
      "repos_url": "https://api.github.com/users/codeangler/repos",
      "events_url": "https://api.github.com/users/codeangler/events{/privacy}",
      "received_events_url": "https://api.github.com/users/codeangler/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 127893911,
        "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
        "name": "Component: DOM",
        "color": "fef2c0",
        "default": false,
        "description": null
      },
      {
        "id": 40929151,
        "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
        "name": "Type: Bug",
        "color": "b60205",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2017-12-18T18:21:42Z",
    "updated_at": "2019-10-03T01:16:07Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nbug \r\n\r\n**What is the current behavior?**\r\nemail input doesn't control for whitespace // possible variation on [Issue 6368](https://github.com/facebook/react/issues/6368); however, 6368 shows up at 15.0.0 this bug shows up at 15.2\r\n\r\n**If the current behavior is a bug, demo**\r\n\r\nno bug in React 15.0.0\r\nno bug in React 15.1.0\r\nbug on React 15.2\r\n[React~15 fiddle](https://jsfiddle.net/cburnett/79z43qxn/9/)\r\n\r\nbug on React 16 \r\n[React~16 fiddle](https://jsfiddle.net/cburnett/q1297t5w/2/)\r\n\r\n**What is the expected behavior?**\r\n\r\nWhen a user presses down the backspace key and holds it, all values in the input are removed, including the whitespaces  \r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nWorks on 15.1.0\r\nbug at >= 15.2.0 \r\ntesting on Chrome 63\r\nMacOs Sierra 10.12\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/11877",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/11877/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/11877/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/11877/events",
    "html_url": "https://github.com/facebook/react/issues/11877",
    "id": 282847262,
    "node_id": "MDU6SXNzdWUyODI4NDcyNjI=",
    "number": 11877,
    "title": "Number input gets cleared when typing period as decimal mark",
    "user": {
      "login": "Hilzu",
      "id": 969840,
      "node_id": "MDQ6VXNlcjk2OTg0MA==",
      "avatar_url": "https://avatars1.githubusercontent.com/u/969840?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Hilzu",
      "html_url": "https://github.com/Hilzu",
      "followers_url": "https://api.github.com/users/Hilzu/followers",
      "following_url": "https://api.github.com/users/Hilzu/following{/other_user}",
      "gists_url": "https://api.github.com/users/Hilzu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Hilzu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Hilzu/subscriptions",
      "organizations_url": "https://api.github.com/users/Hilzu/orgs",
      "repos_url": "https://api.github.com/users/Hilzu/repos",
      "events_url": "https://api.github.com/users/Hilzu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Hilzu/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 127893911,
        "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
        "name": "Component: DOM",
        "color": "fef2c0",
        "default": false,
        "description": null
      },
      {
        "id": 40929151,
        "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
        "name": "Type: Bug",
        "color": "b60205",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 13,
    "created_at": "2017-12-18T11:29:42Z",
    "updated_at": "2019-03-25T23:38:32Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nMy OS and browser are configured to a locale that uses comma as the decimal mark (Finland for those interested). In the codepen below when I accidentally type a period after some number the whole input gets cleared. This is somehow related to the parent component's state being updated because if the `defaultValue` prop is removed from the `<Input>` component the input doesn't get cleared.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template for React 16: https://jsfiddle.net/Luktwrdm/, template for React 15: https://jsfiddle.net/hmbg7e9w/).**\r\n\r\nhttps://codepen.io/anon/pen/aEOgNL?editors=0010\r\n\r\n**What is the expected behavior?**\r\n\r\nThe input should retain its visible value even if it would be invalid (can't be converted to a number).\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.2.0 and Chrome 63 on macOS 10.12.6.\r\n\r\nTested in Safari 11.0.2 and typing a period kinda works. After typing the first number after the period it gets converted to a comma but the cursor jumps to the beginning.\r\n\r\nAlso tested in Firefox 57.0.1 but it seems to think that period is the correct decimal mark.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/11866",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/11866/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/11866/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/11866/events",
    "html_url": "https://github.com/facebook/react/issues/11866",
    "id": 282591514,
    "node_id": "MDU6SXNzdWUyODI1OTE1MTQ=",
    "number": 11866,
    "title": "Improve accidental `void` return in render props?",
    "user": {
      "login": "sebmarkbage",
      "id": 63648,
      "node_id": "MDQ6VXNlcjYzNjQ4",
      "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sebmarkbage",
      "html_url": "https://github.com/sebmarkbage",
      "followers_url": "https://api.github.com/users/sebmarkbage/followers",
      "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
      "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
      "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
      "repos_url": "https://api.github.com/users/sebmarkbage/repos",
      "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 739761016,
        "node_id": "MDU6TGFiZWw3Mzk3NjEwMTY=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler",
        "name": "Component: Reconciler",
        "color": "f9a798",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      },
      {
        "id": 710375792,
        "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2017-12-16T02:02:35Z",
    "updated_at": "2020-01-08T19:17:19Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "We know that it is easy to accidentally forget to return from functions or arrow functions. That's why we don't allow returning `undefined` from render functions. (I think we do in the children position but that's harder to disallow.)\r\n\r\n```js\r\nclass Foo extends React.Component {\r\n  render() {\r\n    return this.props.children();\r\n  }\r\n}\r\n```\r\n\r\n```js\r\nfunction Bar() {\r\n  return <Foo>\r\n    {value => {\r\n      <div>\r\n       ...\r\n      </div>\r\n    }}\r\n  </Foo>;\r\n}\r\n```\r\n\r\nor\r\n\r\n```js\r\nfunction BarImpl(props, value) {\r\n  <div>\r\n  </div>\r\n}\r\nfunction Bar(props) {\r\n  return <Foo>{value => BarImpl(props, value)}</Foo>;\r\n}\r\n```\r\n\r\nIt can be difficult to detect an undefined return but the error/warning will also come from the implementation of `Foo`.\r\n\r\nI wonder if we can improve that somehow.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/11827",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/11827/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/11827/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/11827/events",
    "html_url": "https://github.com/facebook/react/issues/11827",
    "id": 281072678,
    "node_id": "MDU6SXNzdWUyODEwNzI2Nzg=",
    "number": 11827,
    "title": "Cursor jumps when backspacing in a number input (with ShadowDOM)",
    "user": {
      "login": "YellowKirby",
      "id": 1654019,
      "node_id": "MDQ6VXNlcjE2NTQwMTk=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1654019?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/YellowKirby",
      "html_url": "https://github.com/YellowKirby",
      "followers_url": "https://api.github.com/users/YellowKirby/followers",
      "following_url": "https://api.github.com/users/YellowKirby/following{/other_user}",
      "gists_url": "https://api.github.com/users/YellowKirby/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/YellowKirby/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/YellowKirby/subscriptions",
      "organizations_url": "https://api.github.com/users/YellowKirby/orgs",
      "repos_url": "https://api.github.com/users/YellowKirby/repos",
      "events_url": "https://api.github.com/users/YellowKirby/events{/privacy}",
      "received_events_url": "https://api.github.com/users/YellowKirby/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 127893911,
        "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
        "name": "Component: DOM",
        "color": "fef2c0",
        "default": false,
        "description": null
      },
      {
        "id": 588833528,
        "node_id": "MDU6TGFiZWw1ODg4MzM1Mjg=",
        "url": "https://api.github.com/repos/facebook/react/labels/Difficulty:%20medium",
        "name": "Difficulty: medium",
        "color": "fbca04",
        "default": false,
        "description": null
      },
      {
        "id": 40929151,
        "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
        "name": "Type: Bug",
        "color": "b60205",
        "default": false,
        "description": null
      },
      {
        "id": 725156255,
        "node_id": "MDU6TGFiZWw3MjUxNTYyNTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/good%20first%20issue%20(taken)",
        "name": "good first issue (taken)",
        "color": "b60205",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2017-12-11T16:08:07Z",
    "updated_at": "2018-01-15T15:20:56Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n\r\n**What is the current behavior?**\r\nNumber inputs with decimal values in Chrome ShadowDOM do not maintain cursor position as user backspaces in the input field.\r\n\r\nSuper low-quality gif (sorry):\r\n<img src=\"https://thumbs.gfycat.com/TautIncredibleEkaltadeta-size_restricted.gif\"/>\r\n\r\nThis issue appears to be similar to the problem here: https://github.com/facebook/react/pull/7359, but in this case it's only custom elements with a shadow root that exhibit the problem.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template for React 16: https://jsfiddle.net/Luktwrdm/, template for React 15: https://jsfiddle.net/hmbg7e9w/).**\r\n1. Have a React component render a number input: `<input type=\"number\" />`.\r\n2. Attach that React component as part of the ShadowDOM node of a custom element.\r\n3. Enter in some decimal value (e.g., `88.88`) into the input.\r\n4. Slowly backspace in the input. As soon as the decimal point would be the last character, the decimal point is removed and the cursor position jumps to the beginning of the input.\r\n\r\nDemo: https://jsfiddle.net/69z2wepo/94566/\r\n\r\n**What is the expected behavior?**\r\n\r\nThe ShadowDOM case behaves like the other cases: when backspacing in the input, the cursor does not jump to the beginning of the input and the decimal point is not unexpectedly deleted.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact 16.2.0 + Chrome 62.0.3202.62 + OSX 10.12.6\r\n",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/11826",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/11826/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/11826/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/11826/events",
    "html_url": "https://github.com/facebook/react/issues/11826",
    "id": 281014071,
    "node_id": "MDU6SXNzdWUyODEwMTQwNzE=",
    "number": 11826,
    "title": "React does not call onBlur callback",
    "user": {
      "login": "nbob",
      "id": 3524322,
      "node_id": "MDQ6VXNlcjM1MjQzMjI=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3524322?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nbob",
      "html_url": "https://github.com/nbob",
      "followers_url": "https://api.github.com/users/nbob/followers",
      "following_url": "https://api.github.com/users/nbob/following{/other_user}",
      "gists_url": "https://api.github.com/users/nbob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nbob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nbob/subscriptions",
      "organizations_url": "https://api.github.com/users/nbob/orgs",
      "repos_url": "https://api.github.com/users/nbob/repos",
      "events_url": "https://api.github.com/users/nbob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nbob/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 127893911,
        "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
        "name": "Component: DOM",
        "color": "fef2c0",
        "default": false,
        "description": null
      },
      {
        "id": 40929151,
        "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
        "name": "Type: Bug",
        "color": "b60205",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 9,
    "created_at": "2017-12-11T13:20:59Z",
    "updated_at": "2020-06-18T16:55:56Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\n**Bug**\r\n\r\n**What is the current behavior?**\r\nWhen input control becomes disabled, React does not call onBlur callback\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal https://jsfiddle.net/c22pez5z/\r\n\r\n**What is the expected behavior?**\r\n1. Focus on input element\r\n2. Press Enter button (it makes input disabled)\r\n3. `Blur counter` and `Native blur counter` should be equal.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/11805",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/11805/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/11805/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/11805/events",
    "html_url": "https://github.com/facebook/react/issues/11805",
    "id": 280335165,
    "node_id": "MDU6SXNzdWUyODAzMzUxNjU=",
    "number": 11805,
    "title": "Run benchmark trials in random order",
    "user": {
      "login": "gaearon",
      "id": 810438,
      "node_id": "MDQ6VXNlcjgxMDQzOA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gaearon",
      "html_url": "https://github.com/gaearon",
      "followers_url": "https://api.github.com/users/gaearon/followers",
      "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
      "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
      "organizations_url": "https://api.github.com/users/gaearon/orgs",
      "repos_url": "https://api.github.com/users/gaearon/repos",
      "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gaearon/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 71502270,
        "node_id": "MDU6TGFiZWw3MTUwMjI3MA==",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Build%20Infrastructure",
        "name": "Component: Build Infrastructure",
        "color": "f9d0c4",
        "default": false,
        "description": null
      },
      {
        "id": 760751171,
        "node_id": "MDU6TGFiZWw3NjA3NTExNzE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Difficulty:%20challenging",
        "name": "Difficulty: challenging",
        "color": "f2687c",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      },
      {
        "id": 725156255,
        "node_id": "MDU6TGFiZWw3MjUxNTYyNTU=",
        "url": "https://api.github.com/repos/facebook/react/labels/good%20first%20issue%20(taken)",
        "name": "good first issue (taken)",
        "color": "b60205",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2017-12-08T01:09:11Z",
    "updated_at": "2020-01-08T19:17:57Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "Our current benchmark script runs all trials in a specific order.\r\nYou can try it by running:\r\n\r\n```\r\ncd scripts/bench\r\nyarn\r\nyarn start\r\n```\r\n\r\n(Note: it takes a looong time to finish.)\r\n\r\nI think running all trials in a deterministic order like we do now may actually introduce issues. Such as if some other process starts grabbing CPU in the middle of the trials, a specific set of trials (e.g. \"HN\" benchmark on \"base\" repo)  will be affected, and the results skewed.\r\n\r\nBut if we ran all trials in a random order, I would expect any temporary changes to be evenly distributed between random runs, and thus not favor any particular version or benchmark. Wouldn't that be better?\r\n\r\nDoes this make sense? Tagging as a good issue to look into, but I don't promise this would be easy.",
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/11799",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/11799/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/11799/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/11799/events",
    "html_url": "https://github.com/facebook/react/issues/11799",
    "id": 280295918,
    "node_id": "MDU6SXNzdWUyODAyOTU5MTg=",
    "number": 11799,
    "title": "Consider removing XML compatibility from SSR or hiding it behind an option",
    "user": {
      "login": "gaearon",
      "id": 810438,
      "node_id": "MDQ6VXNlcjgxMDQzOA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gaearon",
      "html_url": "https://github.com/gaearon",
      "followers_url": "https://api.github.com/users/gaearon/followers",
      "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
      "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
      "organizations_url": "https://api.github.com/users/gaearon/orgs",
      "repos_url": "https://api.github.com/users/gaearon/repos",
      "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gaearon/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710332294,
        "node_id": "MDU6TGFiZWw3MTAzMzIyOTQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Server%20Rendering",
        "name": "Component: Server Rendering",
        "color": "d4c5f9",
        "default": false,
        "description": null
      },
      {
        "id": 1775958285,
        "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
        "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
        "name": "React Core Team",
        "color": "9149d1",
        "default": false,
        "description": "Opened by a member of the React Core Team"
      },
      {
        "id": 763742499,
        "node_id": "MDU6TGFiZWw3NjM3NDI0OTk=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Breaking%20Change",
        "name": "Type: Breaking Change",
        "color": "aa2608",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": {
      "url": "https://api.github.com/repos/facebook/react/milestones/40",
      "html_url": "https://github.com/facebook/react/milestone/40",
      "labels_url": "https://api.github.com/repos/facebook/react/milestones/40/labels",
      "id": 2937756,
      "node_id": "MDk6TWlsZXN0b25lMjkzNzc1Ng==",
      "number": 40,
      "title": "18.0.0",
      "description": "",
      "creator": {
        "login": "gaearon",
        "id": 810438,
        "node_id": "MDQ6VXNlcjgxMDQzOA==",
        "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gaearon",
        "html_url": "https://github.com/gaearon",
        "followers_url": "https://api.github.com/users/gaearon/followers",
        "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
        "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
        "organizations_url": "https://api.github.com/users/gaearon/orgs",
        "repos_url": "https://api.github.com/users/gaearon/repos",
        "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gaearon/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 8,
      "closed_issues": 2,
      "state": "open",
      "created_at": "2017-11-26T22:47:57Z",
      "updated_at": "2020-08-28T18:04:04Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 3,
    "created_at": "2017-12-07T22:05:51Z",
    "updated_at": "2020-08-25T13:43:07Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "body": "See https://github.com/facebook/react/pull/11708#issuecomment-349953542.\r\nNot sure if it's important but seems suboptimal to send extra markup if most people don't need XML.",
    "performed_via_github_app": null
  }
]